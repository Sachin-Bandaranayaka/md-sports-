ff97df13fbaf2dbbfac1cbc93abd7e34
"use strict";
// Mock jose module
jest.mock("jose", ()=>({
        jwtVerify: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _auth = require("../../src/lib/auth");
const _jose = /*#__PURE__*/ _interop_require_wildcard(require("jose"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock console methods
const consoleSpy = {
    log: jest.spyOn(console, "log").mockImplementation(()=>{}),
    error: jest.spyOn(console, "error").mockImplementation(()=>{})
};
describe("Auth Library Functions", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        consoleSpy.log.mockClear();
        consoleSpy.error.mockClear();
    });
    afterAll(()=>{
        consoleSpy.log.mockRestore();
        consoleSpy.error.mockRestore();
    });
    describe("verifyToken", ()=>{
        const mockJwtVerify = _jose.jwtVerify;
        it("should verify a valid token successfully", async ()=>{
            const mockPayload = {
                sub: "123",
                exp: Date.now() / 1000 + 3600
            };
            mockJwtVerify.mockResolvedValue({
                payload: mockPayload,
                protectedHeader: {}
            });
            const result = await (0, _auth.verifyToken)("valid-token");
            expect(result).toEqual(mockPayload);
            expect(mockJwtVerify).toHaveBeenCalledWith("valid-token", expect.any(Uint8Array));
        });
        it("should return null for expired token", async ()=>{
            const expiredError = new Error("Token expired");
            expiredError.code = "ERR_JWT_EXPIRED";
            mockJwtVerify.mockRejectedValue(expiredError);
            const result = await (0, _auth.verifyToken)("expired-token");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Token expired:", "Token expired");
        });
        it("should return null for invalid token signature", async ()=>{
            const invalidError = new Error("Invalid signature");
            invalidError.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
            mockJwtVerify.mockRejectedValue(invalidError);
            const result = await (0, _auth.verifyToken)("invalid-token");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Invalid token:", "Invalid signature");
        });
        it("should return null for invalid JWS format", async ()=>{
            const invalidError = new Error("Invalid JWS");
            invalidError.code = "ERR_JWS_INVALID";
            mockJwtVerify.mockRejectedValue(invalidError);
            const result = await (0, _auth.verifyToken)("malformed-token");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Invalid token:", "Invalid JWS");
        });
        it("should return null for claim validation failure", async ()=>{
            const claimError = new Error("Claim validation failed");
            claimError.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
            mockJwtVerify.mockRejectedValue(claimError);
            const result = await (0, _auth.verifyToken)("invalid-claims-token");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Invalid token:", "Claim validation failed");
        });
        it("should return null for unknown verification error", async ()=>{
            const unknownError = new Error("Unknown error");
            mockJwtVerify.mockRejectedValue(unknownError);
            const result = await (0, _auth.verifyToken)("problematic-token");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Token verification error:", "Unknown error");
        });
        it("should handle non-Error exceptions", async ()=>{
            mockJwtVerify.mockRejectedValue("string error");
            const result = await (0, _auth.verifyToken)("problematic-token");
            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith("Token verification error:", "Unknown error occurred");
        });
    });
    describe("authOptions", ()=>{
        it("should have correct configuration", ()=>{
            expect(_auth.authOptions.secret).toBeDefined();
            expect(_auth.authOptions.session.strategy).toBe("jwt");
            expect(_auth.authOptions.session.maxAge).toBe(24 * 60 * 60);
            expect(_auth.authOptions.callbacks).toBeDefined();
            expect(_auth.authOptions.callbacks.jwt).toBeDefined();
            expect(_auth.authOptions.callbacks.session).toBeDefined();
        });
        it("should handle jwt callback with user", async ()=>{
            const token = {
                id: null,
                permissions: null
            };
            const user = {
                id: "123",
                permissions: [
                    "read",
                    "write"
                ]
            };
            const result = await _auth.authOptions.callbacks.jwt({
                token,
                user
            });
            expect(result.id).toBe("123");
            expect(result.permissions).toEqual([
                "read",
                "write"
            ]);
        });
        it("should handle jwt callback without user", async ()=>{
            const token = {
                id: "456",
                permissions: [
                    "admin"
                ]
            };
            const result = await _auth.authOptions.callbacks.jwt({
                token
            });
            expect(result.id).toBe("456");
            expect(result.permissions).toEqual([
                "admin"
            ]);
        });
        it("should handle session callback with token", async ()=>{
            const session = {
                user: {
                    name: "Test User"
                }
            };
            const token = {
                id: "789",
                permissions: [
                    "read"
                ]
            };
            const result = await _auth.authOptions.callbacks.session({
                session,
                token
            });
            expect(result.user.id).toBe("789");
            expect(result.user.permissions).toEqual([
                "read"
            ]);
            expect(result.user.name).toBe("Test User");
        });
        it("should handle session callback without token", async ()=>{
            const session = {
                user: {
                    name: "Test User"
                }
            };
            const token = null;
            const result = await _auth.authOptions.callbacks.session({
                session,
                token
            });
            expect(result.user.name).toBe("Test User");
            expect(result.user.id).toBeUndefined();
            expect(result.user.permissions).toBeUndefined();
        });
        it("should handle session callback without user in session", async ()=>{
            const session = {};
            const token = {
                id: "999",
                permissions: [
                    "admin"
                ]
            };
            const result = await _auth.authOptions.callbacks.session({
                session,
                token
            });
            expect(result).toEqual({});
        });
    });
});

//# sourceMappingURL=data:application/json;base64,