c969725b708b6ac7d5a3b07cfd15caa2
"use strict";

/* istanbul ignore next */
function cov_2ng7jnwm2g() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/[id]/route.ts";
  var hash = "fae11e6e97f3ec1e79b27414c4497eb8a7d20613";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 19
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "10": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 52
        }
      },
      "11": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 28,
          column: 66
        }
      },
      "12": {
        start: {
          line: 29,
          column: 36
        },
        end: {
          line: 29,
          column: 92
        }
      },
      "13": {
        start: {
          line: 30,
          column: 30
        },
        end: {
          line: 30,
          column: 81
        }
      },
      "14": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 44,
          column: 6
        }
      },
      "15": {
        start: {
          line: 47,
          column: 29
        },
        end: {
          line: 59,
          column: 1
        }
      },
      "16": {
        start: {
          line: 61,
          column: 22
        },
        end: {
          line: 61,
          column: 87
        }
      },
      "17": {
        start: {
          line: 63,
          column: 28
        },
        end: {
          line: 63,
          column: 91
        }
      },
      "18": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "19": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 45
        }
      },
      "20": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 31
        }
      },
      "21": {
        start: {
          line: 68,
          column: 15
        },
        end: {
          line: 68,
          column: 34
        }
      },
      "22": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "23": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 43
        }
      },
      "24": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "25": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 160,
          column: 5
        }
      },
      "26": {
        start: {
          line: 80,
          column: 25
        },
        end: {
          line: 80,
          column: 100
        }
      },
      "27": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 82,
          column: 78
        }
      },
      "28": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "29": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 49
        }
      },
      "30": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "31": {
        start: {
          line: 91,
          column: 25
        },
        end: {
          line: 134,
          column: 51
        }
      },
      "32": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 133,
          column: 81
        }
      },
      "33": {
        start: {
          line: 94,
          column: 37
        },
        end: {
          line: 108,
          column: 18
        }
      },
      "34": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 111,
          column: 17
        }
      },
      "35": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 32
        }
      },
      "36": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 132,
          column: 18
        }
      },
      "37": {
        start: {
          line: 123,
          column: 67
        },
        end: {
          line: 131,
          column: 25
        }
      },
      "38": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "39": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 46
        }
      },
      "40": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 142,
          column: 15
        }
      },
      "41": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 74
        }
      },
      "42": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 46
        }
      },
      "43": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "44": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 63
        }
      },
      "45": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 44
        }
      },
      "46": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 159,
          column: 11
        }
      },
      "47": {
        start: {
          line: 163,
          column: 22
        },
        end: {
          line: 163,
          column: 89
        }
      },
      "48": {
        start: {
          line: 165,
          column: 28
        },
        end: {
          line: 165,
          column: 95
        }
      },
      "49": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 169,
          column: 5
        }
      },
      "50": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 45
        }
      },
      "51": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 31
        }
      },
      "52": {
        start: {
          line: 170,
          column: 15
        },
        end: {
          line: 170,
          column: 34
        }
      },
      "53": {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 179,
          column: 5
        }
      },
      "54": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 43
        }
      },
      "55": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "56": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 386,
          column: 5
        }
      },
      "57": {
        start: {
          line: 181,
          column: 22
        },
        end: {
          line: 181,
          column: 38
        }
      },
      "58": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 182,
          column: 32
        }
      },
      "59": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "60": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 51
        }
      },
      "61": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 193,
          column: 15
        }
      },
      "62": {
        start: {
          line: 195,
          column: 23
        },
        end: {
          line: 356,
          column: 48
        }
      },
      "63": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 355,
          column: 14
        }
      },
      "64": {
        start: {
          line: 198,
          column: 43
        },
        end: {
          line: 198,
          column: 52
        }
      },
      "65": {
        start: {
          line: 200,
          column: 33
        },
        end: {
          line: 211,
          column: 18
        }
      },
      "66": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 214,
          column: 17
        }
      },
      "67": {
        start: {
          line: 213,
          column: 20
        },
        end: {
          line: 213,
          column: 58
        }
      },
      "68": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 217,
          column: 17
        }
      },
      "69": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 216,
          column: 97
        }
      },
      "70": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 341,
          column: 17
        }
      },
      "71": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 245,
          column: 21
        }
      },
      "72": {
        start: {
          line: 222,
          column: 48
        },
        end: {
          line: 227,
          column: 26
        }
      },
      "73": {
        start: {
          line: 228,
          column: 24
        },
        end: {
          line: 230,
          column: 25
        }
      },
      "74": {
        start: {
          line: 229,
          column: 28
        },
        end: {
          line: 229,
          column: 118
        }
      },
      "75": {
        start: {
          line: 232,
          column: 52
        },
        end: {
          line: 232,
          column: 89
        }
      },
      "76": {
        start: {
          line: 234,
          column: 24
        },
        end: {
          line: 242,
          column: 27
        }
      },
      "77": {
        start: {
          line: 244,
          column: 24
        },
        end: {
          line: 244,
          column: 63
        }
      },
      "78": {
        start: {
          line: 247,
          column: 45
        },
        end: {
          line: 247,
          column: 47
        }
      },
      "79": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 292,
          column: 21
        }
      },
      "80": {
        start: {
          line: 250,
          column: 48
        },
        end: {
          line: 255,
          column: 26
        }
      },
      "81": {
        start: {
          line: 256,
          column: 52
        },
        end: {
          line: 256,
          column: 90
        }
      },
      "82": {
        start: {
          line: 258,
          column: 46
        },
        end: {
          line: 263,
          column: 26
        }
      },
      "83": {
        start: {
          line: 264,
          column: 24
        },
        end: {
          line: 291,
          column: 25
        }
      },
      "84": {
        start: {
          line: 266,
          column: 28
        },
        end: {
          line: 273,
          column: 31
        }
      },
      "85": {
        start: {
          line: 276,
          column: 56
        },
        end: {
          line: 276,
          column: 78
        }
      },
      "86": {
        start: {
          line: 277,
          column: 52
        },
        end: {
          line: 277,
          column: 87
        }
      },
      "87": {
        start: {
          line: 278,
          column: 53
        },
        end: {
          line: 278,
          column: 66
        }
      },
      "88": {
        start: {
          line: 279,
          column: 54
        },
        end: {
          line: 279,
          column: 91
        }
      },
      "89": {
        start: {
          line: 280,
          column: 55
        },
        end: {
          line: 280,
          column: 93
        }
      },
      "90": {
        start: {
          line: 281,
          column: 53
        },
        end: {
          line: 281,
          column: 91
        }
      },
      "91": {
        start: {
          line: 282,
          column: 54
        },
        end: {
          line: 282,
          column: 55
        }
      },
      "92": {
        start: {
          line: 283,
          column: 28
        },
        end: {
          line: 285,
          column: 29
        }
      },
      "93": {
        start: {
          line: 284,
          column: 32
        },
        end: {
          line: 284,
          column: 114
        }
      },
      "94": {
        start: {
          line: 286,
          column: 28
        },
        end: {
          line: 290,
          column: 31
        }
      },
      "95": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 308,
          column: 21
        }
      },
      "96": {
        start: {
          line: 295,
          column: 24
        },
        end: {
          line: 307,
          column: 33
        }
      },
      "97": {
        start: {
          line: 295,
          column: 73
        },
        end: {
          line: 307,
          column: 30
        }
      },
      "98": {
        start: {
          line: 310,
          column: 39
        },
        end: {
          line: 331,
          column: 23
        }
      },
      "99": {
        start: {
          line: 311,
          column: 58
        },
        end: {
          line: 318,
          column: 26
        }
      },
      "100": {
        start: {
          line: 319,
          column: 24
        },
        end: {
          line: 329,
          column: 25
        }
      },
      "101": {
        start: {
          line: 320,
          column: 50
        },
        end: {
          line: 320,
          column: 117
        }
      },
      "102": {
        start: {
          line: 320,
          column: 95
        },
        end: {
          line: 320,
          column: 113
        }
      },
      "103": {
        start: {
          line: 321,
          column: 47
        },
        end: {
          line: 323,
          column: 33
        }
      },
      "104": {
        start: {
          line: 322,
          column: 32
        },
        end: {
          line: 322,
          column: 88
        }
      },
      "105": {
        start: {
          line: 324,
          column: 46
        },
        end: {
          line: 324,
          column: 96
        }
      },
      "106": {
        start: {
          line: 325,
          column: 28
        },
        end: {
          line: 328,
          column: 30
        }
      },
      "107": {
        start: {
          line: 330,
          column: 24
        },
        end: {
          line: 330,
          column: 36
        }
      },
      "108": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 340,
          column: 29
        }
      },
      "109": {
        start: {
          line: 333,
          column: 66
        },
        end: {
          line: 333,
          column: 81
        }
      },
      "110": {
        start: {
          line: 333,
          column: 97
        },
        end: {
          line: 340,
          column: 26
        }
      },
      "111": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 351,
          column: 19
        }
      },
      "112": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "113": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 50
        }
      },
      "114": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 364,
          column: 15
        }
      },
      "115": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 370,
          column: 11
        }
      },
      "116": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 28
        }
      },
      "117": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 376,
          column: 11
        }
      },
      "118": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 84
        }
      },
      "119": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 379,
          column: 45
        }
      },
      "120": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 385,
          column: 11
        }
      },
      "121": {
        start: {
          line: 389,
          column: 22
        },
        end: {
          line: 389,
          column: 87
        }
      },
      "122": {
        start: {
          line: 391,
          column: 28
        },
        end: {
          line: 391,
          column: 95
        }
      },
      "123": {
        start: {
          line: 392,
          column: 4
        },
        end: {
          line: 395,
          column: 5
        }
      },
      "124": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 45
        }
      },
      "125": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 31
        }
      },
      "126": {
        start: {
          line: 396,
          column: 15
        },
        end: {
          line: 396,
          column: 34
        }
      },
      "127": {
        start: {
          line: 397,
          column: 4
        },
        end: {
          line: 405,
          column: 5
        }
      },
      "128": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 43
        }
      },
      "129": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 404,
          column: 11
        }
      },
      "130": {
        start: {
          line: 406,
          column: 4
        },
        end: {
          line: 567,
          column: 5
        }
      },
      "131": {
        start: {
          line: 407,
          column: 22
        },
        end: {
          line: 407,
          column: 38
        }
      },
      "132": {
        start: {
          line: 408,
          column: 59
        },
        end: {
          line: 408,
          column: 64
        }
      },
      "133": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "134": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 50
        }
      },
      "135": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 417,
          column: 15
        }
      },
      "136": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "137": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 46
        }
      },
      "138": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 426,
          column: 15
        }
      },
      "139": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "140": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 45
        }
      },
      "141": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 435,
          column: 15
        }
      },
      "142": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 448,
          column: 9
        }
      },
      "143": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 447,
          column: 13
        }
      },
      "144": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 53
        }
      },
      "145": {
        start: {
          line: 441,
          column: 16
        },
        end: {
          line: 446,
          column: 19
        }
      },
      "146": {
        start: {
          line: 449,
          column: 23
        },
        end: {
          line: 535,
          column: 45
        }
      },
      "147": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 534,
          column: 14
        }
      },
      "148": {
        start: {
          line: 452,
          column: 41
        },
        end: {
          line: 456,
          column: 18
        }
      },
      "149": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 459,
          column: 17
        }
      },
      "150": {
        start: {
          line: 458,
          column: 20
        },
        end: {
          line: 458,
          column: 58
        }
      },
      "151": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 462,
          column: 17
        }
      },
      "152": {
        start: {
          line: 461,
          column: 20
        },
        end: {
          line: 461,
          column: 76
        }
      },
      "153": {
        start: {
          line: 464,
          column: 35
        },
        end: {
          line: 468,
          column: 18
        }
      },
      "154": {
        start: {
          line: 469,
          column: 40
        },
        end: {
          line: 473,
          column: 18
        }
      },
      "155": {
        start: {
          line: 474,
          column: 16
        },
        end: {
          line: 476,
          column: 17
        }
      },
      "156": {
        start: {
          line: 475,
          column: 20
        },
        end: {
          line: 475,
          column: 62
        }
      },
      "157": {
        start: {
          line: 478,
          column: 16
        },
        end: {
          line: 503,
          column: 17
        }
      },
      "158": {
        start: {
          line: 479,
          column: 38
        },
        end: {
          line: 484,
          column: 22
        }
      },
      "159": {
        start: {
          line: 485,
          column: 20
        },
        end: {
          line: 493,
          column: 21
        }
      },
      "160": {
        start: {
          line: 486,
          column: 40
        },
        end: {
          line: 490,
          column: 26
        }
      },
      "161": {
        start: {
          line: 491,
          column: 44
        },
        end: {
          line: 491,
          column: 99
        }
      },
      "162": {
        start: {
          line: 492,
          column: 24
        },
        end: {
          line: 492,
          column: 93
        }
      },
      "163": {
        start: {
          line: 494,
          column: 20
        },
        end: {
          line: 502,
          column: 21
        }
      },
      "164": {
        start: {
          line: 495,
          column: 40
        },
        end: {
          line: 499,
          column: 26
        }
      },
      "165": {
        start: {
          line: 500,
          column: 44
        },
        end: {
          line: 500,
          column: 99
        }
      },
      "166": {
        start: {
          line: 501,
          column: 24
        },
        end: {
          line: 501,
          column: 146
        }
      },
      "167": {
        start: {
          line: 505,
          column: 40
        },
        end: {
          line: 514,
          column: 18
        }
      },
      "168": {
        start: {
          line: 516,
          column: 16
        },
        end: {
          line: 520,
          column: 19
        }
      },
      "169": {
        start: {
          line: 522,
          column: 42
        },
        end: {
          line: 526,
          column: 23
        }
      },
      "170": {
        start: {
          line: 522,
          column: 61
        },
        end: {
          line: 526,
          column: 21
        }
      },
      "171": {
        start: {
          line: 527,
          column: 16
        },
        end: {
          line: 529,
          column: 19
        }
      },
      "172": {
        start: {
          line: 530,
          column: 16
        },
        end: {
          line: 530,
          column: 39
        }
      },
      "173": {
        start: {
          line: 536,
          column: 8
        },
        end: {
          line: 544,
          column: 9
        }
      },
      "174": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 537,
          column: 50
        }
      },
      "175": {
        start: {
          line: 538,
          column: 12
        },
        end: {
          line: 543,
          column: 15
        }
      },
      "176": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 549,
          column: 11
        }
      },
      "177": {
        start: {
          line: 550,
          column: 8
        },
        end: {
          line: 550,
          column: 28
        }
      },
      "178": {
        start: {
          line: 551,
          column: 8
        },
        end: {
          line: 557,
          column: 11
        }
      },
      "179": {
        start: {
          line: 559,
          column: 8
        },
        end: {
          line: 559,
          column: 63
        }
      },
      "180": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 560,
          column: 45
        }
      },
      "181": {
        start: {
          line: 561,
          column: 8
        },
        end: {
          line: 566,
          column: 11
        }
      },
      "182": {
        start: {
          line: 570,
          column: 22
        },
        end: {
          line: 570,
          column: 87
        }
      },
      "183": {
        start: {
          line: 572,
          column: 28
        },
        end: {
          line: 572,
          column: 95
        }
      },
      "184": {
        start: {
          line: 573,
          column: 4
        },
        end: {
          line: 576,
          column: 5
        }
      },
      "185": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 574,
          column: 45
        }
      },
      "186": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 575,
          column: 31
        }
      },
      "187": {
        start: {
          line: 577,
          column: 15
        },
        end: {
          line: 577,
          column: 34
        }
      },
      "188": {
        start: {
          line: 578,
          column: 4
        },
        end: {
          line: 586,
          column: 5
        }
      },
      "189": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 579,
          column: 43
        }
      },
      "190": {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 585,
          column: 11
        }
      },
      "191": {
        start: {
          line: 587,
          column: 4
        },
        end: {
          line: 646,
          column: 5
        }
      },
      "192": {
        start: {
          line: 588,
          column: 23
        },
        end: {
          line: 617,
          column: 45
        }
      },
      "193": {
        start: {
          line: 589,
          column: 12
        },
        end: {
          line: 616,
          column: 14
        }
      },
      "194": {
        start: {
          line: 591,
          column: 33
        },
        end: {
          line: 595,
          column: 18
        }
      },
      "195": {
        start: {
          line: 596,
          column: 16
        },
        end: {
          line: 598,
          column: 17
        }
      },
      "196": {
        start: {
          line: 597,
          column: 20
        },
        end: {
          line: 597,
          column: 58
        }
      },
      "197": {
        start: {
          line: 599,
          column: 16
        },
        end: {
          line: 601,
          column: 17
        }
      },
      "198": {
        start: {
          line: 600,
          column: 20
        },
        end: {
          line: 600,
          column: 77
        }
      },
      "199": {
        start: {
          line: 603,
          column: 16
        },
        end: {
          line: 607,
          column: 19
        }
      },
      "200": {
        start: {
          line: 608,
          column: 16
        },
        end: {
          line: 612,
          column: 19
        }
      },
      "201": {
        start: {
          line: 618,
          column: 8
        },
        end: {
          line: 626,
          column: 9
        }
      },
      "202": {
        start: {
          line: 619,
          column: 12
        },
        end: {
          line: 619,
          column: 50
        }
      },
      "203": {
        start: {
          line: 620,
          column: 12
        },
        end: {
          line: 625,
          column: 15
        }
      },
      "204": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 631,
          column: 11
        }
      },
      "205": {
        start: {
          line: 632,
          column: 8
        },
        end: {
          line: 632,
          column: 28
        }
      },
      "206": {
        start: {
          line: 633,
          column: 8
        },
        end: {
          line: 636,
          column: 11
        }
      },
      "207": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 638,
          column: 63
        }
      },
      "208": {
        start: {
          line: 639,
          column: 8
        },
        end: {
          line: 639,
          column: 45
        }
      },
      "209": {
        start: {
          line: 640,
          column: 8
        },
        end: {
          line: 645,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 12
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 10
          }
        },
        loc: {
          start: {
            line: 21,
            column: 20
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "getDefaultTransfer",
        decl: {
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 32,
            column: 27
          }
        },
        loc: {
          start: {
            line: 32,
            column: 32
          },
          end: {
            line: 45,
            column: 1
          }
        },
        line: 32
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 60,
            column: 15
          },
          end: {
            line: 60,
            column: 18
          }
        },
        loc: {
          start: {
            line: 60,
            column: 36
          },
          end: {
            line: 161,
            column: 1
          }
        },
        line: 60
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 91,
            column: 77
          },
          end: {
            line: 91,
            column: 78
          }
        },
        loc: {
          start: {
            line: 91,
            column: 87
          },
          end: {
            line: 134,
            column: 9
          }
        },
        line: 91
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 92,
            column: 48
          },
          end: {
            line: 92,
            column: 49
          }
        },
        loc: {
          start: {
            line: 92,
            column: 58
          },
          end: {
            line: 133,
            column: 13
          }
        },
        line: 92
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 123,
            column: 58
          },
          end: {
            line: 123,
            column: 59
          }
        },
        loc: {
          start: {
            line: 123,
            column: 67
          },
          end: {
            line: 131,
            column: 25
          }
        },
        line: 123
      },
      "10": {
        name: "PATCH",
        decl: {
          start: {
            line: 162,
            column: 15
          },
          end: {
            line: 162,
            column: 20
          }
        },
        loc: {
          start: {
            line: 162,
            column: 38
          },
          end: {
            line: 387,
            column: 1
          }
        },
        line: 162
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 195,
            column: 52
          },
          end: {
            line: 195,
            column: 53
          }
        },
        loc: {
          start: {
            line: 195,
            column: 62
          },
          end: {
            line: 356,
            column: 9
          }
        },
        line: 195
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 196,
            column: 53
          },
          end: {
            line: 196,
            column: 54
          }
        },
        loc: {
          start: {
            line: 196,
            column: 65
          },
          end: {
            line: 352,
            column: 13
          }
        },
        line: 196
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 295,
            column: 63
          },
          end: {
            line: 295,
            column: 64
          }
        },
        loc: {
          start: {
            line: 295,
            column: 73
          },
          end: {
            line: 307,
            column: 30
          }
        },
        line: 295
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 310,
            column: 92
          },
          end: {
            line: 310,
            column: 93
          }
        },
        loc: {
          start: {
            line: 310,
            column: 111
          },
          end: {
            line: 331,
            column: 21
          }
        },
        line: 310
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 320,
            column: 83
          },
          end: {
            line: 320,
            column: 84
          }
        },
        loc: {
          start: {
            line: 320,
            column: 95
          },
          end: {
            line: 320,
            column: 113
          }
        },
        line: 320
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 321,
            column: 80
          },
          end: {
            line: 321,
            column: 81
          }
        },
        loc: {
          start: {
            line: 321,
            column: 92
          },
          end: {
            line: 323,
            column: 29
          }
        },
        line: 321
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 333,
            column: 56
          },
          end: {
            line: 333,
            column: 57
          }
        },
        loc: {
          start: {
            line: 333,
            column: 66
          },
          end: {
            line: 333,
            column: 81
          }
        },
        line: 333
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 333,
            column: 87
          },
          end: {
            line: 333,
            column: 88
          }
        },
        loc: {
          start: {
            line: 333,
            column: 97
          },
          end: {
            line: 340,
            column: 26
          }
        },
        line: 333
      },
      "19": {
        name: "PUT",
        decl: {
          start: {
            line: 388,
            column: 15
          },
          end: {
            line: 388,
            column: 18
          }
        },
        loc: {
          start: {
            line: 388,
            column: 36
          },
          end: {
            line: 568,
            column: 1
          }
        },
        line: 388
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 449,
            column: 52
          },
          end: {
            line: 449,
            column: 53
          }
        },
        loc: {
          start: {
            line: 449,
            column: 62
          },
          end: {
            line: 535,
            column: 9
          }
        },
        line: 449
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 450,
            column: 53
          },
          end: {
            line: 450,
            column: 54
          }
        },
        loc: {
          start: {
            line: 450,
            column: 65
          },
          end: {
            line: 531,
            column: 13
          }
        },
        line: 450
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 522,
            column: 52
          },
          end: {
            line: 522,
            column: 53
          }
        },
        loc: {
          start: {
            line: 522,
            column: 61
          },
          end: {
            line: 526,
            column: 21
          }
        },
        line: 522
      },
      "23": {
        name: "DELETE",
        decl: {
          start: {
            line: 569,
            column: 15
          },
          end: {
            line: 569,
            column: 21
          }
        },
        loc: {
          start: {
            line: 569,
            column: 39
          },
          end: {
            line: 647,
            column: 1
          }
        },
        line: 569
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 588,
            column: 52
          },
          end: {
            line: 588,
            column: 53
          }
        },
        loc: {
          start: {
            line: 588,
            column: 62
          },
          end: {
            line: 617,
            column: 9
          }
        },
        line: 588
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 589,
            column: 53
          },
          end: {
            line: 589,
            column: 54
          }
        },
        loc: {
          start: {
            line: 589,
            column: 65
          },
          end: {
            line: 613,
            column: 13
          }
        },
        line: 589
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "1": {
        loc: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "2": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "3": {
        loc: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "4": {
        loc: {
          start: {
            line: 127,
            column: 33
          },
          end: {
            line: 127,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 33
          },
          end: {
            line: 127,
            column: 49
          }
        }, {
          start: {
            line: 127,
            column: 53
          },
          end: {
            line: 127,
            column: 55
          }
        }],
        line: 127
      },
      "5": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "6": {
        loc: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "7": {
        loc: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "8": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "9": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 186,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 19
          }
        }, {
          start: {
            line: 183,
            column: 23
          },
          end: {
            line: 186,
            column: 26
          }
        }],
        line: 183
      },
      "10": {
        loc: {
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "11": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 217,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 217,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "12": {
        loc: {
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 341,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 341,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "13": {
        loc: {
          start: {
            line: 228,
            column: 24
          },
          end: {
            line: 230,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 24
          },
          end: {
            line: 230,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "14": {
        loc: {
          start: {
            line: 228,
            column: 28
          },
          end: {
            line: 228,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 28
          },
          end: {
            line: 228,
            column: 44
          }
        }, {
          start: {
            line: 228,
            column: 48
          },
          end: {
            line: 228,
            column: 88
          }
        }],
        line: 228
      },
      "15": {
        loc: {
          start: {
            line: 232,
            column: 52
          },
          end: {
            line: 232,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 52
          },
          end: {
            line: 232,
            column: 84
          }
        }, {
          start: {
            line: 232,
            column: 88
          },
          end: {
            line: 232,
            column: 89
          }
        }],
        line: 232
      },
      "16": {
        loc: {
          start: {
            line: 256,
            column: 52
          },
          end: {
            line: 256,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 52
          },
          end: {
            line: 256,
            column: 85
          }
        }, {
          start: {
            line: 256,
            column: 89
          },
          end: {
            line: 256,
            column: 90
          }
        }],
        line: 256
      },
      "17": {
        loc: {
          start: {
            line: 264,
            column: 24
          },
          end: {
            line: 291,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 24
          },
          end: {
            line: 291,
            column: 25
          }
        }, {
          start: {
            line: 274,
            column: 31
          },
          end: {
            line: 291,
            column: 25
          }
        }],
        line: 264
      },
      "18": {
        loc: {
          start: {
            line: 277,
            column: 52
          },
          end: {
            line: 277,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 52
          },
          end: {
            line: 277,
            column: 82
          }
        }, {
          start: {
            line: 277,
            column: 86
          },
          end: {
            line: 277,
            column: 87
          }
        }],
        line: 277
      },
      "19": {
        loc: {
          start: {
            line: 283,
            column: 28
          },
          end: {
            line: 285,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 28
          },
          end: {
            line: 285,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "20": {
        loc: {
          start: {
            line: 294,
            column: 20
          },
          end: {
            line: 308,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 20
          },
          end: {
            line: 308,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "21": {
        loc: {
          start: {
            line: 319,
            column: 24
          },
          end: {
            line: 329,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 24
          },
          end: {
            line: 329,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "22": {
        loc: {
          start: {
            line: 322,
            column: 61
          },
          end: {
            line: 322,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 61
          },
          end: {
            line: 322,
            column: 81
          }
        }, {
          start: {
            line: 322,
            column: 85
          },
          end: {
            line: 322,
            column: 86
          }
        }],
        line: 322
      },
      "23": {
        loc: {
          start: {
            line: 324,
            column: 46
          },
          end: {
            line: 324,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 324,
            column: 66
          },
          end: {
            line: 324,
            column: 92
          }
        }, {
          start: {
            line: 324,
            column: 95
          },
          end: {
            line: 324,
            column: 96
          }
        }],
        line: 324
      },
      "24": {
        loc: {
          start: {
            line: 348,
            column: 32
          },
          end: {
            line: 348,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 348,
            column: 56
          },
          end: {
            line: 348,
            column: 67
          }
        }, {
          start: {
            line: 348,
            column: 70
          },
          end: {
            line: 348,
            column: 81
          }
        }],
        line: 348
      },
      "25": {
        loc: {
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 365,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 365,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "26": {
        loc: {
          start: {
            line: 378,
            column: 31
          },
          end: {
            line: 378,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 31
          },
          end: {
            line: 378,
            column: 43
          }
        }, {
          start: {
            line: 378,
            column: 47
          },
          end: {
            line: 378,
            column: 57
          }
        }],
        line: 378
      },
      "27": {
        loc: {
          start: {
            line: 382,
            column: 19
          },
          end: {
            line: 382,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 382,
            column: 44
          },
          end: {
            line: 382,
            column: 57
          }
        }, {
          start: {
            line: 382,
            column: 60
          },
          end: {
            line: 382,
            column: 87
          }
        }],
        line: 382
      },
      "28": {
        loc: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "29": {
        loc: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 405,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 405,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "30": {
        loc: {
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "31": {
        loc: {
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 410,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 410,
            column: 25
          }
        }, {
          start: {
            line: 410,
            column: 29
          },
          end: {
            line: 410,
            column: 47
          }
        }, {
          start: {
            line: 410,
            column: 51
          },
          end: {
            line: 410,
            column: 57
          }
        }, {
          start: {
            line: 410,
            column: 61
          },
          end: {
            line: 410,
            column: 82
          }
        }],
        line: 410
      },
      "32": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "33": {
        loc: {
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 428
      },
      "34": {
        loc: {
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "35": {
        loc: {
          start: {
            line: 439,
            column: 16
          },
          end: {
            line: 439,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 439,
            column: 16
          },
          end: {
            line: 439,
            column: 31
          }
        }, {
          start: {
            line: 439,
            column: 35
          },
          end: {
            line: 439,
            column: 49
          }
        }, {
          start: {
            line: 439,
            column: 53
          },
          end: {
            line: 439,
            column: 71
          }
        }],
        line: 439
      },
      "36": {
        loc: {
          start: {
            line: 457,
            column: 16
          },
          end: {
            line: 459,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 16
          },
          end: {
            line: 459,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "37": {
        loc: {
          start: {
            line: 460,
            column: 16
          },
          end: {
            line: 462,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 460,
            column: 16
          },
          end: {
            line: 462,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 460
      },
      "38": {
        loc: {
          start: {
            line: 474,
            column: 16
          },
          end: {
            line: 476,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 16
          },
          end: {
            line: 476,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "39": {
        loc: {
          start: {
            line: 474,
            column: 20
          },
          end: {
            line: 474,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 474,
            column: 20
          },
          end: {
            line: 474,
            column: 31
          }
        }, {
          start: {
            line: 474,
            column: 35
          },
          end: {
            line: 474,
            column: 51
          }
        }],
        line: 474
      },
      "40": {
        loc: {
          start: {
            line: 485,
            column: 20
          },
          end: {
            line: 493,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 20
          },
          end: {
            line: 493,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "41": {
        loc: {
          start: {
            line: 491,
            column: 44
          },
          end: {
            line: 491,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 491,
            column: 54
          },
          end: {
            line: 491,
            column: 66
          }
        }, {
          start: {
            line: 491,
            column: 69
          },
          end: {
            line: 491,
            column: 99
          }
        }],
        line: 491
      },
      "42": {
        loc: {
          start: {
            line: 494,
            column: 20
          },
          end: {
            line: 502,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 494,
            column: 20
          },
          end: {
            line: 502,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 494
      },
      "43": {
        loc: {
          start: {
            line: 500,
            column: 44
          },
          end: {
            line: 500,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 500,
            column: 54
          },
          end: {
            line: 500,
            column: 66
          }
        }, {
          start: {
            line: 500,
            column: 69
          },
          end: {
            line: 500,
            column: 99
          }
        }],
        line: 500
      },
      "44": {
        loc: {
          start: {
            line: 536,
            column: 8
          },
          end: {
            line: 544,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 536,
            column: 8
          },
          end: {
            line: 544,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 536
      },
      "45": {
        loc: {
          start: {
            line: 563,
            column: 19
          },
          end: {
            line: 563,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 563,
            column: 44
          },
          end: {
            line: 563,
            column: 57
          }
        }, {
          start: {
            line: 563,
            column: 60
          },
          end: {
            line: 563,
            column: 87
          }
        }],
        line: 563
      },
      "46": {
        loc: {
          start: {
            line: 573,
            column: 4
          },
          end: {
            line: 576,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 573,
            column: 4
          },
          end: {
            line: 576,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 573
      },
      "47": {
        loc: {
          start: {
            line: 578,
            column: 4
          },
          end: {
            line: 586,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 578,
            column: 4
          },
          end: {
            line: 586,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 578
      },
      "48": {
        loc: {
          start: {
            line: 596,
            column: 16
          },
          end: {
            line: 598,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 596,
            column: 16
          },
          end: {
            line: 598,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 596
      },
      "49": {
        loc: {
          start: {
            line: 599,
            column: 16
          },
          end: {
            line: 601,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 599,
            column: 16
          },
          end: {
            line: 601,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 599
      },
      "50": {
        loc: {
          start: {
            line: 618,
            column: 8
          },
          end: {
            line: 626,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 618,
            column: 8
          },
          end: {
            line: 626,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 618
      },
      "51": {
        loc: {
          start: {
            line: 642,
            column: 19
          },
          end: {
            line: 642,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 642,
            column: 44
          },
          end: {
            line: 642,
            column: 57
          }
        }, {
          start: {
            line: 642,
            column: 60
          },
          end: {
            line: 642,
            column: 87
          }
        }],
        line: 642
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0, 0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/transfers/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { requirePermission } from '@/lib/utils/middleware';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { transferCacheService, TRANSFER_CACHE_CONFIG } from '@/lib/transferCache';\nimport { trackTransferOperation } from '@/lib/transferPerformanceMonitor';\nimport { deduplicateRequest } from '@/lib/request-deduplication';\n\n// Default fallback data for a transfer\nfunction getDefaultTransfer(id: number) {\n    return {\n        id,\n        status: 'pending',\n        created_at: new Date().toISOString(),\n        completed_at: null,\n        source_shop_id: 0,\n        destination_shop_id: 0,\n        source_shop_name: 'Unknown Shop',\n        destination_shop_name: 'Unknown Shop',\n        initiated_by: 'Unknown User',\n        items: []\n    };\n}\n\n// Default fallback data for transfers list\nconst defaultTransfersData = [\n    {\n        id: 1,\n        status: 'pending',\n        created_at: new Date().toISOString(),\n        completed_at: null,\n        source_shop_name: 'Main Store',\n        destination_shop_name: 'Branch Store',\n        initiated_by: 'System',\n        item_count: 0,\n        total_items: 0\n    }\n];\n\n// GET: Fetch a specific inventory transfer by ID\nexport async function GET(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const operation = trackTransferOperation('detail');\n\n    // Check for inventory:view permission\n    const permissionError = await requirePermission('inventory:view')(req);\n    if (permissionError) {\n        operation.end(false, 'unauthorized');\n        return permissionError;\n    }\n\n    const id = parseInt(params.id);\n    if (isNaN(id)) {\n        operation.end(false, 'invalid_id');\n        return NextResponse.json({\n            success: false,\n            error: 'Invalid transfer ID'\n        }, { status: 400 });\n    }\n\n    try {\n        // Generate cache key\n        const cacheKey = `${TRANSFER_CACHE_CONFIG.KEYS.TRANSFER_DETAIL}:${params.id}`;\n\n        // Try to get from cache first\n        const cached = await transferCacheService.get(cacheKey);\n        if (cached) {\n            operation.end(true, undefined, true);\n            return NextResponse.json({\n                success: true,\n                data: cached\n            });\n        }\n\n        // Use request deduplication\n        const transfer = await deduplicateRequest(\n            async () => {\n                return await safeQuery(\n                    async () => {\n                        // Get transfer details with related data\n                        const transferData = await prisma.inventoryTransfer.findUnique({\n                            where: { id },\n                            include: {\n                                fromShop: true,\n                                toShop: true,\n                                fromUser: true,\n                                transferItems: {\n                                    include: {\n                                        product: true\n                                    }\n                                }\n                            }\n                        });\n\n                        if (!transferData) {\n                            return null;\n                        }\n\n                        // Format the transfer data to match the expected format\n                        return {\n                            id: transferData.id,\n                            status: transferData.status,\n                            created_at: transferData.createdAt.toISOString(),\n                            completed_at: null, // This field isn't in the Prisma schema\n                            source_shop_id: transferData.fromShopId,\n                            destination_shop_id: transferData.toShopId,\n                            source_shop_name: transferData.fromShop.name,\n                            destination_shop_name: transferData.toShop.name,\n                            initiated_by: transferData.fromUser.name,\n                            items: transferData.transferItems.map(item => ({\n                                id: item.id,\n                                product_id: item.productId,\n                                product_name: item.product.name,\n                                sku: item.product.sku || '',\n                                quantity: item.quantity,\n                                notes: null, // This field isn't in the Prisma schema\n                                price: item.product.price.toString()\n                            }))\n                        };\n                    },\n                    getDefaultTransfer(id),\n                    `Failed to fetch transfer with ID ${id}`\n                );\n            },\n            `/api/inventory/transfers/${params.id}`\n        );\n\n        if (!transfer) {\n            operation.end(false, 'not_found');\n            return NextResponse.json({\n                success: false,\n                error: 'Transfer not found'\n            }, { status: 404 });\n        }\n\n        // Cache the result\n        await transferCacheService.set(cacheKey, transfer);\n\n        operation.end(true, undefined, false);\n        return NextResponse.json({\n            success: true,\n            data: transfer\n        });\n    } catch (error) {\n        console.error(`Error fetching transfer ${id}:`, error);\n        operation.end(false, 'fetch_error');\n        return NextResponse.json({\n            success: false,\n            error: 'Failed to fetch transfer'\n        }, { status: 500 });\n    }\n}\n\n// PATCH: Update a transfer (complete, cancel)\nexport async function PATCH(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const operation = trackTransferOperation('complete');\n\n    // Check for inventory:transfer permission\n    const permissionError = await requirePermission('inventory:transfer')(req);\n    if (permissionError) {\n        operation.end(false, 'unauthorized');\n        return permissionError;\n    }\n\n    const id = parseInt(params.id);\n    if (isNaN(id)) {\n        operation.end(false, 'invalid_id');\n        return NextResponse.json({\n            success: false,\n            error: 'Invalid transfer ID'\n        }, { status: 400 });\n    }\n\n    try {\n        const body = await req.json();\n        const { action } = body;\n\n        if (!action || !['complete', 'cancel'].includes(action)) {\n            operation.end(false, 'invalid_action');\n            return NextResponse.json({\n                success: false,\n                error: 'Invalid action. Must be \"complete\" or \"cancel\"'\n            }, { status: 400 });\n        }\n\n        const result = await safeQuery(\n            async () => {\n                return await prisma.$transaction(\n                    async (tx) => {\n                        // Declare affectedProductIds before using it\n                        const affectedProductIds = new Set<number>();\n\n                        // Get transfer with items\n                        const transfer = await tx.inventoryTransfer.findUnique({\n                            where: { id },\n                            include: {\n                                transferItems: {\n                                    include: {\n                                        product: true\n                                    }\n                                }\n                            }\n                        });\n\n                        if (!transfer) {\n                            throw new Error('Transfer not found');\n                        }\n\n                        if (transfer.status !== 'pending') {\n                            throw new Error(`Cannot ${action} a transfer that is not in pending status`);\n                        }\n\n                        if (action === 'complete') {\n\n                            // Process each transfer item for completion\n                            for (const item of transfer.transferItems) {\n                                // Check source inventory\n                                const sourceInventory = await tx.inventoryItem.findFirst({\n                                    where: {\n                                        shopId: transfer.fromShopId,\n                                        productId: item.productId\n                                    }\n                                });\n\n                                if (!sourceInventory || sourceInventory.quantity < item.quantity) {\n                                    throw new Error(`Insufficient inventory for product ID ${item.productId} in source shop`);\n                                }\n\n                                // Get the shop-specific cost from source inventory\n                                const transferCostPerUnit = sourceInventory.shopSpecificCost || 0;\n\n                                // Update source inventory (decrease quantity)\n                                await tx.inventoryItem.update({\n                                    where: { id: sourceInventory.id },\n                                    data: {\n                                        quantity: sourceInventory.quantity - item.quantity,\n                                        updatedAt: new Date()\n                                    }\n                                });\n\n                                // Collect items for batch processing\n                                affectedProductIds.add(item.productId);\n                            }\n\n                            // Batch process inventory updates\n                            const inventoryUpdates: Array<{\n                                productId: number;\n                                quantity: number;\n                                cost: number;\n                            }> = [];\n\n                            for (const item of transfer.transferItems) {\n                                // Get the shop-specific cost from source inventory\n                                const sourceInventory = await tx.inventoryItem.findFirst({\n                                    where: {\n                                        shopId: transfer.fromShopId,\n                                        productId: item.productId\n                                    }\n                                });\n                                const transferCostPerUnit = sourceInventory?.shopSpecificCost || 0;\n\n                                // Check if destination already has this product\n                                const destInventory = await tx.inventoryItem.findFirst({\n                                    where: {\n                                        shopId: transfer.toShopId,\n                                        productId: item.productId\n                                    }\n                                });\n\n                                if (!destInventory) {\n                                    // Create new inventory item at destination\n                                    await tx.inventoryItem.create({\n                                        data: {\n                                            shopId: transfer.toShopId,\n                                            productId: item.productId,\n                                            quantity: item.quantity,\n                                            shopSpecificCost: transferCostPerUnit\n                                        }\n                                    });\n                                } else {\n                                    // Calculate new WAC for destination shop using weighted average\n                                    const currentDestQuantity = destInventory.quantity;\n                                    const currentDestCost = destInventory.shopSpecificCost || 0;\n                                    const transferQuantity = item.quantity;\n\n                                    const currentTotalValue = currentDestQuantity * currentDestCost;\n                                    const transferTotalValue = transferQuantity * transferCostPerUnit;\n                                    const newTotalQuantity = currentDestQuantity + transferQuantity;\n\n                                    let newShopSpecificCost = 0;\n                                    if (newTotalQuantity > 0) {\n                                        newShopSpecificCost = (currentTotalValue + transferTotalValue) / newTotalQuantity;\n                                    }\n\n                                    inventoryUpdates.push({\n                                        productId: item.productId,\n                                        quantity: item.quantity,\n                                        cost: newShopSpecificCost\n                                    });\n                                }\n                            }\n\n                            // Batch update existing inventory items\n                            if (inventoryUpdates.length > 0) {\n                                await Promise.all(\n                                    inventoryUpdates.map(update =>\n                                        tx.inventoryItem.updateMany({\n                                            where: {\n                                                shopId: transfer.toShopId,\n                                                productId: update.productId\n                                            },\n                                            data: {\n                                                quantity: { increment: update.quantity },\n                                                shopSpecificCost: update.cost,\n                                                updatedAt: new Date()\n                                            }\n                                        })\n                                    )\n                                );\n                            }\n\n                            // Batch recalculate global weighted average costs\n                            const wacUpdates = await Promise.all(\n                                Array.from(affectedProductIds).map(async (productId) => {\n                                    const allInventoryAfterTransfer = await tx.inventoryItem.findMany({\n                                        where: {\n                                            productId,\n                                            quantity: { gt: 0 } // Only consider inventories with stock\n                                        }\n                                    });\n\n                                    if (allInventoryAfterTransfer.length > 0) {\n                                        const totalQuantity = allInventoryAfterTransfer.reduce((sum, inv) => sum + inv.quantity, 0);\n                                        const totalValue = allInventoryAfterTransfer.reduce((sum, inv) => {\n                                            return sum + (inv.quantity * (inv.shopSpecificCost || 0));\n                                        }, 0);\n\n                                        const globalWAC = totalQuantity > 0 ? totalValue / totalQuantity : 0;\n                                        return { productId, globalWAC };\n                                    }\n                                    return null;\n                                })\n                            );\n\n                            // Update global WAC for all affected products\n                            await Promise.all(\n                                wacUpdates\n                                    .filter(update => update !== null)\n                                    .map(update =>\n                                        tx.product.update({\n                                            where: { id: update!.productId },\n                                            data: { weightedAverageCost: update!.globalWAC }\n                                        })\n                                    )\n                            );\n                        }\n\n                        // Update transfer status\n                        return await tx.inventoryTransfer.update({\n                            where: { id },\n                            data: {\n                                status: action === 'complete' ? 'completed' : 'cancelled',\n                                updatedAt: new Date()\n                            }\n                        });\n                    },\n                    { timeout: 30000 } // 30-second timeout\n                );\n            },\n            null,\n            `Failed to ${action} transfer`\n        );\n\n        if (!result) {\n            operation.end(false, 'update_failed');\n            return NextResponse.json({\n                success: false,\n                error: `Failed to ${action} transfer`\n            }, { status: 500 });\n        }\n\n        // Invalidate relevant caches\n        await transferCacheService.invalidateTransferCache(params.id, [result.fromShopId, result.toShopId]);\n\n        operation.end(true);\n        return NextResponse.json({\n            success: true,\n            message: `Transfer ${action}d successfully`,\n            data: result\n        });\n    } catch (error) {\n        console.error(`Error ${body?.action || 'updating'} transfer ${id}:`, error);\n        operation.end(false, 'update_error');\n        return NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : `Failed to update transfer`\n        }, { status: 500 });\n    }\n}\n\n// PUT: Update a transfer (only if pending)\nexport async function PUT(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const operation = trackTransferOperation('update');\n\n    // Check for inventory:transfer permission\n    const permissionError = await requirePermission('inventory:transfer')(req);\n    if (permissionError) {\n        operation.end(false, 'unauthorized');\n        return permissionError;\n    }\n\n    const id = parseInt(params.id);\n    if (isNaN(id)) {\n        operation.end(false, 'invalid_id');\n        return NextResponse.json({\n            success: false,\n            error: 'Invalid transfer ID'\n        }, { status: 400 });\n    }\n\n    try {\n        const body = await req.json();\n        const { sourceShopId, destinationShopId, items } = body;\n\n        // Validate input\n        if (!sourceShopId || !destinationShopId || !items || !Array.isArray(items)) {\n            operation.end(false, 'invalid_input');\n            return NextResponse.json({\n                success: false,\n                error: 'Missing required fields'\n            }, { status: 400 });\n        }\n\n        if (sourceShopId === destinationShopId) {\n            operation.end(false, 'same_shop');\n            return NextResponse.json({\n                success: false,\n                error: 'Source and destination shops cannot be the same'\n            }, { status: 400 });\n        }\n\n        if (items.length === 0) {\n            operation.end(false, 'no_items');\n            return NextResponse.json({\n                success: false,\n                error: 'At least one item is required'\n            }, { status: 400 });\n        }\n\n        // Validate items\n        for (const item of items) {\n            if (!item.productId || !item.quantity || item.quantity <= 0) {\n                operation.end(false, 'invalid_item');\n                return NextResponse.json({\n                    success: false,\n                    error: 'Invalid item data'\n                }, { status: 400 });\n            }\n        }\n\n        const result = await safeQuery(\n            async () => {\n                return await prisma.$transaction(\n                    async (tx) => {\n                        // Check if transfer exists and is pending\n                        const existingTransfer = await tx.inventoryTransfer.findUnique({\n                            where: { id }\n                        });\n\n                        if (!existingTransfer) {\n                            throw new Error('Transfer not found');\n                        }\n\n                        if (existingTransfer.status !== 'pending') {\n                            throw new Error('Only pending transfers can be edited');\n                        }\n\n                        // Verify shops exist\n                        const sourceShop = await tx.shop.findUnique({ where: { id: sourceShopId } });\n                        const destinationShop = await tx.shop.findUnique({ where: { id: destinationShopId } });\n\n                        if (!sourceShop || !destinationShop) {\n                            throw new Error('Invalid shop selection');\n                        }\n\n                        // Verify products exist and have sufficient stock\n                        for (const item of items) {\n                            const inventory = await tx.inventoryItem.findFirst({\n                                where: {\n                                    productId: item.productId,\n                                    shopId: sourceShopId\n                                }\n                            });\n\n                            if (!inventory) {\n                                const product = await tx.product.findUnique({ where: { id: item.productId } });\n                                const productName = product ? product.name : `Product ID ${item.productId}`;\n                                throw new Error(`Product \"${productName}\" not found in source shop`);\n                            }\n\n                            if (inventory.quantity < item.quantity) {\n                                const product = await tx.product.findUnique({ where: { id: item.productId } });\n                                const productName = product ? product.name : `Product ID ${item.productId}`;\n                                throw new Error(`Insufficient stock for \"${productName}\". Available: ${inventory.quantity}, Requested: ${item.quantity}`);\n                            }\n                        }\n\n                        // Update transfer\n                        const updatedTransfer = await tx.inventoryTransfer.update({\n                            where: { id },\n                            data: {\n                                fromShopId: sourceShopId,\n                                toShopId: destinationShopId,\n                                updatedAt: new Date()\n                            }\n                        });\n\n                        // Delete existing transfer items\n                        await tx.transferItem.deleteMany({\n                            where: { transferId: id }\n                        });\n\n                        // Insert new transfer items\n                        const transferItemsData = items.map((item: any) => ({\n                            transferId: id,\n                            productId: item.productId,\n                            quantity: item.quantity\n                        }));\n\n                        await tx.transferItem.createMany({\n                            data: transferItemsData\n                        });\n\n                        return updatedTransfer;\n                    },\n                    { timeout: 30000 } // 30-second timeout\n                );\n            },\n            null,\n            'Failed to update transfer'\n        );\n\n        if (!result) {\n            operation.end(false, 'update_failed');\n            return NextResponse.json({\n                success: false,\n                error: 'Failed to update transfer'\n            }, { status: 500 });\n        }\n\n        // Invalidate relevant caches\n        await transferCacheService.invalidateTransferCache(params.id, [result.fromShopId, result.toShopId]);\n\n        operation.end(true);\n        return NextResponse.json({\n            success: true,\n            message: 'Transfer updated successfully',\n            data: { id }\n        });\n    } catch (error) {\n        console.error(`Error updating transfer ${id}:`, error);\n        operation.end(false, 'update_error');\n        return NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to update transfer'\n        }, { status: 500 });\n    }\n}\n\n// DELETE: Delete a transfer (only if pending)\nexport async function DELETE(\n    req: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const operation = trackTransferOperation('cancel');\n\n    // Check for inventory:transfer permission\n    const permissionError = await requirePermission('inventory:transfer')(req);\n    if (permissionError) {\n        operation.end(false, 'unauthorized');\n        return permissionError;\n    }\n\n    const id = parseInt(params.id);\n    if (isNaN(id)) {\n        operation.end(false, 'invalid_id');\n        return NextResponse.json({\n            success: false,\n            error: 'Invalid transfer ID'\n        }, { status: 400 });\n    }\n\n    try {\n        const result = await safeQuery(\n            async () => {\n                return await prisma.$transaction(\n                    async (tx) => {\n                        // Get transfer to check status\n                        const transfer = await tx.inventoryTransfer.findUnique({\n                            where: { id }\n                        });\n\n                        if (!transfer) {\n                            throw new Error('Transfer not found');\n                        }\n\n                        if (transfer.status !== 'pending') {\n                            throw new Error('Only pending transfers can be deleted');\n                        }\n\n                        // Delete transfer items and the transfer itself\n                        await tx.transferItem.deleteMany({\n                            where: { transferId: id }\n                        });\n\n                        return await tx.inventoryTransfer.delete({\n                            where: { id }\n                        });\n                    },\n                    { timeout: 30000 } // 30-second timeout\n                );\n            },\n            null,\n            'Failed to delete transfer'\n        );\n\n        if (!result) {\n            operation.end(false, 'delete_failed');\n            return NextResponse.json({\n                success: false,\n                error: 'Failed to delete transfer'\n            }, { status: 500 });\n        }\n\n        // Invalidate relevant caches\n        await transferCacheService.invalidateTransferCache(params.id, [result.fromShopId, result.toShopId]);\n\n        operation.end(true);\n        return NextResponse.json({\n            success: true,\n            message: 'Transfer deleted successfully'\n        });\n    } catch (error) {\n        console.error(`Error deleting transfer ${id}:`, error);\n        operation.end(false, 'delete_error');\n        return NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to delete transfer'\n        }, { status: 500 });\n    }\n}"],
      names: ["DELETE", "GET", "PATCH", "PUT", "getDefaultTransfer", "id", "status", "created_at", "Date", "toISOString", "completed_at", "source_shop_id", "destination_shop_id", "source_shop_name", "destination_shop_name", "initiated_by", "items", "defaultTransfersData", "item_count", "total_items", "req", "params", "operation", "trackTransferOperation", "permissionError", "requirePermission", "end", "parseInt", "isNaN", "NextResponse", "json", "success", "error", "cacheKey", "TRANSFER_CACHE_CONFIG", "KEYS", "TRANSFER_DETAIL", "cached", "transferCacheService", "get", "undefined", "data", "transfer", "deduplicateRequest", "safeQuery", "transferData", "prisma", "inventoryTransfer", "findUnique", "where", "include", "fromShop", "toShop", "fromUser", "transferItems", "product", "createdAt", "fromShopId", "toShopId", "name", "map", "item", "product_id", "productId", "product_name", "sku", "quantity", "notes", "price", "toString", "set", "console", "body", "action", "includes", "result", "$transaction", "tx", "affectedProductIds", "Set", "Error", "sourceInventory", "inventoryItem", "findFirst", "shopId", "transferCostPerUnit", "shopSpecificCost", "update", "updatedAt", "add", "inventoryUpdates", "destInventory", "create", "currentDestQuantity", "currentDestCost", "transferQuantity", "currentTotalValue", "transferTotalValue", "newTotalQuantity", "newShopSpecificCost", "push", "cost", "length", "Promise", "all", "updateMany", "increment", "wacUpdates", "Array", "from", "allInventoryAfterTransfer", "findMany", "gt", "totalQuantity", "reduce", "sum", "inv", "totalValue", "globalWAC", "filter", "weightedAverageCost", "timeout", "invalidateTransferCache", "message", "sourceShopId", "destinationShopId", "isArray", "existingTransfer", "sourceShop", "shop", "destinationShop", "inventory", "productName", "updatedTransfer", "transferItem", "deleteMany", "transferId", "transferItemsData", "createMany", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fae11e6e97f3ec1e79b27414c4497eb8a7d20613"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ng7jnwm2g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ng7jnwm2g();
cov_2ng7jnwm2g().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[0]++;
  cov_2ng7jnwm2g().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2ng7jnwm2g().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().f[1]++;
    cov_2ng7jnwm2g().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().f[2]++;
    cov_2ng7jnwm2g().s[5]++;
    return GET;
  },
  PATCH: function () {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().f[3]++;
    cov_2ng7jnwm2g().s[6]++;
    return PATCH;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().f[4]++;
    cov_2ng7jnwm2g().s[7]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[8]++, require("next/server"));
const _middleware =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[9]++, require("../../../../../lib/utils/middleware"));
const _prisma =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[10]++, require("../../../../../lib/prisma"));
const _transferCache =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[11]++, require("../../../../../lib/transferCache"));
const _transferPerformanceMonitor =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[12]++, require("../../../../../lib/transferPerformanceMonitor"));
const _requestdeduplication =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[13]++, require("../../../../../lib/request-deduplication"));
// Default fallback data for a transfer
function getDefaultTransfer(id) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[5]++;
  cov_2ng7jnwm2g().s[14]++;
  return {
    id,
    status: "pending",
    created_at: new Date().toISOString(),
    completed_at: null,
    source_shop_id: 0,
    destination_shop_id: 0,
    source_shop_name: "Unknown Shop",
    destination_shop_name: "Unknown Shop",
    initiated_by: "Unknown User",
    items: []
  };
}
// Default fallback data for transfers list
const defaultTransfersData =
/* istanbul ignore next */
(cov_2ng7jnwm2g().s[15]++, [{
  id: 1,
  status: "pending",
  created_at: new Date().toISOString(),
  completed_at: null,
  source_shop_name: "Main Store",
  destination_shop_name: "Branch Store",
  initiated_by: "System",
  item_count: 0,
  total_items: 0
}]);
async function GET(req, {
  params
}) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[6]++;
  const operation =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[16]++, (0, _transferPerformanceMonitor.trackTransferOperation)("detail"));
  // Check for inventory:view permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[17]++, await (0, _middleware.requirePermission)("inventory:view")(req));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[18]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[0][0]++;
    cov_2ng7jnwm2g().s[19]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[20]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[0][1]++;
  }
  const id =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[21]++, parseInt(params.id));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[22]++;
  if (isNaN(id)) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[1][0]++;
    cov_2ng7jnwm2g().s[23]++;
    operation.end(false, "invalid_id");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[24]++;
    return _server.NextResponse.json({
      success: false,
      error: "Invalid transfer ID"
    }, {
      status: 400
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[1][1]++;
  }
  cov_2ng7jnwm2g().s[25]++;
  try {
    // Generate cache key
    const cacheKey =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[26]++, `${_transferCache.TRANSFER_CACHE_CONFIG.KEYS.TRANSFER_DETAIL}:${params.id}`);
    // Try to get from cache first
    const cached =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[27]++, await _transferCache.transferCacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[28]++;
    if (cached) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[2][0]++;
      cov_2ng7jnwm2g().s[29]++;
      operation.end(true, undefined, true);
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[30]++;
      return _server.NextResponse.json({
        success: true,
        data: cached
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[2][1]++;
    }
    // Use request deduplication
    const transfer =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[31]++, await (0, _requestdeduplication.deduplicateRequest)(async () => {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().f[7]++;
      cov_2ng7jnwm2g().s[32]++;
      return await (0, _prisma.safeQuery)(async () => {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().f[8]++;
        // Get transfer details with related data
        const transferData =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[33]++, await _prisma.prisma.inventoryTransfer.findUnique({
          where: {
            id
          },
          include: {
            fromShop: true,
            toShop: true,
            fromUser: true,
            transferItems: {
              include: {
                product: true
              }
            }
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[34]++;
        if (!transferData) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[3][0]++;
          cov_2ng7jnwm2g().s[35]++;
          return null;
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[3][1]++;
        }
        // Format the transfer data to match the expected format
        cov_2ng7jnwm2g().s[36]++;
        return {
          id: transferData.id,
          status: transferData.status,
          created_at: transferData.createdAt.toISOString(),
          completed_at: null,
          source_shop_id: transferData.fromShopId,
          destination_shop_id: transferData.toShopId,
          source_shop_name: transferData.fromShop.name,
          destination_shop_name: transferData.toShop.name,
          initiated_by: transferData.fromUser.name,
          items: transferData.transferItems.map(item => {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().f[9]++;
            cov_2ng7jnwm2g().s[37]++;
            return {
              id: item.id,
              product_id: item.productId,
              product_name: item.product.name,
              sku:
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[4][0]++, item.product.sku) ||
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[4][1]++, ""),
              quantity: item.quantity,
              notes: null,
              price: item.product.price.toString()
            };
          })
        };
      }, getDefaultTransfer(id), `Failed to fetch transfer with ID ${id}`);
    }, `/api/inventory/transfers/${params.id}`));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[38]++;
    if (!transfer) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[5][0]++;
      cov_2ng7jnwm2g().s[39]++;
      operation.end(false, "not_found");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[40]++;
      return _server.NextResponse.json({
        success: false,
        error: "Transfer not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[5][1]++;
    }
    // Cache the result
    cov_2ng7jnwm2g().s[41]++;
    await _transferCache.transferCacheService.set(cacheKey, transfer);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[42]++;
    operation.end(true, undefined, false);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[43]++;
    return _server.NextResponse.json({
      success: true,
      data: transfer
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[44]++;
    console.error(`Error fetching transfer ${id}:`, error);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[45]++;
    operation.end(false, "fetch_error");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[46]++;
    return _server.NextResponse.json({
      success: false,
      error: "Failed to fetch transfer"
    }, {
      status: 500
    });
  }
}
async function PATCH(req, {
  params
}) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[10]++;
  const operation =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[47]++, (0, _transferPerformanceMonitor.trackTransferOperation)("complete"));
  // Check for inventory:transfer permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[48]++, await (0, _middleware.requirePermission)("inventory:transfer")(req));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[49]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[6][0]++;
    cov_2ng7jnwm2g().s[50]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[51]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[6][1]++;
  }
  const id =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[52]++, parseInt(params.id));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[53]++;
  if (isNaN(id)) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[7][0]++;
    cov_2ng7jnwm2g().s[54]++;
    operation.end(false, "invalid_id");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[55]++;
    return _server.NextResponse.json({
      success: false,
      error: "Invalid transfer ID"
    }, {
      status: 400
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[7][1]++;
  }
  cov_2ng7jnwm2g().s[56]++;
  try {
    const body1 =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[57]++, await req.json());
    const {
      action
    } =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[58]++, body1);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[9][0]++, !action) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[9][1]++, !["complete", "cancel"].includes(action))) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[8][0]++;
      cov_2ng7jnwm2g().s[60]++;
      operation.end(false, "invalid_action");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[61]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Invalid action. Must be "complete" or "cancel"'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[8][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[62]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().f[11]++;
      cov_2ng7jnwm2g().s[63]++;
      return await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().f[12]++;
        // Declare affectedProductIds before using it
        const affectedProductIds =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[64]++, new Set());
        // Get transfer with items
        const transfer =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[65]++, await tx.inventoryTransfer.findUnique({
          where: {
            id
          },
          include: {
            transferItems: {
              include: {
                product: true
              }
            }
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[66]++;
        if (!transfer) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[10][0]++;
          cov_2ng7jnwm2g().s[67]++;
          throw new Error("Transfer not found");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[10][1]++;
        }
        cov_2ng7jnwm2g().s[68]++;
        if (transfer.status !== "pending") {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[11][0]++;
          cov_2ng7jnwm2g().s[69]++;
          throw new Error(`Cannot ${action} a transfer that is not in pending status`);
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[11][1]++;
        }
        cov_2ng7jnwm2g().s[70]++;
        if (action === "complete") {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[12][0]++;
          cov_2ng7jnwm2g().s[71]++;
          // Process each transfer item for completion
          for (const item of transfer.transferItems) {
            // Check source inventory
            const sourceInventory =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[72]++, await tx.inventoryItem.findFirst({
              where: {
                shopId: transfer.fromShopId,
                productId: item.productId
              }
            }));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[73]++;
            if (
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[14][0]++, !sourceInventory) ||
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[14][1]++, sourceInventory.quantity < item.quantity)) {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().b[13][0]++;
              cov_2ng7jnwm2g().s[74]++;
              throw new Error(`Insufficient inventory for product ID ${item.productId} in source shop`);
            } else
            /* istanbul ignore next */
            {
              cov_2ng7jnwm2g().b[13][1]++;
            }
            // Get the shop-specific cost from source inventory
            const transferCostPerUnit =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[75]++,
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[15][0]++, sourceInventory.shopSpecificCost) ||
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[15][1]++, 0));
            // Update source inventory (decrease quantity)
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[76]++;
            await tx.inventoryItem.update({
              where: {
                id: sourceInventory.id
              },
              data: {
                quantity: sourceInventory.quantity - item.quantity,
                updatedAt: new Date()
              }
            });
            // Collect items for batch processing
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[77]++;
            affectedProductIds.add(item.productId);
          }
          // Batch process inventory updates
          const inventoryUpdates =
          /* istanbul ignore next */
          (cov_2ng7jnwm2g().s[78]++, []);
          /* istanbul ignore next */
          cov_2ng7jnwm2g().s[79]++;
          for (const item of transfer.transferItems) {
            // Get the shop-specific cost from source inventory
            const sourceInventory =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[80]++, await tx.inventoryItem.findFirst({
              where: {
                shopId: transfer.fromShopId,
                productId: item.productId
              }
            }));
            const transferCostPerUnit =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[81]++,
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[16][0]++, sourceInventory?.shopSpecificCost) ||
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[16][1]++, 0));
            // Check if destination already has this product
            const destInventory =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[82]++, await tx.inventoryItem.findFirst({
              where: {
                shopId: transfer.toShopId,
                productId: item.productId
              }
            }));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[83]++;
            if (!destInventory) {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().b[17][0]++;
              cov_2ng7jnwm2g().s[84]++;
              // Create new inventory item at destination
              await tx.inventoryItem.create({
                data: {
                  shopId: transfer.toShopId,
                  productId: item.productId,
                  quantity: item.quantity,
                  shopSpecificCost: transferCostPerUnit
                }
              });
            } else {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().b[17][1]++;
              // Calculate new WAC for destination shop using weighted average
              const currentDestQuantity =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[85]++, destInventory.quantity);
              const currentDestCost =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[86]++,
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[18][0]++, destInventory.shopSpecificCost) ||
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[18][1]++, 0));
              const transferQuantity =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[87]++, item.quantity);
              const currentTotalValue =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[88]++, currentDestQuantity * currentDestCost);
              const transferTotalValue =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[89]++, transferQuantity * transferCostPerUnit);
              const newTotalQuantity =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[90]++, currentDestQuantity + transferQuantity);
              let newShopSpecificCost =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[91]++, 0);
              /* istanbul ignore next */
              cov_2ng7jnwm2g().s[92]++;
              if (newTotalQuantity > 0) {
                /* istanbul ignore next */
                cov_2ng7jnwm2g().b[19][0]++;
                cov_2ng7jnwm2g().s[93]++;
                newShopSpecificCost = (currentTotalValue + transferTotalValue) / newTotalQuantity;
              } else
              /* istanbul ignore next */
              {
                cov_2ng7jnwm2g().b[19][1]++;
              }
              cov_2ng7jnwm2g().s[94]++;
              inventoryUpdates.push({
                productId: item.productId,
                quantity: item.quantity,
                cost: newShopSpecificCost
              });
            }
          }
          // Batch update existing inventory items
          /* istanbul ignore next */
          cov_2ng7jnwm2g().s[95]++;
          if (inventoryUpdates.length > 0) {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().b[20][0]++;
            cov_2ng7jnwm2g().s[96]++;
            await Promise.all(inventoryUpdates.map(update => {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().f[13]++;
              cov_2ng7jnwm2g().s[97]++;
              return tx.inventoryItem.updateMany({
                where: {
                  shopId: transfer.toShopId,
                  productId: update.productId
                },
                data: {
                  quantity: {
                    increment: update.quantity
                  },
                  shopSpecificCost: update.cost,
                  updatedAt: new Date()
                }
              });
            }));
          } else
          /* istanbul ignore next */
          {
            cov_2ng7jnwm2g().b[20][1]++;
          }
          // Batch recalculate global weighted average costs
          const wacUpdates =
          /* istanbul ignore next */
          (cov_2ng7jnwm2g().s[98]++, await Promise.all(Array.from(affectedProductIds).map(async productId => {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().f[14]++;
            const allInventoryAfterTransfer =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[99]++, await tx.inventoryItem.findMany({
              where: {
                productId,
                quantity: {
                  gt: 0
                } // Only consider inventories with stock
              }
            }));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[100]++;
            if (allInventoryAfterTransfer.length > 0) {
              /* istanbul ignore next */
              cov_2ng7jnwm2g().b[21][0]++;
              const totalQuantity =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[101]++, allInventoryAfterTransfer.reduce((sum, inv) => {
                /* istanbul ignore next */
                cov_2ng7jnwm2g().f[15]++;
                cov_2ng7jnwm2g().s[102]++;
                return sum + inv.quantity;
              }, 0));
              const totalValue =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[103]++, allInventoryAfterTransfer.reduce((sum, inv) => {
                /* istanbul ignore next */
                cov_2ng7jnwm2g().f[16]++;
                cov_2ng7jnwm2g().s[104]++;
                return sum + inv.quantity * (
                /* istanbul ignore next */
                (cov_2ng7jnwm2g().b[22][0]++, inv.shopSpecificCost) ||
                /* istanbul ignore next */
                (cov_2ng7jnwm2g().b[22][1]++, 0));
              }, 0));
              const globalWAC =
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().s[105]++, totalQuantity > 0 ?
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[23][0]++, totalValue / totalQuantity) :
              /* istanbul ignore next */
              (cov_2ng7jnwm2g().b[23][1]++, 0));
              /* istanbul ignore next */
              cov_2ng7jnwm2g().s[106]++;
              return {
                productId,
                globalWAC
              };
            } else
            /* istanbul ignore next */
            {
              cov_2ng7jnwm2g().b[21][1]++;
            }
            cov_2ng7jnwm2g().s[107]++;
            return null;
          })));
          // Update global WAC for all affected products
          /* istanbul ignore next */
          cov_2ng7jnwm2g().s[108]++;
          await Promise.all(wacUpdates.filter(update => {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().f[17]++;
            cov_2ng7jnwm2g().s[109]++;
            return update !== null;
          }).map(update => {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().f[18]++;
            cov_2ng7jnwm2g().s[110]++;
            return tx.product.update({
              where: {
                id: update.productId
              },
              data: {
                weightedAverageCost: update.globalWAC
              }
            });
          }));
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[12][1]++;
        }
        // Update transfer status
        cov_2ng7jnwm2g().s[111]++;
        return await tx.inventoryTransfer.update({
          where: {
            id
          },
          data: {
            status: action === "complete" ?
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[24][0]++, "completed") :
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[24][1]++, "cancelled"),
            updatedAt: new Date()
          }
        });
      }, {
        timeout: 30000
      } // 30-second timeout
      );
    }, null, `Failed to ${action} transfer`));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[112]++;
    if (!result) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[25][0]++;
      cov_2ng7jnwm2g().s[113]++;
      operation.end(false, "update_failed");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[114]++;
      return _server.NextResponse.json({
        success: false,
        error: `Failed to ${action} transfer`
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[25][1]++;
    }
    // Invalidate relevant caches
    cov_2ng7jnwm2g().s[115]++;
    await _transferCache.transferCacheService.invalidateTransferCache(params.id, [result.fromShopId, result.toShopId]);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[116]++;
    operation.end(true);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[117]++;
    return _server.NextResponse.json({
      success: true,
      message: `Transfer ${action}d successfully`,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[118]++;
    console.error(`Error ${
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[26][0]++, body?.action) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[26][1]++, "updating")} transfer ${id}:`, error);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[119]++;
    operation.end(false, "update_error");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[120]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[27][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[27][1]++, `Failed to update transfer`)
    }, {
      status: 500
    });
  }
}
async function PUT(req, {
  params
}) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[19]++;
  const operation =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[121]++, (0, _transferPerformanceMonitor.trackTransferOperation)("update"));
  // Check for inventory:transfer permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[122]++, await (0, _middleware.requirePermission)("inventory:transfer")(req));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[123]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[28][0]++;
    cov_2ng7jnwm2g().s[124]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[125]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[28][1]++;
  }
  const id =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[126]++, parseInt(params.id));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[127]++;
  if (isNaN(id)) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[29][0]++;
    cov_2ng7jnwm2g().s[128]++;
    operation.end(false, "invalid_id");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[129]++;
    return _server.NextResponse.json({
      success: false,
      error: "Invalid transfer ID"
    }, {
      status: 400
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[29][1]++;
  }
  cov_2ng7jnwm2g().s[130]++;
  try {
    const body1 =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[131]++, await req.json());
    const {
      sourceShopId,
      destinationShopId,
      items
    } =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[132]++, body1);
    // Validate input
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[133]++;
    if (
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[31][0]++, !sourceShopId) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[31][1]++, !destinationShopId) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[31][2]++, !items) ||
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().b[31][3]++, !Array.isArray(items))) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[30][0]++;
      cov_2ng7jnwm2g().s[134]++;
      operation.end(false, "invalid_input");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[135]++;
      return _server.NextResponse.json({
        success: false,
        error: "Missing required fields"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[30][1]++;
    }
    cov_2ng7jnwm2g().s[136]++;
    if (sourceShopId === destinationShopId) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[32][0]++;
      cov_2ng7jnwm2g().s[137]++;
      operation.end(false, "same_shop");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[138]++;
      return _server.NextResponse.json({
        success: false,
        error: "Source and destination shops cannot be the same"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[32][1]++;
    }
    cov_2ng7jnwm2g().s[139]++;
    if (items.length === 0) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[33][0]++;
      cov_2ng7jnwm2g().s[140]++;
      operation.end(false, "no_items");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[141]++;
      return _server.NextResponse.json({
        success: false,
        error: "At least one item is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[33][1]++;
    }
    // Validate items
    cov_2ng7jnwm2g().s[142]++;
    for (const item of items) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[143]++;
      if (
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[35][0]++, !item.productId) ||
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[35][1]++, !item.quantity) ||
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[35][2]++, item.quantity <= 0)) {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().b[34][0]++;
        cov_2ng7jnwm2g().s[144]++;
        operation.end(false, "invalid_item");
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[145]++;
        return _server.NextResponse.json({
          success: false,
          error: "Invalid item data"
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ng7jnwm2g().b[34][1]++;
      }
    }
    const result =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[146]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().f[20]++;
      cov_2ng7jnwm2g().s[147]++;
      return await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().f[21]++;
        // Check if transfer exists and is pending
        const existingTransfer =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[148]++, await tx.inventoryTransfer.findUnique({
          where: {
            id
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[149]++;
        if (!existingTransfer) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[36][0]++;
          cov_2ng7jnwm2g().s[150]++;
          throw new Error("Transfer not found");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[36][1]++;
        }
        cov_2ng7jnwm2g().s[151]++;
        if (existingTransfer.status !== "pending") {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[37][0]++;
          cov_2ng7jnwm2g().s[152]++;
          throw new Error("Only pending transfers can be edited");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[37][1]++;
        }
        // Verify shops exist
        const sourceShop =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[153]++, await tx.shop.findUnique({
          where: {
            id: sourceShopId
          }
        }));
        const destinationShop =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[154]++, await tx.shop.findUnique({
          where: {
            id: destinationShopId
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[155]++;
        if (
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().b[39][0]++, !sourceShop) ||
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().b[39][1]++, !destinationShop)) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[38][0]++;
          cov_2ng7jnwm2g().s[156]++;
          throw new Error("Invalid shop selection");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[38][1]++;
        }
        // Verify products exist and have sufficient stock
        cov_2ng7jnwm2g().s[157]++;
        for (const item of items) {
          const inventory =
          /* istanbul ignore next */
          (cov_2ng7jnwm2g().s[158]++, await tx.inventoryItem.findFirst({
            where: {
              productId: item.productId,
              shopId: sourceShopId
            }
          }));
          /* istanbul ignore next */
          cov_2ng7jnwm2g().s[159]++;
          if (!inventory) {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().b[40][0]++;
            const product =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[160]++, await tx.product.findUnique({
              where: {
                id: item.productId
              }
            }));
            const productName =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[161]++, product ?
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[41][0]++, product.name) :
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[41][1]++, `Product ID ${item.productId}`));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[162]++;
            throw new Error(`Product "${productName}" not found in source shop`);
          } else
          /* istanbul ignore next */
          {
            cov_2ng7jnwm2g().b[40][1]++;
          }
          cov_2ng7jnwm2g().s[163]++;
          if (inventory.quantity < item.quantity) {
            /* istanbul ignore next */
            cov_2ng7jnwm2g().b[42][0]++;
            const product =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[164]++, await tx.product.findUnique({
              where: {
                id: item.productId
              }
            }));
            const productName =
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().s[165]++, product ?
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[43][0]++, product.name) :
            /* istanbul ignore next */
            (cov_2ng7jnwm2g().b[43][1]++, `Product ID ${item.productId}`));
            /* istanbul ignore next */
            cov_2ng7jnwm2g().s[166]++;
            throw new Error(`Insufficient stock for "${productName}". Available: ${inventory.quantity}, Requested: ${item.quantity}`);
          } else
          /* istanbul ignore next */
          {
            cov_2ng7jnwm2g().b[42][1]++;
          }
        }
        // Update transfer
        const updatedTransfer =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[167]++, await tx.inventoryTransfer.update({
          where: {
            id
          },
          data: {
            fromShopId: sourceShopId,
            toShopId: destinationShopId,
            updatedAt: new Date()
          }
        }));
        // Delete existing transfer items
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[168]++;
        await tx.transferItem.deleteMany({
          where: {
            transferId: id
          }
        });
        // Insert new transfer items
        const transferItemsData =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[169]++, items.map(item => {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().f[22]++;
          cov_2ng7jnwm2g().s[170]++;
          return {
            transferId: id,
            productId: item.productId,
            quantity: item.quantity
          };
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[171]++;
        await tx.transferItem.createMany({
          data: transferItemsData
        });
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[172]++;
        return updatedTransfer;
      }, {
        timeout: 30000
      } // 30-second timeout
      );
    }, null, "Failed to update transfer"));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[173]++;
    if (!result) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[44][0]++;
      cov_2ng7jnwm2g().s[174]++;
      operation.end(false, "update_failed");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[175]++;
      return _server.NextResponse.json({
        success: false,
        error: "Failed to update transfer"
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[44][1]++;
    }
    // Invalidate relevant caches
    cov_2ng7jnwm2g().s[176]++;
    await _transferCache.transferCacheService.invalidateTransferCache(params.id, [result.fromShopId, result.toShopId]);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[177]++;
    operation.end(true);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[178]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transfer updated successfully",
      data: {
        id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[179]++;
    console.error(`Error updating transfer ${id}:`, error);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[180]++;
    operation.end(false, "update_error");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[181]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[45][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[45][1]++, "Failed to update transfer")
    }, {
      status: 500
    });
  }
}
async function DELETE(req, {
  params
}) {
  /* istanbul ignore next */
  cov_2ng7jnwm2g().f[23]++;
  const operation =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[182]++, (0, _transferPerformanceMonitor.trackTransferOperation)("cancel"));
  // Check for inventory:transfer permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[183]++, await (0, _middleware.requirePermission)("inventory:transfer")(req));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[184]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[46][0]++;
    cov_2ng7jnwm2g().s[185]++;
    operation.end(false, "unauthorized");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[186]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[46][1]++;
  }
  const id =
  /* istanbul ignore next */
  (cov_2ng7jnwm2g().s[187]++, parseInt(params.id));
  /* istanbul ignore next */
  cov_2ng7jnwm2g().s[188]++;
  if (isNaN(id)) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().b[47][0]++;
    cov_2ng7jnwm2g().s[189]++;
    operation.end(false, "invalid_id");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[190]++;
    return _server.NextResponse.json({
      success: false,
      error: "Invalid transfer ID"
    }, {
      status: 400
    });
  } else
  /* istanbul ignore next */
  {
    cov_2ng7jnwm2g().b[47][1]++;
  }
  cov_2ng7jnwm2g().s[191]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_2ng7jnwm2g().s[192]++, await (0, _prisma.safeQuery)(async () => {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().f[24]++;
      cov_2ng7jnwm2g().s[193]++;
      return await _prisma.prisma.$transaction(async tx => {
        /* istanbul ignore next */
        cov_2ng7jnwm2g().f[25]++;
        // Get transfer to check status
        const transfer =
        /* istanbul ignore next */
        (cov_2ng7jnwm2g().s[194]++, await tx.inventoryTransfer.findUnique({
          where: {
            id
          }
        }));
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[195]++;
        if (!transfer) {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[48][0]++;
          cov_2ng7jnwm2g().s[196]++;
          throw new Error("Transfer not found");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[48][1]++;
        }
        cov_2ng7jnwm2g().s[197]++;
        if (transfer.status !== "pending") {
          /* istanbul ignore next */
          cov_2ng7jnwm2g().b[49][0]++;
          cov_2ng7jnwm2g().s[198]++;
          throw new Error("Only pending transfers can be deleted");
        } else
        /* istanbul ignore next */
        {
          cov_2ng7jnwm2g().b[49][1]++;
        }
        // Delete transfer items and the transfer itself
        cov_2ng7jnwm2g().s[199]++;
        await tx.transferItem.deleteMany({
          where: {
            transferId: id
          }
        });
        /* istanbul ignore next */
        cov_2ng7jnwm2g().s[200]++;
        return await tx.inventoryTransfer.delete({
          where: {
            id
          }
        });
      }, {
        timeout: 30000
      } // 30-second timeout
      );
    }, null, "Failed to delete transfer"));
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[201]++;
    if (!result) {
      /* istanbul ignore next */
      cov_2ng7jnwm2g().b[50][0]++;
      cov_2ng7jnwm2g().s[202]++;
      operation.end(false, "delete_failed");
      /* istanbul ignore next */
      cov_2ng7jnwm2g().s[203]++;
      return _server.NextResponse.json({
        success: false,
        error: "Failed to delete transfer"
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ng7jnwm2g().b[50][1]++;
    }
    // Invalidate relevant caches
    cov_2ng7jnwm2g().s[204]++;
    await _transferCache.transferCacheService.invalidateTransferCache(params.id, [result.fromShopId, result.toShopId]);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[205]++;
    operation.end(true);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[206]++;
    return _server.NextResponse.json({
      success: true,
      message: "Transfer deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[207]++;
    console.error(`Error deleting transfer ${id}:`, error);
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[208]++;
    operation.end(false, "delete_error");
    /* istanbul ignore next */
    cov_2ng7jnwm2g().s[209]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[51][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ng7jnwm2g().b[51][1]++, "Failed to delete transfer")
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,