{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/auth-lib.test.ts"],"sourcesContent":["import { verifyToken, authOptions } from '@/lib/auth';\nimport * as jose from 'jose';\n\n// Mock jose module\njest.mock('jose', () => ({\n  jwtVerify: jest.fn(),\n}));\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n};\n\ndescribe('Auth Library Functions', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.log.mockClear();\n    consoleSpy.error.mockClear();\n  });\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore();\n    consoleSpy.error.mockRestore();\n  });\n\n  describe('verifyToken', () => {\n    const mockJwtVerify = jose.jwtVerify as jest.MockedFunction<typeof jose.jwtVerify>;\n\n    it('should verify a valid token successfully', async () => {\n      const mockPayload = { sub: '123', exp: Date.now() / 1000 + 3600 };\n      mockJwtVerify.mockResolvedValue({\n        payload: mockPayload,\n        protectedHeader: {},\n      } as any);\n\n      const result = await verifyToken('valid-token');\n      \n      expect(result).toEqual(mockPayload);\n      expect(mockJwtVerify).toHaveBeenCalledWith(\n        'valid-token',\n        expect.any(Uint8Array)\n      );\n    });\n\n    it('should return null for expired token', async () => {\n      const expiredError = new Error('Token expired');\n      (expiredError as any).code = 'ERR_JWT_EXPIRED';\n      mockJwtVerify.mockRejectedValue(expiredError);\n\n      const result = await verifyToken('expired-token');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Token expired:', 'Token expired');\n    });\n\n    it('should return null for invalid token signature', async () => {\n      const invalidError = new Error('Invalid signature');\n      (invalidError as any).code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';\n      mockJwtVerify.mockRejectedValue(invalidError);\n\n      const result = await verifyToken('invalid-token');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Invalid token:', 'Invalid signature');\n    });\n\n    it('should return null for invalid JWS format', async () => {\n      const invalidError = new Error('Invalid JWS');\n      (invalidError as any).code = 'ERR_JWS_INVALID';\n      mockJwtVerify.mockRejectedValue(invalidError);\n\n      const result = await verifyToken('malformed-token');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Invalid token:', 'Invalid JWS');\n    });\n\n    it('should return null for claim validation failure', async () => {\n      const claimError = new Error('Claim validation failed');\n      (claimError as any).code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';\n      mockJwtVerify.mockRejectedValue(claimError);\n\n      const result = await verifyToken('invalid-claims-token');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Invalid token:', 'Claim validation failed');\n    });\n\n    it('should return null for unknown verification error', async () => {\n      const unknownError = new Error('Unknown error');\n      mockJwtVerify.mockRejectedValue(unknownError);\n\n      const result = await verifyToken('problematic-token');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Token verification error:', 'Unknown error');\n    });\n\n    it('should handle non-Error exceptions', async () => {\n      mockJwtVerify.mockRejectedValue('string error');\n\n      const result = await verifyToken('problematic-token');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith('Token verification error:', 'Unknown error occurred');\n    });\n  });\n\n  describe('authOptions', () => {\n    it('should have correct configuration', () => {\n      expect(authOptions.secret).toBeDefined();\n      expect(authOptions.session.strategy).toBe('jwt');\n      expect(authOptions.session.maxAge).toBe(24 * 60 * 60);\n      expect(authOptions.callbacks).toBeDefined();\n      expect(authOptions.callbacks.jwt).toBeDefined();\n      expect(authOptions.callbacks.session).toBeDefined();\n    });\n\n    it('should handle jwt callback with user', async () => {\n      const token = { id: null, permissions: null };\n      const user = { id: '123', permissions: ['read', 'write'] };\n      \n      const result = await authOptions.callbacks.jwt({ token, user });\n      \n      expect(result.id).toBe('123');\n      expect(result.permissions).toEqual(['read', 'write']);\n    });\n\n    it('should handle jwt callback without user', async () => {\n      const token = { id: '456', permissions: ['admin'] };\n      \n      const result = await authOptions.callbacks.jwt({ token });\n      \n      expect(result.id).toBe('456');\n      expect(result.permissions).toEqual(['admin']);\n    });\n\n    it('should handle session callback with token', async () => {\n      const session = { user: { name: 'Test User' } };\n      const token = { id: '789', permissions: ['read'] };\n      \n      const result = await authOptions.callbacks.session({ session, token });\n      \n      expect(result.user.id).toBe('789');\n      expect(result.user.permissions).toEqual(['read']);\n      expect(result.user.name).toBe('Test User');\n    });\n\n    it('should handle session callback without token', async () => {\n      const session = { user: { name: 'Test User' } };\n      const token = null;\n      \n      const result = await authOptions.callbacks.session({ session, token });\n      \n      expect(result.user.name).toBe('Test User');\n      expect(result.user.id).toBeUndefined();\n      expect(result.user.permissions).toBeUndefined();\n    });\n\n    it('should handle session callback without user in session', async () => {\n      const session = {};\n      const token = { id: '999', permissions: ['admin'] };\n      \n      const result = await authOptions.callbacks.session({ session, token });\n      \n      expect(result).toEqual({});\n    });\n  });\n});"],"names":["jest","mock","jwtVerify","fn","consoleSpy","log","spyOn","console","mockImplementation","error","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","mockJwtVerify","jose","it","mockPayload","sub","exp","Date","now","mockResolvedValue","payload","protectedHeader","result","verifyToken","expect","toEqual","toHaveBeenCalledWith","any","Uint8Array","expiredError","Error","code","mockRejectedValue","toBeNull","invalidError","claimError","unknownError","authOptions","secret","toBeDefined","session","strategy","toBe","maxAge","callbacks","jwt","token","id","permissions","user","name","toBeUndefined"],"mappings":"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"}