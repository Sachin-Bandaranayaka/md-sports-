a21714ae65cca2a16d32f5ea972e916b
"use strict";

/* istanbul ignore next */
function cov_27lr75ggfo() {
  var path = "/Users/sachin/Documents/md-sports-/src/lib/prisma.ts";
  var hash = "cd108f03a6ecc8360b7cb1a7bb2851dfe06b477f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/lib/prisma.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 22
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 25
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 41
        }
      },
      "8": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 30
        }
      },
      "9": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 40,
          column: 1
        }
      },
      "10": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 167
        }
      },
      "11": {
        start: {
          line: 42,
          column: 15
        },
        end: {
          line: 42,
          column: 80
        }
      },
      "12": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 44,
          column: 75
        }
      },
      "13": {
        start: {
          line: 44,
          column: 43
        },
        end: {
          line: 44,
          column: 75
        }
      },
      "14": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "15": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 31
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 47
        }
      },
      "17": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 24
        }
      },
      "18": {
        start: {
          line: 53,
          column: 17
        },
        end: {
          line: 53,
          column: 23
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 13
          },
          end: {
            line: 12,
            column: 14
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 13
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 16
          }
        },
        loc: {
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "safeQuery",
        decl: {
          start: {
            line: 45,
            column: 15
          },
          end: {
            line: 45,
            column: 24
          }
        },
        loc: {
          start: {
            line: 45,
            column: 86
          },
          end: {
            line: 52,
            column: 1
          }
        },
        line: 45
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 17
          },
          end: {
            line: 29,
            column: 169
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 44
          },
          end: {
            line: 29,
            column: 129
          }
        }, {
          start: {
            line: 29,
            column: 132
          },
          end: {
            line: 29,
            column: 169
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 9
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 33,
            column: 49
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 38,
            column: 5
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 61
          },
          end: {
            line: 41,
            column: 165
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 88
          },
          end: {
            line: 41,
            column: 137
          }
        }, {
          start: {
            line: 41,
            column: 140
          },
          end: {
            line: 41,
            column: 165
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 42,
            column: 15
          },
          end: {
            line: 42,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 15
          },
          end: {
            line: 42,
            column: 37
          }
        }, {
          start: {
            line: 42,
            column: 41
          },
          end: {
            line: 42,
            column: 80
          }
        }],
        line: 42
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 0
          },
          end: {
            line: 44,
            column: 75
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 0
          },
          end: {
            line: 44,
            column: 75
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 45,
            column: 44
          },
          end: {
            line: 45,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 45,
            column: 57
          },
          end: {
            line: 45,
            column: 84
          }
        }],
        line: 45
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/lib/prisma.ts"],
      sourcesContent: ["import { PrismaClient } from '@prisma/client';\n\n// Use a single instance of Prisma Client across the entire app\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\n// Optimized connection options for Vercel serverless\nconst prismaOptions = {\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL ? \n                `${process.env.DATABASE_URL}?connection_limit=1&pool_timeout=900&connect_timeout=900` :\n                'postgresql://localhost:5432/mssport',\n        },\n    },\n    // Optimized logging for production\n    log: process.env.NODE_ENV === 'production' ? ['error'] : ['error', 'warn'],\n    errorFormat: 'minimal' as const,\n};\n\nconsole.log('Initializing Prisma client with DATABASE_URL:',\n    process.env.DATABASE_URL ?\n        `${process.env.DATABASE_URL.substring(0, 20)}...` :\n        'Not set (using default)'\n);\n\n// Create the Prisma client instance or reuse the existing one\nexport const prisma = globalForPrisma.prisma || new PrismaClient(prismaOptions);\n\n// For development, save the instance to avoid too many client instances\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\n// Helper function to safely execute database operations with fallback\nexport async function safeQuery<T>(\n    queryFn: () => Promise<T>,\n    fallback: T,\n    logMessage = 'Database operation failed'\n): Promise<T> {\n    try {\n        return await queryFn();\n    } catch (error) {\n        console.error(`${logMessage}:`, error);\n        return fallback;\n    }\n}\n\nexport default prisma;"],
      names: ["prisma", "safeQuery", "globalForPrisma", "global", "prismaOptions", "datasources", "db", "url", "process", "env", "DATABASE_URL", "log", "NODE_ENV", "errorFormat", "console", "substring", "PrismaClient", "queryFn", "fallback", "logMessage", "error"],
      mappings: ";;;;;;;;;;;IA6CA,OAAsB;eAAtB;;IAnBaA,MAAM;eAANA;;IAMSC,SAAS;eAATA;;;wBAhCO;AAE7B,+DAA+D;AAC/D,MAAMC,kBAAkBC;AAExB,qDAAqD;AACrD,MAAMC,gBAAgB;IAClBC,aAAa;QACTC,IAAI;YACAC,KAAKC,QAAQC,GAAG,CAACC,YAAY,GACzB,CAAC,EAAEF,QAAQC,GAAG,CAACC,YAAY,CAAC,wDAAwD,CAAC,GACrF;QACR;IACJ;IACA,mCAAmC;IACnCC,KAAKH,QAAQC,GAAG,CAACG,QAAQ,KAAK,eAAe;QAAC;KAAQ,GAAG;QAAC;QAAS;KAAO;IAC1EC,aAAa;AACjB;AAEAC,QAAQH,GAAG,CAAC,iDACRH,QAAQC,GAAG,CAACC,YAAY,GACpB,CAAC,EAAEF,QAAQC,GAAG,CAACC,YAAY,CAACK,SAAS,CAAC,GAAG,IAAI,GAAG,CAAC,GACjD;AAID,MAAMf,SAASE,gBAAgBF,MAAM,IAAI,IAAIgB,oBAAY,CAACZ;AAEjE,wEAAwE;AACxE,IAAII,QAAQC,GAAG,CAACG,QAAQ,KAAK,cAAcV,gBAAgBF,MAAM,GAAGA;AAG7D,eAAeC,UAClBgB,OAAyB,EACzBC,QAAW,EACXC,aAAa,2BAA2B;IAExC,IAAI;QACA,OAAO,MAAMF;IACjB,EAAE,OAAOG,OAAO;QACZN,QAAQM,KAAK,CAAC,CAAC,EAAED,WAAW,CAAC,CAAC,EAAEC;QAChC,OAAOF;IACX;AACJ;MAEA,WAAelB"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cd108f03a6ecc8360b7cb1a7bb2851dfe06b477f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_27lr75ggfo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_27lr75ggfo();
cov_27lr75ggfo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_27lr75ggfo().f[0]++;
  cov_27lr75ggfo().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_27lr75ggfo().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_27lr75ggfo().s[3]++;
_export(exports, {
  default: function () {
    /* istanbul ignore next */
    cov_27lr75ggfo().f[1]++;
    cov_27lr75ggfo().s[4]++;
    return _default;
  },
  prisma: function () {
    /* istanbul ignore next */
    cov_27lr75ggfo().f[2]++;
    cov_27lr75ggfo().s[5]++;
    return prisma;
  },
  safeQuery: function () {
    /* istanbul ignore next */
    cov_27lr75ggfo().f[3]++;
    cov_27lr75ggfo().s[6]++;
    return safeQuery;
  }
});
const _client =
/* istanbul ignore next */
(cov_27lr75ggfo().s[7]++, require("@prisma/client"));
// Use a single instance of Prisma Client across the entire app
const globalForPrisma =
/* istanbul ignore next */
(cov_27lr75ggfo().s[8]++, global);
// Optimized connection options for Vercel serverless
const prismaOptions =
/* istanbul ignore next */
(cov_27lr75ggfo().s[9]++, {
  datasources: {
    db: {
      url: process.env.DATABASE_URL ?
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[0][0]++, `${process.env.DATABASE_URL}?connection_limit=1&pool_timeout=900&connect_timeout=900`) :
      /* istanbul ignore next */
      (cov_27lr75ggfo().b[0][1]++, "postgresql://localhost:5432/mssport")
    }
  },
  // Optimized logging for production
  log: process.env.NODE_ENV === "production" ?
  /* istanbul ignore next */
  (cov_27lr75ggfo().b[1][0]++, ["error"]) :
  /* istanbul ignore next */
  (cov_27lr75ggfo().b[1][1]++, ["error", "warn"]),
  errorFormat: "minimal"
});
/* istanbul ignore next */
cov_27lr75ggfo().s[10]++;
console.log("Initializing Prisma client with DATABASE_URL:", process.env.DATABASE_URL ?
/* istanbul ignore next */
(cov_27lr75ggfo().b[2][0]++, `${process.env.DATABASE_URL.substring(0, 20)}...`) :
/* istanbul ignore next */
(cov_27lr75ggfo().b[2][1]++, "Not set (using default)"));
const prisma =
/* istanbul ignore next */
(cov_27lr75ggfo().s[11]++,
/* istanbul ignore next */
(cov_27lr75ggfo().b[3][0]++, globalForPrisma.prisma) ||
/* istanbul ignore next */
(cov_27lr75ggfo().b[3][1]++, new _client.PrismaClient(prismaOptions)));
// For development, save the instance to avoid too many client instances
/* istanbul ignore next */
cov_27lr75ggfo().s[12]++;
if (process.env.NODE_ENV !== "production") {
  /* istanbul ignore next */
  cov_27lr75ggfo().b[4][0]++;
  cov_27lr75ggfo().s[13]++;
  globalForPrisma.prisma = prisma;
} else
/* istanbul ignore next */
{
  cov_27lr75ggfo().b[4][1]++;
}
async function safeQuery(queryFn, fallback, logMessage =
/* istanbul ignore next */
(cov_27lr75ggfo().b[5][0]++, "Database operation failed")) {
  /* istanbul ignore next */
  cov_27lr75ggfo().f[4]++;
  cov_27lr75ggfo().s[14]++;
  try {
    /* istanbul ignore next */
    cov_27lr75ggfo().s[15]++;
    return await queryFn();
  } catch (error) {
    /* istanbul ignore next */
    cov_27lr75ggfo().s[16]++;
    console.error(`${logMessage}:`, error);
    /* istanbul ignore next */
    cov_27lr75ggfo().s[17]++;
    return fallback;
  }
}
const _default =
/* istanbul ignore next */
(cov_27lr75ggfo().s[18]++, prisma);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0IiwiY292XzI3bHI3NWdnZm8iLCJmIiwicyIsIl9kZWZhdWx0IiwicHJpc21hIiwic2FmZVF1ZXJ5IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsIiwicHJpc21hT3B0aW9ucyIsImRhdGFzb3VyY2VzIiwiZGIiLCJ1cmwiLCJwcm9jZXNzIiwiZW52IiwiREFUQUJBU0VfVVJMIiwiYiIsImxvZyIsIk5PREVfRU5WIiwiZXJyb3JGb3JtYXQiLCJjb25zb2xlIiwic3Vic3RyaW5nIiwiX2NsaWVudCIsIlByaXNtYUNsaWVudCIsInF1ZXJ5Rm4iLCJmYWxsYmFjayIsImxvZ01lc3NhZ2UiLCJlcnJvciJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vc3JjL2xpYi9wcmlzbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG4vLyBVc2UgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgUHJpc21hIENsaWVudCBhY3Jvc3MgdGhlIGVudGlyZSBhcHBcbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbCBhcyB1bmtub3duIGFzIHsgcHJpc21hOiBQcmlzbWFDbGllbnQgfTtcblxuLy8gT3B0aW1pemVkIGNvbm5lY3Rpb24gb3B0aW9ucyBmb3IgVmVyY2VsIHNlcnZlcmxlc3NcbmNvbnN0IHByaXNtYU9wdGlvbnMgPSB7XG4gICAgZGF0YXNvdXJjZXM6IHtcbiAgICAgICAgZGI6IHtcbiAgICAgICAgICAgIHVybDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID8gXG4gICAgICAgICAgICAgICAgYCR7cHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMfT9jb25uZWN0aW9uX2xpbWl0PTEmcG9vbF90aW1lb3V0PTkwMCZjb25uZWN0X3RpbWVvdXQ9OTAwYCA6XG4gICAgICAgICAgICAgICAgJ3Bvc3RncmVzcWw6Ly9sb2NhbGhvc3Q6NTQzMi9tc3Nwb3J0JyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIC8vIE9wdGltaXplZCBsb2dnaW5nIGZvciBwcm9kdWN0aW9uXG4gICAgbG9nOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nID8gWydlcnJvciddIDogWydlcnJvcicsICd3YXJuJ10sXG4gICAgZXJyb3JGb3JtYXQ6ICdtaW5pbWFsJyBhcyBjb25zdCxcbn07XG5cbmNvbnNvbGUubG9nKCdJbml0aWFsaXppbmcgUHJpc21hIGNsaWVudCB3aXRoIERBVEFCQVNFX1VSTDonLFxuICAgIHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCA/XG4gICAgICAgIGAke3Byb2Nlc3MuZW52LkRBVEFCQVNFX1VSTC5zdWJzdHJpbmcoMCwgMjApfS4uLmAgOlxuICAgICAgICAnTm90IHNldCAodXNpbmcgZGVmYXVsdCknXG4pO1xuXG4vLyBDcmVhdGUgdGhlIFByaXNtYSBjbGllbnQgaW5zdGFuY2Ugb3IgcmV1c2UgdGhlIGV4aXN0aW5nIG9uZVxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IGdsb2JhbEZvclByaXNtYS5wcmlzbWEgfHwgbmV3IFByaXNtYUNsaWVudChwcmlzbWFPcHRpb25zKTtcblxuLy8gRm9yIGRldmVsb3BtZW50LCBzYXZlIHRoZSBpbnN0YW5jZSB0byBhdm9pZCB0b28gbWFueSBjbGllbnQgaW5zdGFuY2VzXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA9IHByaXNtYTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHNhZmVseSBleGVjdXRlIGRhdGFiYXNlIG9wZXJhdGlvbnMgd2l0aCBmYWxsYmFja1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhZmVRdWVyeTxUPihcbiAgICBxdWVyeUZuOiAoKSA9PiBQcm9taXNlPFQ+LFxuICAgIGZhbGxiYWNrOiBULFxuICAgIGxvZ01lc3NhZ2UgPSAnRGF0YWJhc2Ugb3BlcmF0aW9uIGZhaWxlZCdcbik6IFByb21pc2U8VD4ge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBxdWVyeUZuKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgJHtsb2dNZXNzYWdlfTpgLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHByaXNtYTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUE2Q0FBLE9BQXNCLFdBQUFBLENBQUE7SUFBQTtJQUFBQyxjQUFBLEdBQUFDLENBQUE7SUFBQUQsY0FBQSxHQUFBRSxDQUFBO1dBQXRCQyxRQUFBOztFQW5CYUMsTUFBTSxXQUFBQSxDQUFBO0lBQUE7SUFBQUosY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FBQUUsQ0FBQTtXQUFORSxNQUFBOztFQU1TQyxTQUFTLFdBQUFBLENBQUE7SUFBQTtJQUFBTCxjQUFBLEdBQUFDLENBQUE7SUFBQUQsY0FBQSxHQUFBRSxDQUFBO1dBQVRHLFNBQUE7Ozs7O2tDQWhDTztBQUU3QjtBQUNBLE1BQU1DLGVBQUE7QUFBQTtBQUFBLENBQUFOLGNBQUEsR0FBQUUsQ0FBQSxPQUFrQkssTUFBQTtBQUV4QjtBQUNBLE1BQU1DLGFBQUE7QUFBQTtBQUFBLENBQUFSLGNBQUEsR0FBQUUsQ0FBQSxPQUFnQjtFQUNsQk8sV0FBQSxFQUFhO0lBQ1RDLEVBQUEsRUFBSTtNQUNBQyxHQUFBLEVBQUtDLE9BQUEsQ0FBUUMsR0FBRyxDQUFDQyxZQUFZO01BQUE7TUFBQSxDQUFBZCxjQUFBLEdBQUFlLENBQUEsVUFDekIsR0FBR0gsT0FBQSxDQUFRQyxHQUFHLENBQUNDLFlBQVksMERBQTBEO01BQUE7TUFBQSxDQUFBZCxjQUFBLEdBQUFlLENBQUEsVUFDckY7SUFDUjtFQUNKO0VBQ0E7RUFDQUMsR0FBQSxFQUFLSixPQUFBLENBQVFDLEdBQUcsQ0FBQ0ksUUFBUSxLQUFLO0VBQUE7RUFBQSxDQUFBakIsY0FBQSxHQUFBZSxDQUFBLFVBQWUsQ0FBQyxRQUFRO0VBQUE7RUFBQSxDQUFBZixjQUFBLEdBQUFlLENBQUEsVUFBRyxDQUFDLFNBQVMsT0FBTztFQUMxRUcsV0FBQSxFQUFhO0FBQ2pCO0FBQUE7QUFBQWxCLGNBQUEsR0FBQUUsQ0FBQTtBQUVBaUIsT0FBQSxDQUFRSCxHQUFHLENBQUMsaURBQ1JKLE9BQUEsQ0FBUUMsR0FBRyxDQUFDQyxZQUFZO0FBQUE7QUFBQSxDQUFBZCxjQUFBLEdBQUFlLENBQUEsVUFDcEIsR0FBR0gsT0FBQSxDQUFRQyxHQUFHLENBQUNDLFlBQVksQ0FBQ00sU0FBUyxDQUFDLEdBQUcsUUFBUTtBQUFBO0FBQUEsQ0FBQXBCLGNBQUEsR0FBQWUsQ0FBQSxVQUNqRDtBQUlELE1BQU1YLE1BQUE7QUFBQTtBQUFBLENBQUFKLGNBQUEsR0FBQUUsQ0FBQTtBQUFTO0FBQUEsQ0FBQUYsY0FBQSxHQUFBZSxDQUFBLFVBQUFULGVBQUEsQ0FBZ0JGLE1BQU07QUFBQTtBQUFBLENBQUFKLGNBQUEsR0FBQWUsQ0FBQSxVQUFJLElBQUlNLE9BQUEsQ0FBQUMsWUFBWSxDQUFDZCxhQUFBO0FBRWpFO0FBQUE7QUFBQVIsY0FBQSxHQUFBRSxDQUFBO0FBQ0EsSUFBSVUsT0FBQSxDQUFRQyxHQUFHLENBQUNJLFFBQVEsS0FBSyxjQUFjO0VBQUE7RUFBQWpCLGNBQUEsR0FBQWUsQ0FBQTtFQUFBZixjQUFBLEdBQUFFLENBQUE7RUFBQUksZUFBQSxDQUFnQkYsTUFBTSxHQUFHQSxNQUFBO0FBQUE7QUFBQTtBQUFBO0VBQUFKLGNBQUEsR0FBQWUsQ0FBQTtBQUFBO0FBRzdELGVBQWVWLFVBQ2xCa0IsT0FBeUIsRUFDekJDLFFBQVcsRUFDWEMsVUFBQTtBQUFBO0FBQUEsQ0FBQXpCLGNBQUEsR0FBQWUsQ0FBQSxVQUFhLDJCQUEyQjtFQUFBO0VBQUFmLGNBQUEsR0FBQUMsQ0FBQTtFQUFBRCxjQUFBLEdBQUFFLENBQUE7RUFFeEMsSUFBSTtJQUFBO0lBQUFGLGNBQUEsR0FBQUUsQ0FBQTtJQUNBLE9BQU8sTUFBTXFCLE9BQUE7RUFDakIsRUFBRSxPQUFPRyxLQUFBLEVBQU87SUFBQTtJQUFBMUIsY0FBQSxHQUFBRSxDQUFBO0lBQ1ppQixPQUFBLENBQVFPLEtBQUssQ0FBQyxHQUFHRCxVQUFBLEdBQWEsRUFBRUMsS0FBQTtJQUFBO0lBQUExQixjQUFBLEdBQUFFLENBQUE7SUFDaEMsT0FBT3NCLFFBQUE7RUFDWDtBQUNKO01BRUFyQixRQUFBO0FBQUE7QUFBQSxDQUFBSCxjQUFBLEdBQUFFLENBQUEsUUFBZUUsTUFBQSIsImlnbm9yZUxpc3QiOltdfQ==