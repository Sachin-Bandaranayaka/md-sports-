81d9a99eec0653d4f7cc93500f611ff5
"use strict";

/* istanbul ignore next */
function cov_2mp5pubv8y() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/settings/route.ts";
  var hash = "57ca51384e3394333c6741d75d5311dbf5a764ac";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/settings/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 20
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "9": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 60
        }
      },
      "10": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "11": {
        start: {
          line: 27,
          column: 33
        },
        end: {
          line: 27,
          column: 49
        }
      },
      "12": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 43
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 61
        }
      },
      "15": {
        start: {
          line: 32,
          column: 28
        },
        end: {
          line: 36,
          column: 14
        }
      },
      "16": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "17": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 57
        }
      },
      "18": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "19": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 94
        }
      },
      "20": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "21": {
        start: {
          line: 53,
          column: 32
        },
        end: {
          line: 53,
          column: 96
        }
      },
      "22": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "23": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 35
        }
      },
      "24": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 45
        }
      },
      "25": {
        start: {
          line: 59,
          column: 25
        },
        end: {
          line: 59,
          column: 71
        }
      },
      "26": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 57
        }
      },
      "27": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "28": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 57
        }
      },
      "29": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "30": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 92
        }
      },
      "31": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "32": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 63
        }
      },
      "33": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 31
        }
      },
      "34": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "35": {
        start: {
          line: 83,
          column: 21
        },
        end: {
          line: 83,
          column: 37
        }
      },
      "36": {
        start: {
          line: 84,
          column: 44
        },
        end: {
          line: 84,
          column: 48
        }
      },
      "37": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "38": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "39": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 83
        }
      },
      "40": {
        start: {
          line: 96,
          column: 32
        },
        end: {
          line: 100,
          column: 10
        }
      },
      "41": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "42": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 112,
          column: 15
        }
      },
      "43": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 51
        }
      },
      "44": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "45": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 55
        }
      },
      "46": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "47": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 54
        }
      },
      "48": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "49": {
        start: {
          line: 142,
          column: 28
        },
        end: {
          line: 142,
          column: 92
        }
      },
      "50": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "51": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 31
        }
      },
      "52": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 174,
          column: 5
        }
      },
      "53": {
        start: {
          line: 147,
          column: 33
        },
        end: {
          line: 147,
          column: 49
        }
      },
      "54": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 43
        }
      },
      "55": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "56": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "57": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "58": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "59": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 56
        }
      },
      "60": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 173,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 10
          },
          end: {
            line: 18,
            column: 11
          }
        },
        loc: {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 18
          }
        },
        loc: {
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 25
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 75,
            column: 15
          },
          end: {
            line: 75,
            column: 19
          }
        },
        loc: {
          start: {
            line: 75,
            column: 25
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 75
      },
      "6": {
        name: "DELETE",
        decl: {
          start: {
            line: 140,
            column: 15
          },
          end: {
            line: 140,
            column: 21
          }
        },
        loc: {
          start: {
            line: 140,
            column: 27
          },
          end: {
            line: 175,
            column: 1
          }
        },
        line: 140
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 64
          },
          end: {
            line: 46,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 64
          },
          end: {
            line: 46,
            column: 85
          }
        }, {
          start: {
            line: 46,
            column: 89
          },
          end: {
            line: 46,
            column: 90
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 16
          }
        }, {
          start: {
            line: 86,
            column: 20
          },
          end: {
            line: 86,
            column: 39
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 94,
            column: 61
          },
          end: {
            line: 94,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 61
          },
          end: {
            line: 94,
            column: 74
          }
        }, {
          start: {
            line: 94,
            column: 78
          },
          end: {
            line: 94,
            column: 79
          }
        }],
        line: 94
      },
      "8": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: 114,
            column: 15
          },
          end: {
            line: 124,
            column: 9
          }
        }],
        line: 102
      },
      "9": {
        loc: {
          start: {
            line: 110,
            column: 33
          },
          end: {
            line: 110,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 33
          },
          end: {
            line: 110,
            column: 44
          }
        }, {
          start: {
            line: 110,
            column: 48
          },
          end: {
            line: 110,
            column: 75
          }
        }],
        line: 110
      },
      "10": {
        loc: {
          start: {
            line: 127,
            column: 21
          },
          end: {
            line: 127,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 127,
            column: 39
          },
          end: {
            line: 127,
            column: 69
          }
        }, {
          start: {
            line: 127,
            column: 72
          },
          end: {
            line: 127,
            column: 102
          }
        }],
        line: 127
      },
      "11": {
        loc: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "12": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/settings/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { requirePermission } from '@/lib/utils/middleware';\n\n// GET: Retrieve all system settings or a specific setting by key\nexport async function GET(req: NextRequest) {\n    try {\n        const { searchParams } = new URL(req.url);\n        const key = searchParams.get('key');\n\n        // If key is provided, return just that setting (no permission check for specific key)\n        if (key) {\n            console.log(`Fetching specific setting: ${key}`);\n            const setting = await prisma.systemSettings.findUnique({\n                where: { key }\n            });\n\n            if (!setting) {\n                console.log(`Setting not found: ${key}`);\n                return NextResponse.json({\n                    success: false,\n                    message: 'Setting not found'\n                }, { status: 404 });\n            }\n\n            console.log(`Setting found: ${key}, value length: ${setting.value?.length || 0}`);\n            return NextResponse.json({\n                success: true,\n                setting\n            });\n        }\n\n        // If fetching all settings, require permission\n        const permissionError = await requirePermission('settings:manage')(req);\n        if (permissionError) {\n            return permissionError;\n        }\n\n        // Otherwise return all settings\n        console.log('Fetching all settings');\n        const settings = await prisma.systemSettings.findMany();\n        console.log(`Found ${settings.length} settings`);\n\n        return NextResponse.json({\n            success: true,\n            settings\n        });\n    } catch (error) {\n        console.error('Error fetching settings:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to fetch settings' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST: Create or update system settings\nexport async function POST(req: NextRequest) {\n    // Check for 'settings:manage' permission\n    const permissionError = await requirePermission('settings:manage')(req);\n    if (permissionError) {\n        console.error('Permission denied for settings:manage');\n        return permissionError;\n    }\n\n    try {\n        const data = await req.json();\n        const { key, value, description } = data;\n\n        // Validate input\n        if (!key || value === undefined) {\n            return NextResponse.json(\n                { success: false, message: 'Key and value are required' },\n                { status: 400 }\n            );\n        }\n\n        console.log(`Saving setting: ${key}, value length: ${value?.length || 0}`);\n\n        // Check if setting exists\n        const existingSetting = await prisma.systemSettings.findUnique({\n            where: { key }\n        });\n\n        let setting;\n        if (existingSetting) {\n            // Update existing setting\n            setting = await prisma.systemSettings.update({\n                where: { key },\n                data: {\n                    value,\n                    description: description || existingSetting.description\n                }\n            });\n            console.log(`Updated setting: ${key}`);\n        } else {\n            // Create new setting\n            setting = await prisma.systemSettings.create({\n                data: {\n                    key,\n                    value,\n                    description\n                }\n            });\n            console.log(`Created new setting: ${key}`);\n        }\n\n        return NextResponse.json({\n            success: true,\n            message: existingSetting ? 'Setting updated successfully' : 'Setting created successfully',\n            setting\n        });\n    } catch (error) {\n        console.error('Error saving setting:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to save setting' },\n            { status: 500 }\n        );\n    }\n}\n\n// DELETE: Delete a system setting\nexport async function DELETE(req: NextRequest) {\n    // Check for 'settings:manage' permission\n    const permissionError = await requirePermission('settings:manage')(req);\n    if (permissionError) {\n        return permissionError;\n    }\n\n    try {\n        const { searchParams } = new URL(req.url);\n        const key = searchParams.get('key');\n\n        if (!key) {\n            return NextResponse.json(\n                { success: false, message: 'Key parameter is required' },\n                { status: 400 }\n            );\n        }\n\n        await prisma.systemSettings.delete({\n            where: { key }\n        });\n\n        return NextResponse.json({\n            success: true,\n            message: 'Setting deleted successfully'\n        });\n    } catch (error) {\n        console.error('Error deleting setting:', error);\n        return NextResponse.json(\n            { success: false, message: 'Failed to delete setting' },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["DELETE", "GET", "POST", "req", "searchParams", "URL", "url", "key", "get", "console", "log", "setting", "prisma", "systemSettings", "findUnique", "where", "NextResponse", "json", "success", "message", "status", "value", "length", "permissionError", "requirePermission", "settings", "findMany", "error", "data", "description", "undefined", "existingSetting", "update", "create", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "57ca51384e3394333c6741d75d5311dbf5a764ac"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mp5pubv8y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mp5pubv8y();
cov_2mp5pubv8y().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2mp5pubv8y().f[0]++;
  cov_2mp5pubv8y().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2mp5pubv8y().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_2mp5pubv8y().f[1]++;
    cov_2mp5pubv8y().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_2mp5pubv8y().f[2]++;
    cov_2mp5pubv8y().s[5]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2mp5pubv8y().f[3]++;
    cov_2mp5pubv8y().s[6]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2mp5pubv8y().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_2mp5pubv8y().s[8]++, require("../../../lib/prisma"));
const _middleware =
/* istanbul ignore next */
(cov_2mp5pubv8y().s[9]++, require("../../../lib/utils/middleware"));
async function GET(req) {
  /* istanbul ignore next */
  cov_2mp5pubv8y().f[4]++;
  cov_2mp5pubv8y().s[10]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2mp5pubv8y().s[11]++, new URL(req.url));
    const key =
    /* istanbul ignore next */
    (cov_2mp5pubv8y().s[12]++, searchParams.get("key"));
    // If key is provided, return just that setting (no permission check for specific key)
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[13]++;
    if (key) {
      /* istanbul ignore next */
      cov_2mp5pubv8y().b[0][0]++;
      cov_2mp5pubv8y().s[14]++;
      console.log(`Fetching specific setting: ${key}`);
      const setting =
      /* istanbul ignore next */
      (cov_2mp5pubv8y().s[15]++, await _prisma.prisma.systemSettings.findUnique({
        where: {
          key
        }
      }));
      /* istanbul ignore next */
      cov_2mp5pubv8y().s[16]++;
      if (!setting) {
        /* istanbul ignore next */
        cov_2mp5pubv8y().b[1][0]++;
        cov_2mp5pubv8y().s[17]++;
        console.log(`Setting not found: ${key}`);
        /* istanbul ignore next */
        cov_2mp5pubv8y().s[18]++;
        return _server.NextResponse.json({
          success: false,
          message: "Setting not found"
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_2mp5pubv8y().b[1][1]++;
      }
      cov_2mp5pubv8y().s[19]++;
      console.log(`Setting found: ${key}, value length: ${
      /* istanbul ignore next */
      (cov_2mp5pubv8y().b[2][0]++, setting.value?.length) ||
      /* istanbul ignore next */
      (cov_2mp5pubv8y().b[2][1]++, 0)}`);
      /* istanbul ignore next */
      cov_2mp5pubv8y().s[20]++;
      return _server.NextResponse.json({
        success: true,
        setting
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mp5pubv8y().b[0][1]++;
    }
    // If fetching all settings, require permission
    const permissionError =
    /* istanbul ignore next */
    (cov_2mp5pubv8y().s[21]++, await (0, _middleware.requirePermission)("settings:manage")(req));
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[22]++;
    if (permissionError) {
      /* istanbul ignore next */
      cov_2mp5pubv8y().b[3][0]++;
      cov_2mp5pubv8y().s[23]++;
      return permissionError;
    } else
    /* istanbul ignore next */
    {
      cov_2mp5pubv8y().b[3][1]++;
    }
    // Otherwise return all settings
    cov_2mp5pubv8y().s[24]++;
    console.log("Fetching all settings");
    const settings =
    /* istanbul ignore next */
    (cov_2mp5pubv8y().s[25]++, await _prisma.prisma.systemSettings.findMany());
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[26]++;
    console.log(`Found ${settings.length} settings`);
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[27]++;
    return _server.NextResponse.json({
      success: true,
      settings
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[28]++;
    console.error("Error fetching settings:", error);
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[29]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to fetch settings"
    }, {
      status: 500
    });
  }
}
async function POST(req) {
  /* istanbul ignore next */
  cov_2mp5pubv8y().f[5]++;
  // Check for 'settings:manage' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2mp5pubv8y().s[30]++, await (0, _middleware.requirePermission)("settings:manage")(req));
  /* istanbul ignore next */
  cov_2mp5pubv8y().s[31]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2mp5pubv8y().b[4][0]++;
    cov_2mp5pubv8y().s[32]++;
    console.error("Permission denied for settings:manage");
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[33]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2mp5pubv8y().b[4][1]++;
  }
  cov_2mp5pubv8y().s[34]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_2mp5pubv8y().s[35]++, await req.json());
    const {
      key,
      value,
      description
    } =
    /* istanbul ignore next */
    (cov_2mp5pubv8y().s[36]++, data);
    // Validate input
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[37]++;
    if (
    /* istanbul ignore next */
    (cov_2mp5pubv8y().b[6][0]++, !key) ||
    /* istanbul ignore next */
    (cov_2mp5pubv8y().b[6][1]++, value === undefined)) {
      /* istanbul ignore next */
      cov_2mp5pubv8y().b[5][0]++;
      cov_2mp5pubv8y().s[38]++;
      return _server.NextResponse.json({
        success: false,
        message: "Key and value are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mp5pubv8y().b[5][1]++;
    }
    cov_2mp5pubv8y().s[39]++;
    console.log(`Saving setting: ${key}, value length: ${
    /* istanbul ignore next */
    (cov_2mp5pubv8y().b[7][0]++, value?.length) ||
    /* istanbul ignore next */
    (cov_2mp5pubv8y().b[7][1]++, 0)}`);
    // Check if setting exists
    const existingSetting =
    /* istanbul ignore next */
    (cov_2mp5pubv8y().s[40]++, await _prisma.prisma.systemSettings.findUnique({
      where: {
        key
      }
    }));
    let setting;
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[41]++;
    if (existingSetting) {
      /* istanbul ignore next */
      cov_2mp5pubv8y().b[8][0]++;
      cov_2mp5pubv8y().s[42]++;
      // Update existing setting
      setting = await _prisma.prisma.systemSettings.update({
        where: {
          key
        },
        data: {
          value,
          description:
          /* istanbul ignore next */
          (cov_2mp5pubv8y().b[9][0]++, description) ||
          /* istanbul ignore next */
          (cov_2mp5pubv8y().b[9][1]++, existingSetting.description)
        }
      });
      /* istanbul ignore next */
      cov_2mp5pubv8y().s[43]++;
      console.log(`Updated setting: ${key}`);
    } else {
      /* istanbul ignore next */
      cov_2mp5pubv8y().b[8][1]++;
      cov_2mp5pubv8y().s[44]++;
      // Create new setting
      setting = await _prisma.prisma.systemSettings.create({
        data: {
          key,
          value,
          description
        }
      });
      /* istanbul ignore next */
      cov_2mp5pubv8y().s[45]++;
      console.log(`Created new setting: ${key}`);
    }
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[46]++;
    return _server.NextResponse.json({
      success: true,
      message: existingSetting ?
      /* istanbul ignore next */
      (cov_2mp5pubv8y().b[10][0]++, "Setting updated successfully") :
      /* istanbul ignore next */
      (cov_2mp5pubv8y().b[10][1]++, "Setting created successfully"),
      setting
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[47]++;
    console.error("Error saving setting:", error);
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[48]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to save setting"
    }, {
      status: 500
    });
  }
}
async function DELETE(req) {
  /* istanbul ignore next */
  cov_2mp5pubv8y().f[6]++;
  // Check for 'settings:manage' permission
  const permissionError =
  /* istanbul ignore next */
  (cov_2mp5pubv8y().s[49]++, await (0, _middleware.requirePermission)("settings:manage")(req));
  /* istanbul ignore next */
  cov_2mp5pubv8y().s[50]++;
  if (permissionError) {
    /* istanbul ignore next */
    cov_2mp5pubv8y().b[11][0]++;
    cov_2mp5pubv8y().s[51]++;
    return permissionError;
  } else
  /* istanbul ignore next */
  {
    cov_2mp5pubv8y().b[11][1]++;
  }
  cov_2mp5pubv8y().s[52]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2mp5pubv8y().s[53]++, new URL(req.url));
    const key =
    /* istanbul ignore next */
    (cov_2mp5pubv8y().s[54]++, searchParams.get("key"));
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[55]++;
    if (!key) {
      /* istanbul ignore next */
      cov_2mp5pubv8y().b[12][0]++;
      cov_2mp5pubv8y().s[56]++;
      return _server.NextResponse.json({
        success: false,
        message: "Key parameter is required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mp5pubv8y().b[12][1]++;
    }
    cov_2mp5pubv8y().s[57]++;
    await _prisma.prisma.systemSettings.delete({
      where: {
        key
      }
    });
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[58]++;
    return _server.NextResponse.json({
      success: true,
      message: "Setting deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[59]++;
    console.error("Error deleting setting:", error);
    /* istanbul ignore next */
    cov_2mp5pubv8y().s[60]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to delete setting"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,