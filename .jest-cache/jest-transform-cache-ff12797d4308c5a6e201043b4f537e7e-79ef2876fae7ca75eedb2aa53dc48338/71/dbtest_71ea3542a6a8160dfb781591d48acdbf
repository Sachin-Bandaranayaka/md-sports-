cd5cd3b26b6473b97c4a2f458884fa40
// Fixed Database connection and configuration tests
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _db = require("../../src/lib/db");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock Prisma operations
const mockPrismaOperations = {
    findMany: _globals.jest.fn(),
    findUnique: _globals.jest.fn(),
    findFirst: _globals.jest.fn(),
    create: _globals.jest.fn(),
    update: _globals.jest.fn(),
    delete: _globals.jest.fn(),
    count: _globals.jest.fn(),
    aggregate: _globals.jest.fn(),
    upsert: _globals.jest.fn(),
    deleteMany: _globals.jest.fn(),
    updateMany: _globals.jest.fn()
};
const mockPrisma = {
    user: {
        ...mockPrismaOperations
    },
    product: {
        ...mockPrismaOperations
    },
    customer: {
        ...mockPrismaOperations
    },
    invoice: {
        ...mockPrismaOperations
    },
    inventoryItem: {
        ...mockPrismaOperations
    },
    category: {
        ...mockPrismaOperations
    },
    supplier: {
        ...mockPrismaOperations
    },
    purchaseInvoice: {
        ...mockPrismaOperations
    },
    purchaseInvoiceItem: {
        ...mockPrismaOperations
    },
    salesInvoice: {
        ...mockPrismaOperations
    },
    salesInvoiceItem: {
        ...mockPrismaOperations
    },
    $connect: _globals.jest.fn(),
    $disconnect: _globals.jest.fn(),
    $transaction: _globals.jest.fn(),
    $executeRaw: _globals.jest.fn(),
    $queryRaw: _globals.jest.fn(),
    $on: _globals.jest.fn(),
    $use: _globals.jest.fn()
};
// Mock prisma module
_globals.jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: mockPrisma
    }));
// Mock the process.env for database configuration
const originalEnv = process.env;
beforeAll(()=>{
    process.env = {
        ...originalEnv,
        DATABASE_URL: "postgresql://test:test@localhost:5432/test_db",
        NODE_ENV: "test"
    };
});
afterAll(()=>{
    process.env = originalEnv;
});
describe("Database Library", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    describe("db export", ()=>{
        it("should export db as the prisma client", ()=>{
            expect(_db.db).toBeDefined();
            expect(_db.db).toBe(mockPrisma);
        });
        it("should have user methods", ()=>{
            expect(_db.db.user).toBeDefined();
            expect(_db.db.user.findMany).toBeDefined();
            expect(_db.db.user.findUnique).toBeDefined();
            expect(_db.db.user.create).toBeDefined();
            expect(_db.db.user.update).toBeDefined();
            expect(_db.db.user.delete).toBeDefined();
        });
        it("should have product methods", ()=>{
            expect(_db.db.product).toBeDefined();
            expect(_db.db.product.findMany).toBeDefined();
            expect(_db.db.product.findUnique).toBeDefined();
            expect(_db.db.product.create).toBeDefined();
            expect(_db.db.product.update).toBeDefined();
            expect(_db.db.product.delete).toBeDefined();
        });
        it("should have connection methods", ()=>{
            expect(_db.db.$connect).toBeDefined();
            expect(_db.db.$disconnect).toBeDefined();
            expect(_db.db.$transaction).toBeDefined();
        });
    });
    describe("prisma export", ()=>{
        it("should export prisma as the same client", ()=>{
            expect(_db.prisma).toBeDefined();
            expect(_db.prisma).toBe(mockPrisma);
            expect(_db.prisma).toBe(_db.db);
        });
    });
    describe("default export", ()=>{
        it("should export db as default", async ()=>{
            const defaultExport = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../src/lib/db")));
            expect(defaultExport.default).toBeDefined();
            expect(defaultExport.default).toBe(_db.db);
            expect(defaultExport.default).toBe(mockPrisma);
        });
    });
    describe("database operations", ()=>{
        it("should allow user queries", async ()=>{
            const mockUser = {
                id: 1,
                name: "Test User",
                email: "test@example.com"
            };
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            const result = await _db.db.user.findUnique({
                where: {
                    id: 1
                }
            });
            expect(result).toEqual(mockUser);
            expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: {
                    id: 1
                }
            });
        });
        it("should allow product queries", async ()=>{
            const mockProduct = {
                id: "product1",
                name: "Test Product"
            };
            mockPrisma.product.findUnique.mockResolvedValue(mockProduct);
            const result = await _db.db.product.findUnique({
                where: {
                    id: "product1"
                }
            });
            expect(result).toEqual(mockProduct);
            expect(mockPrisma.product.findUnique).toHaveBeenCalledWith({
                where: {
                    id: "product1"
                }
            });
        });
        it("should allow transactions", async ()=>{
            const mockResult = {
                success: true
            };
            mockPrisma.$transaction.mockResolvedValue(mockResult);
            const transactionFn = _globals.jest.fn().mockResolvedValue(mockResult);
            const result = await _db.db.$transaction(transactionFn);
            expect(result).toEqual(mockResult);
            expect(mockPrisma.$transaction).toHaveBeenCalledWith(transactionFn);
        });
        it("should handle connection operations", async ()=>{
            mockPrisma.$connect.mockResolvedValue(undefined);
            mockPrisma.$disconnect.mockResolvedValue(undefined);
            await _db.db.$connect();
            await _db.db.$disconnect();
            expect(mockPrisma.$connect).toHaveBeenCalled();
            expect(mockPrisma.$disconnect).toHaveBeenCalled();
        });
    });
    describe("error handling", ()=>{
        it("should propagate database errors", async ()=>{
            const dbError = new Error("Database connection failed");
            mockPrisma.user.findUnique.mockRejectedValue(dbError);
            await expect(_db.db.user.findUnique({
                where: {
                    id: 1
                }
            })).rejects.toThrow("Database connection failed");
        });
        it("should propagate transaction errors", async ()=>{
            const transactionError = new Error("Transaction failed");
            mockPrisma.$transaction.mockRejectedValue(transactionError);
            const transactionFn = _globals.jest.fn();
            await expect(_db.db.$transaction(transactionFn)).rejects.toThrow("Transaction failed");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,