{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/db.test.ts"],"sourcesContent":["// Fixed Database connection and configuration tests\n\nimport { jest } from '@jest/globals';\n\n// Mock Prisma operations\nconst mockPrismaOperations = {\n  findMany: jest.fn(),\n  findUnique: jest.fn(),\n  findFirst: jest.fn(),\n  create: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n  count: jest.fn(),\n  aggregate: jest.fn(),\n  upsert: jest.fn(),\n  deleteMany: jest.fn(),\n  updateMany: jest.fn(),\n};\n\nconst mockPrisma = {\n  user: { ...mockPrismaOperations },\n  product: { ...mockPrismaOperations },\n  customer: { ...mockPrismaOperations },\n  invoice: { ...mockPrismaOperations },\n  inventoryItem: { ...mockPrismaOperations },\n  category: { ...mockPrismaOperations },\n  supplier: { ...mockPrismaOperations },\n  purchaseInvoice: { ...mockPrismaOperations },\n  purchaseInvoiceItem: { ...mockPrismaOperations },\n  salesInvoice: { ...mockPrismaOperations },\n  salesInvoiceItem: { ...mockPrismaOperations },\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $transaction: jest.fn(),\n  $executeRaw: jest.fn(),\n  $queryRaw: jest.fn(),\n  $on: jest.fn(),\n  $use: jest.fn(),\n};\n\n// Mock prisma module\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\n// Mock the process.env for database configuration\nconst originalEnv = process.env;\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\nimport { db, prisma } from '@/lib/db';\n\ndescribe('Database Library', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('db export', () => {\n    it('should export db as the prisma client', () => {\n      expect(db).toBeDefined();\n      expect(db).toBe(mockPrisma);\n    });\n\n    it('should have user methods', () => {\n      expect(db.user).toBeDefined();\n      expect(db.user.findMany).toBeDefined();\n      expect(db.user.findUnique).toBeDefined();\n      expect(db.user.create).toBeDefined();\n      expect(db.user.update).toBeDefined();\n      expect(db.user.delete).toBeDefined();\n    });\n\n    it('should have product methods', () => {\n      expect(db.product).toBeDefined();\n      expect(db.product.findMany).toBeDefined();\n      expect(db.product.findUnique).toBeDefined();\n      expect(db.product.create).toBeDefined();\n      expect(db.product.update).toBeDefined();\n      expect(db.product.delete).toBeDefined();\n    });\n\n    it('should have connection methods', () => {\n      expect(db.$connect).toBeDefined();\n      expect(db.$disconnect).toBeDefined();\n      expect(db.$transaction).toBeDefined();\n    });\n  });\n\n  describe('prisma export', () => {\n    it('should export prisma as the same client', () => {\n      expect(prisma).toBeDefined();\n      expect(prisma).toBe(mockPrisma);\n      expect(prisma).toBe(db);\n    });\n  });\n\n  describe('default export', () => {\n    it('should export db as default', async () => {\n      const defaultExport = await import('@/lib/db');\n      expect(defaultExport.default).toBeDefined();\n      expect(defaultExport.default).toBe(db);\n      expect(defaultExport.default).toBe(mockPrisma);\n    });\n  });\n\n  describe('database operations', () => {\n    it('should allow user queries', async () => {\n      const mockUser = { id: 1, name: 'Test User', email: 'test@example.com' };\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n\n      const result = await db.user.findUnique({ where: { id: 1 } });\n      \n      expect(result).toEqual(mockUser);\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({ where: { id: 1 } });\n    });\n\n    it('should allow product queries', async () => {\n      const mockProduct = { id: 'product1', name: 'Test Product' };\n      mockPrisma.product.findUnique.mockResolvedValue(mockProduct);\n\n      const result = await db.product.findUnique({ where: { id: 'product1' } });\n      \n      expect(result).toEqual(mockProduct);\n      expect(mockPrisma.product.findUnique).toHaveBeenCalledWith({ where: { id: 'product1' } });\n    });\n\n    it('should allow transactions', async () => {\n      const mockResult = { success: true };\n      mockPrisma.$transaction.mockResolvedValue(mockResult);\n\n      const transactionFn = jest.fn().mockResolvedValue(mockResult);\n      const result = await db.$transaction(transactionFn);\n      \n      expect(result).toEqual(mockResult);\n      expect(mockPrisma.$transaction).toHaveBeenCalledWith(transactionFn);\n    });\n\n    it('should handle connection operations', async () => {\n      mockPrisma.$connect.mockResolvedValue(undefined);\n      mockPrisma.$disconnect.mockResolvedValue(undefined);\n\n      await db.$connect();\n      await db.$disconnect();\n      \n      expect(mockPrisma.$connect).toHaveBeenCalled();\n      expect(mockPrisma.$disconnect).toHaveBeenCalled();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should propagate database errors', async () => {\n      const dbError = new Error('Database connection failed');\n      mockPrisma.user.findUnique.mockRejectedValue(dbError);\n\n      await expect(db.user.findUnique({ where: { id: 1 } })).rejects.toThrow('Database connection failed');\n    });\n\n    it('should propagate transaction errors', async () => {\n      const transactionError = new Error('Transaction failed');\n      mockPrisma.$transaction.mockRejectedValue(transactionError);\n\n      const transactionFn = jest.fn();\n      await expect(db.$transaction(transactionFn)).rejects.toThrow('Transaction failed');\n    });\n  });\n});"],"names":["mockPrismaOperations","findMany","jest","fn","findUnique","findFirst","create","update","delete","count","aggregate","upsert","deleteMany","updateMany","mockPrisma","user","product","customer","invoice","inventoryItem","category","supplier","purchaseInvoice","purchaseInvoiceItem","salesInvoice","salesInvoiceItem","$connect","$disconnect","$transaction","$executeRaw","$queryRaw","$on","$use","mock","__esModule","default","originalEnv","process","env","beforeAll","DATABASE_URL","NODE_ENV","afterAll","describe","beforeEach","clearAllMocks","it","expect","db","toBeDefined","toBe","prisma","defaultExport","mockUser","id","name","email","mockResolvedValue","result","where","toEqual","toHaveBeenCalledWith","mockProduct","mockResult","success","transactionFn","undefined","toHaveBeenCalled","dbError","Error","mockRejectedValue","rejects","toThrow","transactionError"],"mappings":"AAAA,oDAAoD;;;;;yBAE/B;oBA0DM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxD3B,yBAAyB;AACzB,MAAMA,uBAAuB;IAC3BC,UAAUC,aAAI,CAACC,EAAE;IACjBC,YAAYF,aAAI,CAACC,EAAE;IACnBE,WAAWH,aAAI,CAACC,EAAE;IAClBG,QAAQJ,aAAI,CAACC,EAAE;IACfI,QAAQL,aAAI,CAACC,EAAE;IACfK,QAAQN,aAAI,CAACC,EAAE;IACfM,OAAOP,aAAI,CAACC,EAAE;IACdO,WAAWR,aAAI,CAACC,EAAE;IAClBQ,QAAQT,aAAI,CAACC,EAAE;IACfS,YAAYV,aAAI,CAACC,EAAE;IACnBU,YAAYX,aAAI,CAACC,EAAE;AACrB;AAEA,MAAMW,aAAa;IACjBC,MAAM;QAAE,GAAGf,oBAAoB;IAAC;IAChCgB,SAAS;QAAE,GAAGhB,oBAAoB;IAAC;IACnCiB,UAAU;QAAE,GAAGjB,oBAAoB;IAAC;IACpCkB,SAAS;QAAE,GAAGlB,oBAAoB;IAAC;IACnCmB,eAAe;QAAE,GAAGnB,oBAAoB;IAAC;IACzCoB,UAAU;QAAE,GAAGpB,oBAAoB;IAAC;IACpCqB,UAAU;QAAE,GAAGrB,oBAAoB;IAAC;IACpCsB,iBAAiB;QAAE,GAAGtB,oBAAoB;IAAC;IAC3CuB,qBAAqB;QAAE,GAAGvB,oBAAoB;IAAC;IAC/CwB,cAAc;QAAE,GAAGxB,oBAAoB;IAAC;IACxCyB,kBAAkB;QAAE,GAAGzB,oBAAoB;IAAC;IAC5C0B,UAAUxB,aAAI,CAACC,EAAE;IACjBwB,aAAazB,aAAI,CAACC,EAAE;IACpByB,cAAc1B,aAAI,CAACC,EAAE;IACrB0B,aAAa3B,aAAI,CAACC,EAAE;IACpB2B,WAAW5B,aAAI,CAACC,EAAE;IAClB4B,KAAK7B,aAAI,CAACC,EAAE;IACZ6B,MAAM9B,aAAI,CAACC,EAAE;AACf;AAEA,qBAAqB;AACrBD,aAAI,CAAC+B,IAAI,CAAC,gBAAgB,IAAO,CAAA;QAC/BC,YAAY;QACZC,SAASrB;IACX,CAAA;AAEA,kDAAkD;AAClD,MAAMsB,cAAcC,QAAQC,GAAG;AAC/BC,UAAU;IACRF,QAAQC,GAAG,GAAG;QACZ,GAAGF,WAAW;QACdI,cAAc;QACdC,UAAU;IACZ;AACF;AAEAC,SAAS;IACPL,QAAQC,GAAG,GAAGF;AAChB;AAIAO,SAAS,oBAAoB;IAC3BC,WAAW;QACT1C,aAAI,CAAC2C,aAAa;IACpB;IAEAF,SAAS,aAAa;QACpBG,GAAG,yCAAyC;YAC1CC,OAAOC,MAAE,EAAEC,WAAW;YACtBF,OAAOC,MAAE,EAAEE,IAAI,CAACpC;QAClB;QAEAgC,GAAG,4BAA4B;YAC7BC,OAAOC,MAAE,CAACjC,IAAI,EAAEkC,WAAW;YAC3BF,OAAOC,MAAE,CAACjC,IAAI,CAACd,QAAQ,EAAEgD,WAAW;YACpCF,OAAOC,MAAE,CAACjC,IAAI,CAACX,UAAU,EAAE6C,WAAW;YACtCF,OAAOC,MAAE,CAACjC,IAAI,CAACT,MAAM,EAAE2C,WAAW;YAClCF,OAAOC,MAAE,CAACjC,IAAI,CAACR,MAAM,EAAE0C,WAAW;YAClCF,OAAOC,MAAE,CAACjC,IAAI,CAACP,MAAM,EAAEyC,WAAW;QACpC;QAEAH,GAAG,+BAA+B;YAChCC,OAAOC,MAAE,CAAChC,OAAO,EAAEiC,WAAW;YAC9BF,OAAOC,MAAE,CAAChC,OAAO,CAACf,QAAQ,EAAEgD,WAAW;YACvCF,OAAOC,MAAE,CAAChC,OAAO,CAACZ,UAAU,EAAE6C,WAAW;YACzCF,OAAOC,MAAE,CAAChC,OAAO,CAACV,MAAM,EAAE2C,WAAW;YACrCF,OAAOC,MAAE,CAAChC,OAAO,CAACT,MAAM,EAAE0C,WAAW;YACrCF,OAAOC,MAAE,CAAChC,OAAO,CAACR,MAAM,EAAEyC,WAAW;QACvC;QAEAH,GAAG,kCAAkC;YACnCC,OAAOC,MAAE,CAACtB,QAAQ,EAAEuB,WAAW;YAC/BF,OAAOC,MAAE,CAACrB,WAAW,EAAEsB,WAAW;YAClCF,OAAOC,MAAE,CAACpB,YAAY,EAAEqB,WAAW;QACrC;IACF;IAEAN,SAAS,iBAAiB;QACxBG,GAAG,2CAA2C;YAC5CC,OAAOI,UAAM,EAAEF,WAAW;YAC1BF,OAAOI,UAAM,EAAED,IAAI,CAACpC;YACpBiC,OAAOI,UAAM,EAAED,IAAI,CAACF,MAAE;QACxB;IACF;IAEAL,SAAS,kBAAkB;QACzBG,GAAG,+BAA+B;YAChC,MAAMM,gBAAgB,MAAM,mEAAA,QAAO;YACnCL,OAAOK,cAAcjB,OAAO,EAAEc,WAAW;YACzCF,OAAOK,cAAcjB,OAAO,EAAEe,IAAI,CAACF,MAAE;YACrCD,OAAOK,cAAcjB,OAAO,EAAEe,IAAI,CAACpC;QACrC;IACF;IAEA6B,SAAS,uBAAuB;QAC9BG,GAAG,6BAA6B;YAC9B,MAAMO,WAAW;gBAAEC,IAAI;gBAAGC,MAAM;gBAAaC,OAAO;YAAmB;YACvE1C,WAAWC,IAAI,CAACX,UAAU,CAACqD,iBAAiB,CAACJ;YAE7C,MAAMK,SAAS,MAAMV,MAAE,CAACjC,IAAI,CAACX,UAAU,CAAC;gBAAEuD,OAAO;oBAAEL,IAAI;gBAAE;YAAE;YAE3DP,OAAOW,QAAQE,OAAO,CAACP;YACvBN,OAAOjC,WAAWC,IAAI,CAACX,UAAU,EAAEyD,oBAAoB,CAAC;gBAAEF,OAAO;oBAAEL,IAAI;gBAAE;YAAE;QAC7E;QAEAR,GAAG,gCAAgC;YACjC,MAAMgB,cAAc;gBAAER,IAAI;gBAAYC,MAAM;YAAe;YAC3DzC,WAAWE,OAAO,CAACZ,UAAU,CAACqD,iBAAiB,CAACK;YAEhD,MAAMJ,SAAS,MAAMV,MAAE,CAAChC,OAAO,CAACZ,UAAU,CAAC;gBAAEuD,OAAO;oBAAEL,IAAI;gBAAW;YAAE;YAEvEP,OAAOW,QAAQE,OAAO,CAACE;YACvBf,OAAOjC,WAAWE,OAAO,CAACZ,UAAU,EAAEyD,oBAAoB,CAAC;gBAAEF,OAAO;oBAAEL,IAAI;gBAAW;YAAE;QACzF;QAEAR,GAAG,6BAA6B;YAC9B,MAAMiB,aAAa;gBAAEC,SAAS;YAAK;YACnClD,WAAWc,YAAY,CAAC6B,iBAAiB,CAACM;YAE1C,MAAME,gBAAgB/D,aAAI,CAACC,EAAE,GAAGsD,iBAAiB,CAACM;YAClD,MAAML,SAAS,MAAMV,MAAE,CAACpB,YAAY,CAACqC;YAErClB,OAAOW,QAAQE,OAAO,CAACG;YACvBhB,OAAOjC,WAAWc,YAAY,EAAEiC,oBAAoB,CAACI;QACvD;QAEAnB,GAAG,uCAAuC;YACxChC,WAAWY,QAAQ,CAAC+B,iBAAiB,CAACS;YACtCpD,WAAWa,WAAW,CAAC8B,iBAAiB,CAACS;YAEzC,MAAMlB,MAAE,CAACtB,QAAQ;YACjB,MAAMsB,MAAE,CAACrB,WAAW;YAEpBoB,OAAOjC,WAAWY,QAAQ,EAAEyC,gBAAgB;YAC5CpB,OAAOjC,WAAWa,WAAW,EAAEwC,gBAAgB;QACjD;IACF;IAEAxB,SAAS,kBAAkB;QACzBG,GAAG,oCAAoC;YACrC,MAAMsB,UAAU,IAAIC,MAAM;YAC1BvD,WAAWC,IAAI,CAACX,UAAU,CAACkE,iBAAiB,CAACF;YAE7C,MAAMrB,OAAOC,MAAE,CAACjC,IAAI,CAACX,UAAU,CAAC;gBAAEuD,OAAO;oBAAEL,IAAI;gBAAE;YAAE,IAAIiB,OAAO,CAACC,OAAO,CAAC;QACzE;QAEA1B,GAAG,uCAAuC;YACxC,MAAM2B,mBAAmB,IAAIJ,MAAM;YACnCvD,WAAWc,YAAY,CAAC0C,iBAAiB,CAACG;YAE1C,MAAMR,gBAAgB/D,aAAI,CAACC,EAAE;YAC7B,MAAM4C,OAAOC,MAAE,CAACpB,YAAY,CAACqC,gBAAgBM,OAAO,CAACC,OAAO,CAAC;QAC/D;IACF;AACF"}