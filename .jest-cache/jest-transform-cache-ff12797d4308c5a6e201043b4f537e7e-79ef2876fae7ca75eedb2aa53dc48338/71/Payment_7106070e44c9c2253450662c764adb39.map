{"version":3,"names":["_default","Payment","_sequelize","Model","cov_17kmjs6918","s","init","id","type","DataTypes","INTEGER","autoIncrement","primaryKey","invoiceId","allowNull","amount","DECIMAL","validate","min","method","ENUM","defaultValue","reference","STRING","comment","paymentDate","DATE","NOW","sequelize","_db","default","modelName","tableName","timestamps","hooks","afterCreate","payment","f","Invoice","model","invoice","findByPk","b","payments","findAll","where","attributes","fn","col","raw","totalPaid","parseFloat","invoiceTotal","get","paymentStatus","update"],"sources":["/Users/sachin/Documents/md-sports-/src/lib/models/Payment.ts"],"sourcesContent":["import { Model, DataTypes } from 'sequelize';\nimport sequelize from '../db';\n\nclass Payment extends Model {\n    public id!: number;\n    public invoiceId!: number;\n    public amount!: number;\n    public method!: string;\n    public reference!: string;\n    public paymentDate!: Date;\n    public readonly createdAt!: Date;\n    public readonly updatedAt!: Date;\n}\n\nPayment.init({\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    },\n    invoiceId: {\n        type: DataTypes.INTEGER,\n        allowNull: false\n    },\n    amount: {\n        type: DataTypes.DECIMAL(10, 2),\n        allowNull: false,\n        validate: {\n            min: 0.01\n        }\n    },\n    method: {\n        type: DataTypes.ENUM('cash', 'card', 'bank_transfer', 'cheque', 'other'),\n        allowNull: false,\n        defaultValue: 'cash'\n    },\n    reference: {\n        type: DataTypes.STRING(50),\n        allowNull: true,\n        comment: 'Reference number for non-cash payments'\n    },\n    paymentDate: {\n        type: DataTypes.DATE,\n        allowNull: false,\n        defaultValue: DataTypes.NOW\n    }\n}, {\n    sequelize,\n    modelName: 'payment',\n    tableName: 'payments',\n    timestamps: true,\n    hooks: {\n        afterCreate: async (payment: Payment) => {\n            // Update invoice payment status\n            const Invoice = sequelize.model('invoice');\n            const invoice = await Invoice.findByPk(payment.invoiceId);\n\n            if (invoice) {\n                // Get all payments for this invoice\n                const payments = await Payment.findAll({\n                    where: { invoiceId: payment.invoiceId },\n                    attributes: [\n                        [sequelize.fn('SUM', sequelize.col('amount')), 'totalPaid']\n                    ],\n                    raw: true\n                });\n\n                const totalPaid = parseFloat((payments[0] as any).totalPaid || 0);\n                const invoiceTotal = parseFloat(invoice.get('total') as string);\n\n                // Determine payment status\n                let paymentStatus = 'unpaid';\n                if (totalPaid >= invoiceTotal) {\n                    paymentStatus = 'paid';\n                } else if (totalPaid > 0) {\n                    paymentStatus = 'partial';\n                }\n\n                // Update invoice\n                await invoice.update({ paymentStatus });\n            }\n        }\n    }\n});\n\nexport default Payment; "],"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","ignoreList":[]}