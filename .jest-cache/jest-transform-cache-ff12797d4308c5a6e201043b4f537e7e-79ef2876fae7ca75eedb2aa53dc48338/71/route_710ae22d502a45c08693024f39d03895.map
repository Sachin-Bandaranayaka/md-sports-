{"version":3,"names":["cov_2fpjguojkz","actualCoverage","s","GET","request","f","token","headers","get","replace","b","_server","NextResponse","json","error","status","decoded","_auth","verifyToken","categories","_prisma","prisma","category","findMany","orderBy","name","success","data","console","message","Error","String"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/categories/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { verifyToken } from '@/lib/auth';\n\nexport async function GET(request: NextRequest) {\n    try {\n        const token = request.headers.get('authorization')?.replace('Bearer ', '');\n        if (!token) {\n            return NextResponse.json({ error: 'No token provided' }, { status: 401 });\n        }\n\n        const decoded = await verifyToken(token);\n        if (!decoded) {\n            return NextResponse.json({ error: 'Invalid token: signature verification failed' }, { status: 401 });\n        }\n\n        const categories = await prisma.category.findMany({\n            orderBy: {\n                name: 'asc'\n            }\n        });\n        return NextResponse.json({ success: true, data: categories });\n    } catch (error) {\n        console.error('Error fetching categories:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Failed to fetch categories',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMQ;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAFc;;;;;;WAAAC,GAAA;;;;;kCAJoB;;;kCACnB;;;kCACK;AAErB,eAAeA,IAAIC,OAAoB;EAAA;EAAAJ,cAAA,GAAAK,CAAA;EAAAL,cAAA,GAAAE,CAAA;EAC1C,IAAI;IACA,MAAMI,KAAA;IAAA;IAAA,CAAAN,cAAA,GAAAE,CAAA,OAAQE,OAAA,CAAQG,OAAO,CAACC,GAAG,CAAC,kBAAkBC,OAAA,CAAQ,WAAW;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACvE,IAAI,CAACI,KAAA,EAAO;MAAA;MAAAN,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACR,OAAOS,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAoB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IAC3E;IAAA;IAAA;MAAAf,cAAA,GAAAU,CAAA;IAAA;IAEA,MAAMM,OAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAe,KAAA,CAAAC,WAAW,EAACZ,KAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAClC,IAAI,CAACc,OAAA,EAAS;MAAA;MAAAhB,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAE,CAAA;MACV,OAAOS,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAA+C,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACtG;IAAA;IAAA;MAAAf,cAAA,GAAAU,CAAA;IAAA;IAEA,MAAMS,UAAA;IAAA;IAAA,CAAAnB,cAAA,GAAAE,CAAA,QAAa,MAAMkB,OAAA,CAAAC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC;MAC9CC,OAAA,EAAS;QACLC,IAAA,EAAM;MACV;IACJ;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IACA,OAAOS,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MAAEa,OAAA,EAAS;MAAMC,IAAA,EAAMR;IAAW;EAC/D,EAAE,OAAOL,KAAA,EAAO;IAAA;IAAAd,cAAA,GAAAE,CAAA;IACZ0B,OAAA,CAAQd,KAAK,CAAC,8BAA8BA,KAAA;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAC5C,OAAOS,OAAA,CAAAC,YAAY,CAACC,IAAI,CACpB;MACIa,OAAA,EAAS;MACTG,OAAA,EAAS;MACTf,KAAA,EAAOA,KAAA,YAAiBgB,KAAA;MAAA;MAAA,CAAA9B,cAAA,GAAAU,CAAA,UAAQI,KAAA,CAAMe,OAAO;MAAA;MAAA,CAAA7B,cAAA,GAAAU,CAAA,UAAGqB,MAAA,CAAOjB,KAAA;IAC3D,GACA;MAAEC,MAAA,EAAQ;IAAI;EAEtB;AACJ","ignoreList":[]}