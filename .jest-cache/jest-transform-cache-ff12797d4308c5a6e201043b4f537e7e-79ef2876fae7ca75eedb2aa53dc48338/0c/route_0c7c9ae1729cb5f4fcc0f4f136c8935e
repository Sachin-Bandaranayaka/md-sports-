6554dfa19791f788002918f833c70af9
"use strict";

/* istanbul ignore next */
function cov_1pujughijs() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/inventory/route.ts";
  var hash = "dff78d84d7bc98c7eadfd24d47fa16a60411932f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/inventory/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 26
        },
        end: {
          line: 20,
          column: 80
        }
      },
      "8": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 68
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 6
        }
      },
      "10": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 118,
          column: 2
        }
      },
      "11": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "12": {
        start: {
          line: 30,
          column: 33
        },
        end: {
          line: 30,
          column: 53
        }
      },
      "13": {
        start: {
          line: 31,
          column: 26
        },
        end: {
          line: 31,
          column: 55
        }
      },
      "14": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 57
        }
      },
      "15": {
        start: {
          line: 33,
          column: 25
        },
        end: {
          line: 33,
          column: 64
        }
      },
      "16": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "17": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "18": {
        start: {
          line: 72,
          column: 23
        },
        end: {
          line: 72,
          column: 25
        }
      },
      "19": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 26
        }
      },
      "20": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "21": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 55
        }
      },
      "22": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 40
        }
      },
      "23": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 25
        }
      },
      "24": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "25": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 58
        }
      },
      "26": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 45
        }
      },
      "27": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 25
        }
      },
      "28": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "29": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 59
        }
      },
      "30": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 46
        }
      },
      "31": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 25
        }
      },
      "32": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "33": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 58
        }
      },
      "34": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 44
        }
      },
      "35": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 47
        }
      },
      "36": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 49
        }
      },
      "37": {
        start: {
          line: 98,
          column: 23
        },
        end: {
          line: 98,
          column: 61
        }
      },
      "38": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "39": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 64
        }
      },
      "40": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "41": {
        start: {
          line: 119,
          column: 13
        },
        end: {
          line: 224,
          column: 2
        }
      },
      "42": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 223,
          column: 5
        }
      },
      "43": {
        start: {
          line: 121,
          column: 62
        },
        end: {
          line: 121,
          column: 82
        }
      },
      "44": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "45": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "46": {
        start: {
          line: 132,
          column: 33
        },
        end: {
          line: 132,
          column: 108
        }
      },
      "47": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "48": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 104
        }
      },
      "49": {
        start: {
          line: 137,
          column: 27
        },
        end: {
          line: 141,
          column: 10
        }
      },
      "50": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "51": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 148,
          column: 15
        }
      },
      "52": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 155,
          column: 10
        }
      },
      "53": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "54": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "55": {
        start: {
          line: 165,
          column: 32
        },
        end: {
          line: 171,
          column: 10
        }
      },
      "56": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "57": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "58": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "59": {
        start: {
          line: 208,
          column: 30
        },
        end: {
          line: 208,
          column: 44
        }
      },
      "60": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 213,
          column: 11
        }
      },
      "61": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 72
        }
      },
      "62": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 33
          }
        },
        loc: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 27,
            column: 61
          },
          end: {
            line: 27,
            column: 62
          }
        },
        loc: {
          start: {
            line: 27,
            column: 87
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 119,
            column: 62
          },
          end: {
            line: 119,
            column: 63
          }
        },
        loc: {
          start: {
            line: 119,
            column: 88
          },
          end: {
            line: 224,
            column: 1
          }
        },
        line: 119
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 23,
            column: 38
          }
        }, {
          start: {
            line: 23,
            column: 41
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 14
          }
        }, {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 32
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "3": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 30
          }
        }, {
          start: {
            line: 75,
            column: 34
          },
          end: {
            line: 75,
            column: 48
          }
        }],
        line: 75
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "6": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 19
          },
          end: {
            line: 113,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 44
          },
          end: {
            line: 113,
            column: 57
          }
        }, {
          start: {
            line: 113,
            column: 60
          },
          end: {
            line: 113,
            column: 73
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "9": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 123,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 123,
            column: 19
          }
        }, {
          start: {
            line: 123,
            column: 23
          },
          end: {
            line: 123,
            column: 33
          }
        }, {
          start: {
            line: 123,
            column: 37
          },
          end: {
            line: 123,
            column: 59
          }
        }],
        line: 123
      },
      "10": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "11": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "12": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "13": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: 190,
            column: 15
          },
          end: {
            line: 206,
            column: 9
          }
        }],
        line: 173
      },
      "14": {
        loc: {
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 186,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 186,
            column: 28
          }
        }, {
          start: {
            line: 186,
            column: 32
          },
          end: {
            line: 186,
            column: 33
          }
        }],
        line: 186
      },
      "15": {
        loc: {
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 204,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 204,
            column: 28
          }
        }, {
          start: {
            line: 204,
            column: 32
          },
          end: {
            line: 204,
            column: 33
          }
        }],
        line: 204
      },
      "16": {
        loc: {
          start: {
            line: 211,
            column: 21
          },
          end: {
            line: 211,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 55
          },
          end: {
            line: 211,
            column: 92
          }
        }, {
          start: {
            line: 211,
            column: 95
          },
          end: {
            line: 211,
            column: 132
          }
        }],
        line: 211
      },
      "17": {
        loc: {
          start: {
            line: 219,
            column: 19
          },
          end: {
            line: 219,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 219,
            column: 44
          },
          end: {
            line: 219,
            column: 57
          }
        }, {
          start: {
            line: 219,
            column: 60
          },
          end: {
            line: 219,
            column: 73
          }
        }],
        line: 219
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/inventory/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport db from '@/utils/db';\n\n\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\n\n// GET: Fetch all inventory items with shop-based filtering\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Parse query parameters\n        const { searchParams } = new URL(request.url);\n        const productId = searchParams.get('productId');\n        const categoryId = searchParams.get('categoryId');\n        const lowStock = searchParams.get('lowStock') === 'true';\n\n        console.log('Inventory API - Shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            isAdmin: context.isAdmin,\n            userShopId: context.userShopId\n        });\n\n        // Build the query with possible filters\n        let query = `\n            SELECT \n                i.id as inventory_id,\n                i.shop_id,\n                s.name as shop_name,\n                s.location as shop_location,\n                i.product_id,\n                p.name as product_name,\n                p.sku as product_sku,\n                p.barcode as product_barcode,\n                p.price,\n                p.weightedAverageCost,\n                i.shopspecificcost as shop_specific_cost,\n                c.id as category_id,\n                c.name as category_name,\n                i.quantity,\n                i.reorder_level,\n                i.last_updated\n            FROM \n                inventory_items i\n            JOIN \n                products p ON i.product_id = p.id\n            JOIN \n                shops s ON i.shop_id = s.id\n            LEFT JOIN \n                categories c ON p.category_id = c.id\n            WHERE \n                p.is_active = true \n                AND s.is_active = true\n        `;\n\n        // Add filters based on query parameters and shop access\n        const params: any[] = [];\n        let paramIndex = 1;\n\n        // Apply shop filtering based on user permissions\n        if (context.isFiltered && context.shopId) {\n            query += ` AND i.shop_id = $${paramIndex}`;\n            params.push(context.shopId);\n            paramIndex++;\n        }\n\n        if (productId) {\n            query += ` AND i.product_id = $${paramIndex}`;\n            params.push(parseInt(productId));\n            paramIndex++;\n        }\n\n        if (categoryId) {\n            query += ` AND p.category_id = $${paramIndex}`;\n            params.push(parseInt(categoryId));\n            paramIndex++;\n        }\n\n        if (lowStock) {\n            query += ` AND i.quantity <= i.reorder_level`;\n        }\n\n        // Add sorting\n        query += ` ORDER BY s.name, p.name`;\n\n        console.log('Inventory query:', query);\n        console.log('Inventory params:', params);\n\n        // Execute the query\n        const result = await db.query(query, params);\n\n        return NextResponse.json({\n            success: true,\n            data: result.rows,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                totalItems: result.rows.length\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching inventory items:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error fetching inventory items',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n});\n\n// POST: Create or update inventory items with shop validation\nexport const POST = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        const { shopId, productId, quantity, reorderLevel } = await request.json();\n\n        // Validate required fields\n        if (!shopId || !productId || quantity === undefined) {\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields: shopId, productId, and quantity are required'\n            }, { status: 400 });\n        }\n\n        // Validate shop access for the target shop\n        const shopAccessResult = await ShopAccessControl.validateShopAccess(request, shopId);\n        if (!shopAccessResult.hasAccess) {\n            return ShopAccessControl.createAccessDeniedResponse(shopAccessResult.error);\n        }\n\n        // Check if shop exists\n        const shopResult = await db.query(`\n            SELECT id FROM shops WHERE id = $1 AND is_active = true\n        `, [shopId]);\n\n        if (shopResult.rows.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: `Shop with ID ${shopId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if product exists\n        const productResult = await db.query(`\n            SELECT id FROM products WHERE id = $1 AND is_active = true\n        `, [productId]);\n\n        if (productResult.rows.length === 0) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${productId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if inventory item already exists\n        const inventoryResult = await db.query(`\n            SELECT id FROM inventory_items \n            WHERE shop_id = $1 AND product_id = $2\n        `, [shopId, productId]);\n\n        let result;\n\n        if (inventoryResult.rows.length > 0) {\n            // Update existing inventory item\n            result = await db.query(`\n                UPDATE inventory_items \n                SET \n                    quantity = $1, \n                    reorder_level = $2,\n                    last_updated = CURRENT_TIMESTAMP\n                WHERE \n                    shop_id = $3 AND product_id = $4\n                RETURNING *\n            `, [quantity, reorderLevel || 0, shopId, productId]);\n        } else {\n            // Create new inventory item\n            result = await db.query(`\n                INSERT INTO inventory_items (\n                    shop_id, \n                    product_id, \n                    quantity, \n                    reorder_level\n                ) VALUES ($1, $2, $3, $4)\n                RETURNING *\n            `, [shopId, productId, quantity, reorderLevel || 0]);\n        }\n\n        // Real-time updates now handled by polling system\n        const inventoryItem = result.rows[0];\n\n        return NextResponse.json({\n            success: true,\n            message: inventoryResult.rows.length > 0\n                ? 'Inventory item updated successfully'\n                : 'Inventory item created successfully',\n            data: inventoryItem\n        });\n    } catch (error) {\n        console.error('Error creating/updating inventory item:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Error creating/updating inventory item',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n});"],
      names: ["GET", "POST", "ShopAccessControl", "withShopAccess", "request", "context", "searchParams", "URL", "url", "productId", "get", "categoryId", "lowStock", "console", "log", "shopId", "isFiltered", "isAdmin", "userShopId", "query", "params", "paramIndex", "push", "parseInt", "result", "db", "NextResponse", "json", "success", "data", "rows", "meta", "shopFiltered", "totalItems", "length", "error", "message", "Error", "String", "status", "quantity", "reorderLevel", "undefined", "shopAccessResult", "validateShopAccess", "hasAccess", "createAccessDeniedResponse", "shopResult", "productResult", "inventoryResult", "inventoryItem"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dff78d84d7bc98c7eadfd24d47fa16a60411932f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pujughijs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pujughijs();
cov_1pujughijs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1pujughijs().f[0]++;
  cov_1pujughijs().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1pujughijs().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1pujughijs().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_1pujughijs().f[1]++;
    cov_1pujughijs().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_1pujughijs().f[2]++;
    cov_1pujughijs().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1pujughijs().s[6]++, require("next/server"));
const _db =
/* istanbul ignore next */
(/*#__PURE__*/cov_1pujughijs().s[7]++, _interop_require_default(require("../../../utils/db")));
const _shopMiddleware =
/* istanbul ignore next */
(cov_1pujughijs().s[8]++, require("../../../lib/utils/shopMiddleware"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1pujughijs().f[3]++;
  cov_1pujughijs().s[9]++;
  return /* istanbul ignore next */(cov_1pujughijs().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1pujughijs().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1pujughijs().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1pujughijs().b[0][1]++, {
    default: obj
  });
}
const GET =
/* istanbul ignore next */
(cov_1pujughijs().s[10]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_1pujughijs().f[4]++;
  cov_1pujughijs().s[11]++;
  try {
    // Parse query parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1pujughijs().s[12]++, new URL(request.url));
    const productId =
    /* istanbul ignore next */
    (cov_1pujughijs().s[13]++, searchParams.get("productId"));
    const categoryId =
    /* istanbul ignore next */
    (cov_1pujughijs().s[14]++, searchParams.get("categoryId"));
    const lowStock =
    /* istanbul ignore next */
    (cov_1pujughijs().s[15]++, searchParams.get("lowStock") === "true");
    /* istanbul ignore next */
    cov_1pujughijs().s[16]++;
    console.log("Inventory API - Shop context:", {
      shopId: context.shopId,
      isFiltered: context.isFiltered,
      isAdmin: context.isAdmin,
      userShopId: context.userShopId
    });
    // Build the query with possible filters
    let query =
    /* istanbul ignore next */
    (cov_1pujughijs().s[17]++, `
            SELECT 
                i.id as inventory_id,
                i.shop_id,
                s.name as shop_name,
                s.location as shop_location,
                i.product_id,
                p.name as product_name,
                p.sku as product_sku,
                p.barcode as product_barcode,
                p.price,
                p.weightedAverageCost,
                i.shopspecificcost as shop_specific_cost,
                c.id as category_id,
                c.name as category_name,
                i.quantity,
                i.reorder_level,
                i.last_updated
            FROM 
                inventory_items i
            JOIN 
                products p ON i.product_id = p.id
            JOIN 
                shops s ON i.shop_id = s.id
            LEFT JOIN 
                categories c ON p.category_id = c.id
            WHERE 
                p.is_active = true 
                AND s.is_active = true
        `);
    // Add filters based on query parameters and shop access
    const params =
    /* istanbul ignore next */
    (cov_1pujughijs().s[18]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_1pujughijs().s[19]++, 1);
    // Apply shop filtering based on user permissions
    /* istanbul ignore next */
    cov_1pujughijs().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_1pujughijs().b[3][0]++, context.isFiltered) &&
    /* istanbul ignore next */
    (cov_1pujughijs().b[3][1]++, context.shopId)) {
      /* istanbul ignore next */
      cov_1pujughijs().b[2][0]++;
      cov_1pujughijs().s[21]++;
      query += ` AND i.shop_id = $${paramIndex}`;
      /* istanbul ignore next */
      cov_1pujughijs().s[22]++;
      params.push(context.shopId);
      /* istanbul ignore next */
      cov_1pujughijs().s[23]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_1pujughijs().b[2][1]++;
    }
    cov_1pujughijs().s[24]++;
    if (productId) {
      /* istanbul ignore next */
      cov_1pujughijs().b[4][0]++;
      cov_1pujughijs().s[25]++;
      query += ` AND i.product_id = $${paramIndex}`;
      /* istanbul ignore next */
      cov_1pujughijs().s[26]++;
      params.push(parseInt(productId));
      /* istanbul ignore next */
      cov_1pujughijs().s[27]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_1pujughijs().b[4][1]++;
    }
    cov_1pujughijs().s[28]++;
    if (categoryId) {
      /* istanbul ignore next */
      cov_1pujughijs().b[5][0]++;
      cov_1pujughijs().s[29]++;
      query += ` AND p.category_id = $${paramIndex}`;
      /* istanbul ignore next */
      cov_1pujughijs().s[30]++;
      params.push(parseInt(categoryId));
      /* istanbul ignore next */
      cov_1pujughijs().s[31]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_1pujughijs().b[5][1]++;
    }
    cov_1pujughijs().s[32]++;
    if (lowStock) {
      /* istanbul ignore next */
      cov_1pujughijs().b[6][0]++;
      cov_1pujughijs().s[33]++;
      query += ` AND i.quantity <= i.reorder_level`;
    } else
    /* istanbul ignore next */
    {
      cov_1pujughijs().b[6][1]++;
    }
    // Add sorting
    cov_1pujughijs().s[34]++;
    query += ` ORDER BY s.name, p.name`;
    /* istanbul ignore next */
    cov_1pujughijs().s[35]++;
    console.log("Inventory query:", query);
    /* istanbul ignore next */
    cov_1pujughijs().s[36]++;
    console.log("Inventory params:", params);
    // Execute the query
    const result =
    /* istanbul ignore next */
    (cov_1pujughijs().s[37]++, await _db.default.query(query, params));
    /* istanbul ignore next */
    cov_1pujughijs().s[38]++;
    return _server.NextResponse.json({
      success: true,
      data: result.rows,
      meta: {
        shopFiltered: context.isFiltered,
        shopId: context.shopId,
        totalItems: result.rows.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1pujughijs().s[39]++;
    console.error("Error fetching inventory items:", error);
    /* istanbul ignore next */
    cov_1pujughijs().s[40]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error fetching inventory items",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1pujughijs().b[7][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1pujughijs().b[7][1]++, String(error))
    }, {
      status: 500
    });
  }
}));
const POST =
/* istanbul ignore next */
(cov_1pujughijs().s[41]++, _shopMiddleware.ShopAccessControl.withShopAccess(async (request, context) => {
  /* istanbul ignore next */
  cov_1pujughijs().f[5]++;
  cov_1pujughijs().s[42]++;
  try {
    const {
      shopId,
      productId,
      quantity,
      reorderLevel
    } =
    /* istanbul ignore next */
    (cov_1pujughijs().s[43]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_1pujughijs().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_1pujughijs().b[9][0]++, !shopId) ||
    /* istanbul ignore next */
    (cov_1pujughijs().b[9][1]++, !productId) ||
    /* istanbul ignore next */
    (cov_1pujughijs().b[9][2]++, quantity === undefined)) {
      /* istanbul ignore next */
      cov_1pujughijs().b[8][0]++;
      cov_1pujughijs().s[45]++;
      return _server.NextResponse.json({
        success: false,
        message: "Missing required fields: shopId, productId, and quantity are required"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1pujughijs().b[8][1]++;
    }
    // Validate shop access for the target shop
    const shopAccessResult =
    /* istanbul ignore next */
    (cov_1pujughijs().s[46]++, await _shopMiddleware.ShopAccessControl.validateShopAccess(request, shopId));
    /* istanbul ignore next */
    cov_1pujughijs().s[47]++;
    if (!shopAccessResult.hasAccess) {
      /* istanbul ignore next */
      cov_1pujughijs().b[10][0]++;
      cov_1pujughijs().s[48]++;
      return _shopMiddleware.ShopAccessControl.createAccessDeniedResponse(shopAccessResult.error);
    } else
    /* istanbul ignore next */
    {
      cov_1pujughijs().b[10][1]++;
    }
    // Check if shop exists
    const shopResult =
    /* istanbul ignore next */
    (cov_1pujughijs().s[49]++, await _db.default.query(`
            SELECT id FROM shops WHERE id = $1 AND is_active = true
        `, [shopId]));
    /* istanbul ignore next */
    cov_1pujughijs().s[50]++;
    if (shopResult.rows.length === 0) {
      /* istanbul ignore next */
      cov_1pujughijs().b[11][0]++;
      cov_1pujughijs().s[51]++;
      return _server.NextResponse.json({
        success: false,
        message: `Shop with ID ${shopId} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1pujughijs().b[11][1]++;
    }
    // Check if product exists
    const productResult =
    /* istanbul ignore next */
    (cov_1pujughijs().s[52]++, await _db.default.query(`
            SELECT id FROM products WHERE id = $1 AND is_active = true
        `, [productId]));
    /* istanbul ignore next */
    cov_1pujughijs().s[53]++;
    if (productResult.rows.length === 0) {
      /* istanbul ignore next */
      cov_1pujughijs().b[12][0]++;
      cov_1pujughijs().s[54]++;
      return _server.NextResponse.json({
        success: false,
        message: `Product with ID ${productId} not found`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1pujughijs().b[12][1]++;
    }
    // Check if inventory item already exists
    const inventoryResult =
    /* istanbul ignore next */
    (cov_1pujughijs().s[55]++, await _db.default.query(`
            SELECT id FROM inventory_items 
            WHERE shop_id = $1 AND product_id = $2
        `, [shopId, productId]));
    let result;
    /* istanbul ignore next */
    cov_1pujughijs().s[56]++;
    if (inventoryResult.rows.length > 0) {
      /* istanbul ignore next */
      cov_1pujughijs().b[13][0]++;
      cov_1pujughijs().s[57]++;
      // Update existing inventory item
      result = await _db.default.query(`
                UPDATE inventory_items 
                SET 
                    quantity = $1, 
                    reorder_level = $2,
                    last_updated = CURRENT_TIMESTAMP
                WHERE 
                    shop_id = $3 AND product_id = $4
                RETURNING *
            `, [quantity,
      /* istanbul ignore next */
      (cov_1pujughijs().b[14][0]++, reorderLevel) ||
      /* istanbul ignore next */
      (cov_1pujughijs().b[14][1]++, 0), shopId, productId]);
    } else {
      /* istanbul ignore next */
      cov_1pujughijs().b[13][1]++;
      cov_1pujughijs().s[58]++;
      // Create new inventory item
      result = await _db.default.query(`
                INSERT INTO inventory_items (
                    shop_id, 
                    product_id, 
                    quantity, 
                    reorder_level
                ) VALUES ($1, $2, $3, $4)
                RETURNING *
            `, [shopId, productId, quantity,
      /* istanbul ignore next */
      (cov_1pujughijs().b[15][0]++, reorderLevel) ||
      /* istanbul ignore next */
      (cov_1pujughijs().b[15][1]++, 0)]);
    }
    // Real-time updates now handled by polling system
    const inventoryItem =
    /* istanbul ignore next */
    (cov_1pujughijs().s[59]++, result.rows[0]);
    /* istanbul ignore next */
    cov_1pujughijs().s[60]++;
    return _server.NextResponse.json({
      success: true,
      message: inventoryResult.rows.length > 0 ?
      /* istanbul ignore next */
      (cov_1pujughijs().b[16][0]++, "Inventory item updated successfully") :
      /* istanbul ignore next */
      (cov_1pujughijs().b[16][1]++, "Inventory item created successfully"),
      data: inventoryItem
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1pujughijs().s[61]++;
    console.error("Error creating/updating inventory item:", error);
    /* istanbul ignore next */
    cov_1pujughijs().s[62]++;
    return _server.NextResponse.json({
      success: false,
      message: "Error creating/updating inventory item",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1pujughijs().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1pujughijs().b[17][1]++, String(error))
    }, {
      status: 500
    });
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,