cccf3e28c78c9f50dd726c8d1c6b19fa
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _productService = require("../../src/services/productService");
// Mock the Product model
const mockProduct = {
    findAll: _globals.jest.fn(),
    findOne: _globals.jest.fn(),
    findByPk: _globals.jest.fn(),
    create: _globals.jest.fn(),
    update: _globals.jest.fn()
};
// Mock the Product import
_globals.jest.mock("@/lib/models", ()=>({
        Product: mockProduct
    }));
(0, _globals.describe)("ProductService", ()=>{
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.resetAllMocks();
    });
    (0, _globals.describe)("getAllProducts", ()=>{
        (0, _globals.it)("should return all active products", async ()=>{
            const mockProducts = [
                {
                    id: 1,
                    name: "Product 1",
                    isActive: true
                },
                {
                    id: 2,
                    name: "Product 2",
                    isActive: true
                }
            ];
            mockProduct.findAll.mockResolvedValue(mockProducts);
            const result = await _productService.productService.getAllProducts();
            (0, _globals.expect)(result).toEqual(mockProducts);
            (0, _globals.expect)(mockProduct.findAll).toHaveBeenCalledWith({
                where: {
                    isActive: true
                }
            });
        });
        (0, _globals.it)("should handle database errors", async ()=>{
            const error = new Error("Database connection failed");
            mockProduct.findAll.mockRejectedValue(error);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.getAllProducts()).rejects.toThrow("Database connection failed");
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error fetching products:", error);
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should return empty array when no products found", async ()=>{
            mockProduct.findAll.mockResolvedValue([]);
            const result = await _productService.productService.getAllProducts();
            (0, _globals.expect)(result).toEqual([]);
            (0, _globals.expect)(mockProduct.findAll).toHaveBeenCalledWith({
                where: {
                    isActive: true
                }
            });
        });
    });
    (0, _globals.describe)("getProductById", ()=>{
        (0, _globals.it)("should return a product by ID", async ()=>{
            const mockProduct_data = {
                id: 1,
                name: "Test Product",
                isActive: true
            };
            mockProduct.findOne.mockResolvedValue(mockProduct_data);
            const result = await _productService.productService.getProductById(1);
            (0, _globals.expect)(result).toEqual(mockProduct_data);
            (0, _globals.expect)(mockProduct.findOne).toHaveBeenCalledWith({
                where: {
                    id: 1,
                    isActive: true
                }
            });
        });
        (0, _globals.it)("should return null when product not found", async ()=>{
            mockProduct.findOne.mockResolvedValue(null);
            const result = await _productService.productService.getProductById(999);
            (0, _globals.expect)(result).toBeNull();
            (0, _globals.expect)(mockProduct.findOne).toHaveBeenCalledWith({
                where: {
                    id: 999,
                    isActive: true
                }
            });
        });
        (0, _globals.it)("should handle database errors", async ()=>{
            const error = new Error("Database error");
            mockProduct.findOne.mockRejectedValue(error);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.getProductById(1)).rejects.toThrow("Database error");
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error fetching product with ID 1:", error);
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should handle invalid ID types", async ()=>{
            const error = new Error("Invalid ID");
            mockProduct.findOne.mockRejectedValue(error);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.getProductById(NaN)).rejects.toThrow("Invalid ID");
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error fetching product with ID NaN:", error);
            consoleSpy.mockRestore();
        });
    });
    (0, _globals.describe)("createProduct", ()=>{
        (0, _globals.it)("should create a new product successfully", async ()=>{
            const productData = {
                name: "New Product",
                price: 99.99,
                description: "A new product",
                isActive: true
            };
            const createdProduct = {
                id: 1,
                ...productData
            };
            mockProduct.create.mockResolvedValue(createdProduct);
            const result = await _productService.productService.createProduct(productData);
            (0, _globals.expect)(result).toEqual(createdProduct);
            (0, _globals.expect)(mockProduct.create).toHaveBeenCalledWith(productData);
        });
        (0, _globals.it)("should handle validation errors", async ()=>{
            const productData = {
                name: ""
            }; // Invalid data
            const error = new Error("Validation failed");
            mockProduct.create.mockRejectedValue(error);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.createProduct(productData)).rejects.toThrow("Validation failed");
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error creating product:", error);
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should handle database constraint errors", async ()=>{
            const productData = {
                name: "Duplicate Product"
            };
            const error = new Error("Unique constraint violation");
            mockProduct.create.mockRejectedValue(error);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.createProduct(productData)).rejects.toThrow("Unique constraint violation");
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error creating product:", error);
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should create product with minimal required fields", async ()=>{
            const productData = {
                name: "Minimal Product"
            };
            const createdProduct = {
                id: 1,
                ...productData
            };
            mockProduct.create.mockResolvedValue(createdProduct);
            const result = await _productService.productService.createProduct(productData);
            (0, _globals.expect)(result).toEqual(createdProduct);
            (0, _globals.expect)(mockProduct.create).toHaveBeenCalledWith(productData);
        });
    });
    (0, _globals.describe)("updateProduct", ()=>{
        (0, _globals.it)("should update an existing product successfully", async ()=>{
            const productData = {
                name: "Updated Product",
                price: 149.99
            };
            const existingProduct = {
                id: 1,
                name: "Old Product",
                price: 99.99,
                update: _globals.jest.fn().mockResolvedValue({
                    id: 1,
                    ...productData
                })
            };
            mockProduct.findByPk.mockResolvedValue(existingProduct);
            const result = await _productService.productService.updateProduct(1, productData);
            (0, _globals.expect)(result).toEqual({
                id: 1,
                ...productData
            });
            (0, _globals.expect)(mockProduct.findByPk).toHaveBeenCalledWith(1);
            (0, _globals.expect)(existingProduct.update).toHaveBeenCalledWith(productData);
        });
        (0, _globals.it)("should throw error when product not found", async ()=>{
            const productData = {
                name: "Updated Product"
            };
            mockProduct.findByPk.mockResolvedValue(null);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.updateProduct(999, productData)).rejects.toThrow("Product with ID 999 not found");
            (0, _globals.expect)(mockProduct.findByPk).toHaveBeenCalledWith(999);
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error updating product with ID 999:", _globals.expect.any(Error));
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should handle update validation errors", async ()=>{
            const productData = {
                price: -10
            }; // Invalid price
            const existingProduct = {
                id: 1,
                update: _globals.jest.fn().mockRejectedValue(new Error("Invalid price"))
            };
            mockProduct.findByPk.mockResolvedValue(existingProduct);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.updateProduct(1, productData)).rejects.toThrow("Invalid price");
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error updating product with ID 1:", _globals.expect.any(Error));
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should handle database errors during update", async ()=>{
            const productData = {
                name: "Updated Product"
            };
            const error = new Error("Database connection lost");
            mockProduct.findByPk.mockRejectedValue(error);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.updateProduct(1, productData)).rejects.toThrow("Database connection lost");
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error updating product with ID 1:", error);
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should update only provided fields", async ()=>{
            const productData = {
                name: "Updated Name Only"
            };
            const existingProduct = {
                id: 1,
                name: "Old Name",
                price: 99.99,
                description: "Old Description",
                update: _globals.jest.fn().mockResolvedValue({
                    id: 1,
                    name: "Updated Name Only",
                    price: 99.99,
                    description: "Old Description"
                })
            };
            mockProduct.findByPk.mockResolvedValue(existingProduct);
            const result = await _productService.productService.updateProduct(1, productData);
            (0, _globals.expect)(existingProduct.update).toHaveBeenCalledWith(productData);
            (0, _globals.expect)(result.name).toBe("Updated Name Only");
            (0, _globals.expect)(result.price).toBe(99.99); // Should remain unchanged
        });
    });
    (0, _globals.describe)("deleteProduct", ()=>{
        (0, _globals.it)("should soft delete a product successfully", async ()=>{
            const existingProduct = {
                id: 1,
                name: "Product to Delete",
                isActive: true,
                update: _globals.jest.fn().mockResolvedValue({
                    id: 1,
                    name: "Product to Delete",
                    isActive: false
                })
            };
            mockProduct.findByPk.mockResolvedValue(existingProduct);
            const result = await _productService.productService.deleteProduct(1);
            (0, _globals.expect)(result).toEqual({
                id: 1,
                name: "Product to Delete",
                isActive: false
            });
            (0, _globals.expect)(mockProduct.findByPk).toHaveBeenCalledWith(1);
            (0, _globals.expect)(existingProduct.update).toHaveBeenCalledWith({
                isActive: false
            });
        });
        (0, _globals.it)("should throw error when product not found for deletion", async ()=>{
            mockProduct.findByPk.mockResolvedValue(null);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.deleteProduct(999)).rejects.toThrow("Product with ID 999 not found");
            (0, _globals.expect)(mockProduct.findByPk).toHaveBeenCalledWith(999);
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error deleting product with ID 999:", _globals.expect.any(Error));
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should handle database errors during deletion", async ()=>{
            const error = new Error("Database error during deletion");
            mockProduct.findByPk.mockRejectedValue(error);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.deleteProduct(1)).rejects.toThrow("Database error during deletion");
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error deleting product with ID 1:", error);
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should handle update errors during soft delete", async ()=>{
            const existingProduct = {
                id: 1,
                update: _globals.jest.fn().mockRejectedValue(new Error("Update failed"))
            };
            mockProduct.findByPk.mockResolvedValue(existingProduct);
            const consoleSpy = _globals.jest.spyOn(console, "error").mockImplementation();
            await (0, _globals.expect)(_productService.productService.deleteProduct(1)).rejects.toThrow("Update failed");
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith("Error deleting product with ID 1:", _globals.expect.any(Error));
            consoleSpy.mockRestore();
        });
        (0, _globals.it)("should not affect already deleted products", async ()=>{
            // Reset the mock explicitly
            mockProduct.findByPk.mockReset();
            const existingProduct = {
                id: 1,
                name: "Already Deleted Product",
                isActive: false,
                update: _globals.jest.fn().mockResolvedValue({
                    id: 1,
                    name: "Already Deleted Product",
                    isActive: false
                })
            };
            mockProduct.findByPk.mockResolvedValue(existingProduct);
            const result = await _productService.productService.deleteProduct(1);
            (0, _globals.expect)(result.isActive).toBe(false);
            (0, _globals.expect)(existingProduct.update).toHaveBeenCalledWith({
                isActive: false
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,