47fdd6a7a1ffa58a06977185634bda72
"use strict";
const { PrismaClient } = require("@prisma/client");
module.exports = async ()=>{
    console.log("\uD83D\uDE80 Setting up Jest global environment...");
    // Set test environment variables
    process.env.NODE_ENV = "test";
    process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || process.env.DATABASE_URL;
    // Initialize test database if needed
    if (process.env.SETUP_TEST_DB === "true") {
        const prisma = new PrismaClient();
        try {
            // Ensure database connection
            await prisma.$connect();
            console.log("✅ Test database connected");
            // Run any necessary setup
            await setupTestData(prisma);
        } catch (error) {
            console.error("❌ Test database setup failed:", error);
            throw error;
        } finally{
            await prisma.$disconnect();
        }
    }
    console.log("✅ Jest global setup completed");
};
async function setupTestData(prisma) {
    // Create minimal test data if needed
    try {
        // Check if test shop exists
        const testShop = await prisma.shop.findFirst({
            where: {
                id: "test-shop-jest"
            }
        });
        if (!testShop) {
            await prisma.shop.create({
                data: {
                    id: "test-shop-jest",
                    name: "Jest Test Shop",
                    location: "Test Location"
                }
            });
            console.log("\uD83D\uDCE6 Test shop created for Jest");
        }
    } catch (error) {
        console.warn("⚠️ Test data setup warning:", error.message);
    // Don't fail setup for data creation issues
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zYWNoaW4vRG9jdW1lbnRzL21kLXNwb3J0cy0vdGVzdHMvc2V0dXAvZ2xvYmFsLXNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUHJpc21hQ2xpZW50IH0gPSByZXF1aXJlKCdAcHJpc21hL2NsaWVudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coJ/CfmoAgU2V0dGluZyB1cCBKZXN0IGdsb2JhbCBlbnZpcm9ubWVudC4uLicpO1xuICBcbiAgLy8gU2V0IHRlc3QgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xuICBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5URVNUX0RBVEFCQVNFX1VSTCB8fCBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkw7XG4gIFxuICAvLyBJbml0aWFsaXplIHRlc3QgZGF0YWJhc2UgaWYgbmVlZGVkXG4gIGlmIChwcm9jZXNzLmVudi5TRVRVUF9URVNUX0RCID09PSAndHJ1ZScpIHtcbiAgICBjb25zdCBwcmlzbWEgPSBuZXcgUHJpc21hQ2xpZW50KCk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIEVuc3VyZSBkYXRhYmFzZSBjb25uZWN0aW9uXG4gICAgICBhd2FpdCBwcmlzbWEuJGNvbm5lY3QoKTtcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgVGVzdCBkYXRhYmFzZSBjb25uZWN0ZWQnKTtcbiAgICAgIFxuICAgICAgLy8gUnVuIGFueSBuZWNlc3Nhcnkgc2V0dXBcbiAgICAgIGF3YWl0IHNldHVwVGVzdERhdGEocHJpc21hKTtcbiAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgVGVzdCBkYXRhYmFzZSBzZXR1cCBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGF3YWl0IHByaXNtYS4kZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfVxuICBcbiAgY29uc29sZS5sb2coJ+KchSBKZXN0IGdsb2JhbCBzZXR1cCBjb21wbGV0ZWQnKTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHNldHVwVGVzdERhdGEocHJpc21hKSB7XG4gIC8vIENyZWF0ZSBtaW5pbWFsIHRlc3QgZGF0YSBpZiBuZWVkZWRcbiAgdHJ5IHtcbiAgICAvLyBDaGVjayBpZiB0ZXN0IHNob3AgZXhpc3RzXG4gICAgY29uc3QgdGVzdFNob3AgPSBhd2FpdCBwcmlzbWEuc2hvcC5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHsgaWQ6ICd0ZXN0LXNob3AtamVzdCcgfVxuICAgIH0pO1xuICAgIFxuICAgIGlmICghdGVzdFNob3ApIHtcbiAgICAgIGF3YWl0IHByaXNtYS5zaG9wLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBpZDogJ3Rlc3Qtc2hvcC1qZXN0JyxcbiAgICAgICAgICBuYW1lOiAnSmVzdCBUZXN0IFNob3AnLFxuICAgICAgICAgIGxvY2F0aW9uOiAnVGVzdCBMb2NhdGlvbidcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZygn8J+TpiBUZXN0IHNob3AgY3JlYXRlZCBmb3IgSmVzdCcpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBUZXN0IGRhdGEgc2V0dXAgd2FybmluZzonLCBlcnJvci5tZXNzYWdlKTtcbiAgICAvLyBEb24ndCBmYWlsIHNldHVwIGZvciBkYXRhIGNyZWF0aW9uIGlzc3Vlc1xuICB9XG59Il0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkRBVEFCQVNFX1VSTCIsIlRFU1RfREFUQUJBU0VfVVJMIiwiU0VUVVBfVEVTVF9EQiIsInByaXNtYSIsIiRjb25uZWN0Iiwic2V0dXBUZXN0RGF0YSIsImVycm9yIiwiJGRpc2Nvbm5lY3QiLCJ0ZXN0U2hvcCIsInNob3AiLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImlkIiwiY3JlYXRlIiwiZGF0YSIsIm5hbWUiLCJsb2NhdGlvbiIsIndhcm4iLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxFQUFFQSxZQUFZLEVBQUUsR0FBR0MsUUFBUTtBQUVqQ0MsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLFFBQVFDLEdBQUcsQ0FBQztJQUVaLGlDQUFpQztJQUNqQ0MsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEdBQUc7SUFDdkJGLFFBQVFDLEdBQUcsQ0FBQ0UsWUFBWSxHQUFHSCxRQUFRQyxHQUFHLENBQUNHLGlCQUFpQixJQUFJSixRQUFRQyxHQUFHLENBQUNFLFlBQVk7SUFFcEYscUNBQXFDO0lBQ3JDLElBQUlILFFBQVFDLEdBQUcsQ0FBQ0ksYUFBYSxLQUFLLFFBQVE7UUFDeEMsTUFBTUMsU0FBUyxJQUFJWjtRQUVuQixJQUFJO1lBQ0YsNkJBQTZCO1lBQzdCLE1BQU1ZLE9BQU9DLFFBQVE7WUFDckJULFFBQVFDLEdBQUcsQ0FBQztZQUVaLDBCQUEwQjtZQUMxQixNQUFNUyxjQUFjRjtRQUV0QixFQUFFLE9BQU9HLE9BQU87WUFDZFgsUUFBUVcsS0FBSyxDQUFDLGlDQUFpQ0E7WUFDL0MsTUFBTUE7UUFDUixTQUFVO1lBQ1IsTUFBTUgsT0FBT0ksV0FBVztRQUMxQjtJQUNGO0lBRUFaLFFBQVFDLEdBQUcsQ0FBQztBQUNkO0FBRUEsZUFBZVMsY0FBY0YsTUFBTTtJQUNqQyxxQ0FBcUM7SUFDckMsSUFBSTtRQUNGLDRCQUE0QjtRQUM1QixNQUFNSyxXQUFXLE1BQU1MLE9BQU9NLElBQUksQ0FBQ0MsU0FBUyxDQUFDO1lBQzNDQyxPQUFPO2dCQUFFQyxJQUFJO1lBQWlCO1FBQ2hDO1FBRUEsSUFBSSxDQUFDSixVQUFVO1lBQ2IsTUFBTUwsT0FBT00sSUFBSSxDQUFDSSxNQUFNLENBQUM7Z0JBQ3ZCQyxNQUFNO29CQUNKRixJQUFJO29CQUNKRyxNQUFNO29CQUNOQyxVQUFVO2dCQUNaO1lBQ0Y7WUFDQXJCLFFBQVFDLEdBQUcsQ0FBQztRQUNkO0lBQ0YsRUFBRSxPQUFPVSxPQUFPO1FBQ2RYLFFBQVFzQixJQUFJLENBQUMsK0JBQStCWCxNQUFNWSxPQUFPO0lBQ3pELDRDQUE0QztJQUM5QztBQUNGIn0=