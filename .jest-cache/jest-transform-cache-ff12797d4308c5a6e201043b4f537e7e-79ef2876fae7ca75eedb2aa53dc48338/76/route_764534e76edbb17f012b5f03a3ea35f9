22b89173b8159566cb1ee90d177cfc3d
"use strict";

/* istanbul ignore next */
function cov_20mssy5k54() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/test-settings/route.ts";
  var hash = "64110a4d5ef1de26e84673fdee7be1eeb4aba9c9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/test-settings/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "6": {
        start: {
          line: 16,
          column: 30
        },
        end: {
          line: 20,
          column: 10
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "8": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 27,
          column: 15
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "10": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 56
        }
      },
      "11": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 47,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 34,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 34,
            column: 41
          }
        }, {
          start: {
            line: 34,
            column: 45
          },
          end: {
            line: 34,
            column: 78
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 35,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 35,
            column: 52
          }
        }, {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 35,
            column: 57
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 28
          },
          end: {
            line: 36,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 50
          },
          end: {
            line: 36,
            column: 85
          }
        }, {
          start: {
            line: 36,
            column: 88
          },
          end: {
            line: 36,
            column: 92
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 19
          },
          end: {
            line: 44,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 44
          },
          end: {
            line: 44,
            column: 57
          }
        }, {
          start: {
            line: 44,
            column: 60
          },
          end: {
            line: 44,
            column: 73
          }
        }],
        line: 44
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/test-settings/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(req: NextRequest) {\n    try {\n        // Get the Deepseek API key setting\n        const apiKeySetting = await prisma.systemSettings.findUnique({\n            where: { key: 'deepseek_api_key' }\n        });\n\n        // Check if setting exists\n        if (!apiKeySetting) {\n            return NextResponse.json({\n                success: false,\n                message: 'Deepseek API key setting not found',\n                exists: false\n            });\n        }\n\n        // Return information about the setting\n        return NextResponse.json({\n            success: true,\n            message: 'Deepseek API key setting found',\n            exists: true,\n            isEmpty: !apiKeySetting.value || apiKeySetting.value.trim() === '',\n            valueLength: apiKeySetting.value?.length || 0,\n            firstFourChars: apiKeySetting.value ? apiKeySetting.value.substring(0, 4) : null,\n            lastUpdated: apiKeySetting.updatedAt\n        });\n    } catch (error) {\n        console.error('Error testing settings:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Failed to test settings',\n                error: error instanceof Error ? error.message : String(error)\n            },\n            { status: 500 }\n        );\n    }\n} "],
      names: ["GET", "req", "apiKeySetting", "prisma", "systemSettings", "findUnique", "where", "key", "NextResponse", "json", "success", "message", "exists", "isEmpty", "value", "trim", "valueLength", "length", "firstFourChars", "substring", "lastUpdated", "updatedAt", "error", "console", "Error", "String", "status"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHoB;wBACnB;AAEhB,eAAeA,IAAIC,GAAgB;IACtC,IAAI;QACA,mCAAmC;QACnC,MAAMC,gBAAgB,MAAMC,cAAM,CAACC,cAAc,CAACC,UAAU,CAAC;YACzDC,OAAO;gBAAEC,KAAK;YAAmB;QACrC;QAEA,0BAA0B;QAC1B,IAAI,CAACL,eAAe;YAChB,OAAOM,oBAAY,CAACC,IAAI,CAAC;gBACrBC,SAAS;gBACTC,SAAS;gBACTC,QAAQ;YACZ;QACJ;QAEA,uCAAuC;QACvC,OAAOJ,oBAAY,CAACC,IAAI,CAAC;YACrBC,SAAS;YACTC,SAAS;YACTC,QAAQ;YACRC,SAAS,CAACX,cAAcY,KAAK,IAAIZ,cAAcY,KAAK,CAACC,IAAI,OAAO;YAChEC,aAAad,cAAcY,KAAK,EAAEG,UAAU;YAC5CC,gBAAgBhB,cAAcY,KAAK,GAAGZ,cAAcY,KAAK,CAACK,SAAS,CAAC,GAAG,KAAK;YAC5EC,aAAalB,cAAcmB,SAAS;QACxC;IACJ,EAAE,OAAOC,OAAO;QACZC,QAAQD,KAAK,CAAC,2BAA2BA;QACzC,OAAOd,oBAAY,CAACC,IAAI,CACpB;YACIC,SAAS;YACTC,SAAS;YACTW,OAAOA,iBAAiBE,QAAQF,MAAMX,OAAO,GAAGc,OAAOH;QAC3D,GACA;YAAEI,QAAQ;QAAI;IAEtB;AACJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "64110a4d5ef1de26e84673fdee7be1eeb4aba9c9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20mssy5k54 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20mssy5k54();
cov_20mssy5k54().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_20mssy5k54().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_20mssy5k54().f[0]++;
    cov_20mssy5k54().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_20mssy5k54().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_20mssy5k54().s[4]++, require("../../../lib/prisma"));
async function GET(req) {
  /* istanbul ignore next */
  cov_20mssy5k54().f[1]++;
  cov_20mssy5k54().s[5]++;
  try {
    // Get the Deepseek API key setting
    const apiKeySetting =
    /* istanbul ignore next */
    (cov_20mssy5k54().s[6]++, await _prisma.prisma.systemSettings.findUnique({
      where: {
        key: "deepseek_api_key"
      }
    }));
    // Check if setting exists
    /* istanbul ignore next */
    cov_20mssy5k54().s[7]++;
    if (!apiKeySetting) {
      /* istanbul ignore next */
      cov_20mssy5k54().b[0][0]++;
      cov_20mssy5k54().s[8]++;
      return _server.NextResponse.json({
        success: false,
        message: "Deepseek API key setting not found",
        exists: false
      });
    } else
    /* istanbul ignore next */
    {
      cov_20mssy5k54().b[0][1]++;
    }
    // Return information about the setting
    cov_20mssy5k54().s[9]++;
    return _server.NextResponse.json({
      success: true,
      message: "Deepseek API key setting found",
      exists: true,
      isEmpty:
      /* istanbul ignore next */
      (cov_20mssy5k54().b[1][0]++, !apiKeySetting.value) ||
      /* istanbul ignore next */
      (cov_20mssy5k54().b[1][1]++, apiKeySetting.value.trim() === ""),
      valueLength:
      /* istanbul ignore next */
      (cov_20mssy5k54().b[2][0]++, apiKeySetting.value?.length) ||
      /* istanbul ignore next */
      (cov_20mssy5k54().b[2][1]++, 0),
      firstFourChars: apiKeySetting.value ?
      /* istanbul ignore next */
      (cov_20mssy5k54().b[3][0]++, apiKeySetting.value.substring(0, 4)) :
      /* istanbul ignore next */
      (cov_20mssy5k54().b[3][1]++, null),
      lastUpdated: apiKeySetting.updatedAt
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_20mssy5k54().s[10]++;
    console.error("Error testing settings:", error);
    /* istanbul ignore next */
    cov_20mssy5k54().s[11]++;
    return _server.NextResponse.json({
      success: false,
      message: "Failed to test settings",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_20mssy5k54().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_20mssy5k54().b[4][1]++, String(error))
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjBtc3N5NWs1NCIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsInJlcSIsImYiLCJhcGlLZXlTZXR0aW5nIiwiX3ByaXNtYSIsInByaXNtYSIsInN5c3RlbVNldHRpbmdzIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwia2V5IiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJleGlzdHMiLCJpc0VtcHR5IiwidmFsdWUiLCJ0cmltIiwidmFsdWVMZW5ndGgiLCJsZW5ndGgiLCJmaXJzdEZvdXJDaGFycyIsInN1YnN0cmluZyIsImxhc3RVcGRhdGVkIiwidXBkYXRlZEF0IiwiZXJyb3IiLCJjb25zb2xlIiwiRXJyb3IiLCJTdHJpbmciLCJzdGF0dXMiXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy9hcHAvYXBpL3Rlc3Qtc2V0dGluZ3Mvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJ0AvbGliL3ByaXNtYSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxOiBOZXh0UmVxdWVzdCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEdldCB0aGUgRGVlcHNlZWsgQVBJIGtleSBzZXR0aW5nXG4gICAgICAgIGNvbnN0IGFwaUtleVNldHRpbmcgPSBhd2FpdCBwcmlzbWEuc3lzdGVtU2V0dGluZ3MuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZTogeyBrZXk6ICdkZWVwc2Vla19hcGlfa2V5JyB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHNldHRpbmcgZXhpc3RzXG4gICAgICAgIGlmICghYXBpS2V5U2V0dGluZykge1xuICAgICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRGVlcHNlZWsgQVBJIGtleSBzZXR0aW5nIG5vdCBmb3VuZCcsXG4gICAgICAgICAgICAgICAgZXhpc3RzOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNldHRpbmdcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRGVlcHNlZWsgQVBJIGtleSBzZXR0aW5nIGZvdW5kJyxcbiAgICAgICAgICAgIGV4aXN0czogdHJ1ZSxcbiAgICAgICAgICAgIGlzRW1wdHk6ICFhcGlLZXlTZXR0aW5nLnZhbHVlIHx8IGFwaUtleVNldHRpbmcudmFsdWUudHJpbSgpID09PSAnJyxcbiAgICAgICAgICAgIHZhbHVlTGVuZ3RoOiBhcGlLZXlTZXR0aW5nLnZhbHVlPy5sZW5ndGggfHwgMCxcbiAgICAgICAgICAgIGZpcnN0Rm91ckNoYXJzOiBhcGlLZXlTZXR0aW5nLnZhbHVlID8gYXBpS2V5U2V0dGluZy52YWx1ZS5zdWJzdHJpbmcoMCwgNCkgOiBudWxsLFxuICAgICAgICAgICAgbGFzdFVwZGF0ZWQ6IGFwaUtleVNldHRpbmcudXBkYXRlZEF0XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRlc3Rpbmcgc2V0dGluZ3M6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byB0ZXN0IHNldHRpbmdzJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICk7XG4gICAgfVxufSAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQU1RO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBOzs7Ozs7K0JBSGM7Ozs7OztXQUFBQyxHQUFBOzs7OztrQ0FIb0I7OztrQ0FDbkI7QUFFaEIsZUFBZUEsSUFBSUMsR0FBZ0I7RUFBQTtFQUFBSixjQUFBLEdBQUFLLENBQUE7RUFBQUwsY0FBQSxHQUFBRSxDQUFBO0VBQ3RDLElBQUk7SUFDQTtJQUNBLE1BQU1JLGFBQUE7SUFBQTtJQUFBLENBQUFOLGNBQUEsR0FBQUUsQ0FBQSxPQUFnQixNQUFNSyxPQUFBLENBQUFDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxVQUFVLENBQUM7TUFDekRDLEtBQUEsRUFBTztRQUFFQyxHQUFBLEVBQUs7TUFBbUI7SUFDckM7SUFFQTtJQUFBO0lBQUFaLGNBQUEsR0FBQUUsQ0FBQTtJQUNBLElBQUksQ0FBQ0ksYUFBQSxFQUFlO01BQUE7TUFBQU4sY0FBQSxHQUFBYSxDQUFBO01BQUFiLGNBQUEsR0FBQUUsQ0FBQTtNQUNoQixPQUFPWSxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO1FBQ3JCQyxPQUFBLEVBQVM7UUFDVEMsT0FBQSxFQUFTO1FBQ1RDLE1BQUEsRUFBUTtNQUNaO0lBQ0o7SUFBQTtJQUFBO01BQUFuQixjQUFBLEdBQUFhLENBQUE7SUFBQTtJQUVBO0lBQUFiLGNBQUEsR0FBQUUsQ0FBQTtJQUNBLE9BQU9ZLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7TUFDckJDLE9BQUEsRUFBUztNQUNUQyxPQUFBLEVBQVM7TUFDVEMsTUFBQSxFQUFRO01BQ1JDLE9BQUE7TUFBUztNQUFBLENBQUFwQixjQUFBLEdBQUFhLENBQUEsV0FBQ1AsYUFBQSxDQUFjZSxLQUFLO01BQUE7TUFBQSxDQUFBckIsY0FBQSxHQUFBYSxDQUFBLFVBQUlQLGFBQUEsQ0FBY2UsS0FBSyxDQUFDQyxJQUFJLE9BQU87TUFDaEVDLFdBQUE7TUFBYTtNQUFBLENBQUF2QixjQUFBLEdBQUFhLENBQUEsVUFBQVAsYUFBQSxDQUFjZSxLQUFLLEVBQUVHLE1BQUE7TUFBQTtNQUFBLENBQUF4QixjQUFBLEdBQUFhLENBQUEsVUFBVTtNQUM1Q1ksY0FBQSxFQUFnQm5CLGFBQUEsQ0FBY2UsS0FBSztNQUFBO01BQUEsQ0FBQXJCLGNBQUEsR0FBQWEsQ0FBQSxVQUFHUCxhQUFBLENBQWNlLEtBQUssQ0FBQ0ssU0FBUyxDQUFDLEdBQUc7TUFBQTtNQUFBLENBQUExQixjQUFBLEdBQUFhLENBQUEsVUFBSztNQUM1RWMsV0FBQSxFQUFhckIsYUFBQSxDQUFjc0I7SUFDL0I7RUFDSixFQUFFLE9BQU9DLEtBQUEsRUFBTztJQUFBO0lBQUE3QixjQUFBLEdBQUFFLENBQUE7SUFDWjRCLE9BQUEsQ0FBUUQsS0FBSyxDQUFDLDJCQUEyQkEsS0FBQTtJQUFBO0lBQUE3QixjQUFBLEdBQUFFLENBQUE7SUFDekMsT0FBT1ksT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FDcEI7TUFDSUMsT0FBQSxFQUFTO01BQ1RDLE9BQUEsRUFBUztNQUNUVyxLQUFBLEVBQU9BLEtBQUEsWUFBaUJFLEtBQUE7TUFBQTtNQUFBLENBQUEvQixjQUFBLEdBQUFhLENBQUEsVUFBUWdCLEtBQUEsQ0FBTVgsT0FBTztNQUFBO01BQUEsQ0FBQWxCLGNBQUEsR0FBQWEsQ0FBQSxVQUFHbUIsTUFBQSxDQUFPSCxLQUFBO0lBQzNELEdBQ0E7TUFBRUksTUFBQSxFQUFRO0lBQUk7RUFFdEI7QUFDSiIsImlnbm9yZUxpc3QiOltdfQ==