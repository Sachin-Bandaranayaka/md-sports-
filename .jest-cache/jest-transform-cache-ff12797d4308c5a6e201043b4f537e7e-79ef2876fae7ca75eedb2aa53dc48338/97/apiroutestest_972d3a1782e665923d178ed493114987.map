{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/integration/api-routes.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach, afterEach } from '@jest/globals';\nimport { createMocks } from 'node-mocks-http';\nimport { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\n// Mock Next.js types for testing\ninterface NextRequest {\n  method: string;\n  url: string;\n  headers: Headers;\n  json(): Promise<any>;\n  text(): Promise<string>;\n}\n\ninterface NextResponse {\n  status: number;\n  json: any;\n}\n\n// Mock NextResponse constructor\nconst NextResponse = {\n  json: (data: any, init?: { status?: number }) => ({\n    status: init?.status || 200,\n    json: async () => data,\n  }),\n};\n\n// Helper function to create mock NextRequest\nconst createMockNextRequest = (url: string, options: {\n  method?: string;\n  body?: any;\n  headers?: Record<string, string>;\n} = {}): NextRequest => {\n  const { method = 'GET', body, headers = {} } = options;\n  return {\n    method,\n    url,\n    headers: new Headers(headers),\n    json: async () => body ? (typeof body === 'string' ? JSON.parse(body) : body) : {},\n    text: async () => body ? (typeof body === 'string' ? body : JSON.stringify(body)) : '',\n  } as NextRequest;\n};\n\n// Import API handlers (adjust paths as needed)\n// These would be the actual API route handlers\ninterface MockApiHandler {\n  POST?: (req: NextRequest) => Promise<NextResponse>;\n  GET?: (req: NextRequest) => Promise<NextResponse>;\n  PUT?: (req: NextRequest) => Promise<NextResponse>;\n  DELETE?: (req: NextRequest) => Promise<NextResponse>;\n}\n\n// Mock implementations for testing\nconst mockPrisma = {\n  user: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    findMany: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  product: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  shop: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n  },\n  refreshToken: {\n    create: jest.fn(),\n    findUnique: jest.fn(),\n    delete: jest.fn(),\n  },\n  $disconnect: jest.fn(),\n} as any;\n\n// Mock API handlers\nconst authHandler: MockApiHandler = {\n  POST: async (req: NextRequest) => {\n    const body = await req.json();\n    const { email, password } = body;\n\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: 'Email and password are required' },\n        { status: 400 }\n      );\n    }\n\n    // Find user\n    const user = await mockPrisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      );\n    }\n\n    // Verify password\n    const isValid = await bcrypt.compare(password, user.password);\n    if (!isValid) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      );\n    }\n\n    // Generate token\n    const token = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET || 'test-secret',\n      { expiresIn: '1h' }\n    );\n\n    return NextResponse.json({\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n      },\n      token,\n    });\n  },\n};\n\nconst productsHandler: MockApiHandler = {\n  GET: async (req: NextRequest) => {\n    const url = new URL(req.url);\n    const shopId = url.searchParams.get('shopId');\n    const page = parseInt(url.searchParams.get('page') || '1');\n    const limit = parseInt(url.searchParams.get('limit') || '10');\n    const search = url.searchParams.get('search');\n\n    if (!shopId) {\n      return NextResponse.json(\n        { error: 'Shop ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Build where clause\n    const where: any = { shopId };\n    if (search) {\n      where.OR = [\n        { name: { contains: search, mode: 'insensitive' } },\n        { description: { contains: search, mode: 'insensitive' } },\n        { sku: { contains: search, mode: 'insensitive' } },\n      ];\n    }\n\n    const products = await mockPrisma.product.findMany({\n      where,\n      skip: (page - 1) * limit,\n      take: limit,\n      orderBy: { createdAt: 'desc' },\n    });\n\n    return NextResponse.json({\n      products,\n      pagination: {\n        page,\n        limit,\n        total: products.length,\n      },\n    });\n  },\n\n  POST: async (req: NextRequest) => {\n    const authHeader = req.headers.get('authorization');\n    if (!authHeader?.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.substring(7);\n    try {\n      jwt.verify(token, process.env.JWT_SECRET || 'test-secret');\n    } catch {\n      return NextResponse.json(\n        { error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n\n    const body = await req.json();\n    const { name, description, price, sku, shopId } = body;\n\n    // Validation\n    if (!name || !price || !sku || !shopId) {\n      return NextResponse.json(\n        { error: 'Name, price, SKU, and shop ID are required' },\n        { status: 400 }\n      );\n    }\n\n    if (price <= 0) {\n      return NextResponse.json(\n        { error: 'Price must be greater than 0' },\n        { status: 400 }\n      );\n    }\n\n    // Check if SKU already exists\n    const existingProduct = await mockPrisma.product.findUnique({\n      where: { sku_shopId: { sku, shopId } },\n    });\n\n    if (existingProduct) {\n      return NextResponse.json(\n        { error: 'Product with this SKU already exists' },\n        { status: 409 }\n      );\n    }\n\n    const product = await mockPrisma.product.create({\n      data: {\n        name,\n        description,\n        price,\n        sku,\n        shopId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n\n    return NextResponse.json(product, { status: 201 });\n  },\n};\n\nconst userHandler: MockApiHandler = {\n  GET: async (req: NextRequest) => {\n    const authHeader = req.headers.get('authorization');\n    if (!authHeader?.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.substring(7);\n    let decoded: any;\n    try {\n      decoded = jwt.verify(token, process.env.JWT_SECRET || 'test-secret');\n    } catch {\n      return NextResponse.json(\n        { error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n\n    const user = await mockPrisma.user.findUnique({\n      where: { id: decoded.userId },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        permissions: true,\n        shopId: true,\n        isActive: true,\n      },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { error: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({ user });\n  },\n};\n\ndescribe('API Routes Integration Tests', () => {\n  beforeAll(() => {\n    process.env.JWT_SECRET = 'test-secret';\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  afterAll(async () => {\n    await mockPrisma.$disconnect();\n  });\n\n  describe('POST /api/auth/login', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      password: '$2a$10$hashedPassword',\n      name: 'Test User',\n      shopId: 'shop-1',\n    };\n\n    it('should successfully login with valid credentials', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockResolvedValue(true as never);\n      jest.spyOn(jwt, 'sign').mockReturnValue('mock-token' as never);\n\n      const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: 'test@example.com',\n          password: 'password123',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await authHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data).toEqual({\n        user: {\n          id: 1,\n          email: 'test@example.com',\n          name: 'Test User',\n        },\n        token: 'mock-token',\n      });\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n        where: { email: 'test@example.com' },\n      });\n    });\n\n    it('should return 400 for missing credentials', async () => {\n      // Arrange\n      const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: 'test@example.com',\n          // password missing\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await authHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Email and password are required');\n    });\n\n    it('should return 401 for invalid credentials', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockResolvedValue(null);\n\n      const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: 'nonexistent@example.com',\n          password: 'password123',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await authHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Invalid credentials');\n    });\n\n    it('should return 401 for wrong password', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockResolvedValue(false as never);\n\n      const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: 'test@example.com',\n          password: 'wrongpassword',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await authHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Invalid credentials');\n    });\n  });\n\n  describe('GET /api/products', () => {\n    const mockProducts = [\n      {\n        id: 1,\n        name: 'Product 1',\n        description: 'Description 1',\n        price: 100,\n        sku: 'SKU001',\n        shopId: 'shop-1',\n        createdAt: new Date(),\n      },\n      {\n        id: 2,\n        name: 'Product 2',\n        description: 'Description 2',\n        price: 200,\n        sku: 'SKU002',\n        shopId: 'shop-1',\n        createdAt: new Date(),\n      },\n    ];\n\n    it('should return products for valid shop ID', async () => {\n      // Arrange\n      mockPrisma.product.findMany.mockResolvedValue(mockProducts);\n\n      const request = createMockNextRequest(\n        'http://localhost:3000/api/products?shopId=shop-1&page=1&limit=10'\n      );\n\n      // Act\n      const response = await productsHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data.products).toEqual(mockProducts);\n      expect(data.pagination).toEqual({\n        page: 1,\n        limit: 10,\n        total: 2,\n      });\n    });\n\n    it('should return 400 for missing shop ID', async () => {\n      // Arrange\n      const request = createMockNextRequest('http://localhost:3000/api/products');\n\n      // Act\n      const response = await productsHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Shop ID is required');\n    });\n\n    it('should handle search functionality', async () => {\n      // Arrange\n      const filteredProducts = [mockProducts[0]];\n      mockPrisma.product.findMany.mockResolvedValue(filteredProducts);\n\n      const request = createMockNextRequest(\n        'http://localhost:3000/api/products?shopId=shop-1&search=Product%201'\n      );\n\n      // Act\n      const response = await productsHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data.products).toEqual(filteredProducts);\n      expect(mockPrisma.product.findMany).toHaveBeenCalledWith({\n        where: {\n          shopId: 'shop-1',\n          OR: [\n            { name: { contains: 'Product 1', mode: 'insensitive' } },\n            { description: { contains: 'Product 1', mode: 'insensitive' } },\n            { sku: { contains: 'Product 1', mode: 'insensitive' } },\n          ],\n        },\n        skip: 0,\n        take: 10,\n        orderBy: { createdAt: 'desc' },\n      });\n    });\n  });\n\n  describe('POST /api/products', () => {\n    const validToken = 'valid-token';\n    const mockProduct = {\n      id: 1,\n      name: 'New Product',\n      description: 'New Description',\n      price: 150,\n      sku: 'SKU003',\n      shopId: 'shop-1',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    beforeEach(() => {\n      jest.spyOn(jwt, 'verify').mockReturnValue({ userId: 1 } as never);\n    });\n\n    it('should create product with valid data and auth', async () => {\n      // Arrange\n      mockPrisma.product.findUnique.mockResolvedValue(null); // SKU doesn't exist\n      mockPrisma.product.create.mockResolvedValue(mockProduct);\n\n      const request = createMockNextRequest('http://localhost:3000/api/products', {\n        method: 'POST',\n        body: {\n          name: 'New Product',\n          description: 'New Description',\n          price: 150,\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${validToken}`,\n        },\n      });\n\n      // Act\n      const response = await productsHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(201);\n      expect(data).toEqual(mockProduct);\n      expect(mockPrisma.product.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          name: 'New Product',\n          description: 'New Description',\n          price: 150,\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        }),\n      });\n    });\n\n    it('should return 401 for missing authorization', async () => {\n      // Arrange\n      const request = createMockNextRequest('http://localhost:3000/api/products', {\n        method: 'POST',\n        body: {\n          name: 'New Product',\n          price: 150,\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await productsHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Unauthorized');\n    });\n\n    it('should return 400 for invalid price', async () => {\n      // Arrange\n      const request = createMockNextRequest('http://localhost:3000/api/products', {\n        method: 'POST',\n        body: {\n          name: 'New Product',\n          price: -10, // Invalid price\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${validToken}`,\n        },\n      });\n\n      // Act\n      const response = await productsHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Price must be greater than 0');\n    });\n\n    it('should return 409 for duplicate SKU', async () => {\n      // Arrange\n      mockPrisma.product.findUnique.mockResolvedValue(mockProduct); // SKU exists\n\n      const request = createMockNextRequest('http://localhost:3000/api/products', {\n        method: 'POST',\n        body: {\n          name: 'New Product',\n          price: 150,\n          sku: 'SKU003',\n          shopId: 'shop-1',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${validToken}`,\n        },\n      });\n\n      // Act\n      const response = await productsHandler.POST!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(409);\n      expect(data.error).toBe('Product with this SKU already exists');\n    });\n  });\n\n  describe('GET /api/user', () => {\n    const mockUser = {\n      id: 1,\n      email: 'test@example.com',\n      name: 'Test User',\n      permissions: ['inventory:read', 'sales:create'],\n      shopId: 'shop-1',\n      isActive: true,\n    };\n\n    it('should return user data for valid token', async () => {\n      // Arrange\n      jest.spyOn(jwt, 'verify').mockReturnValue({ userId: 1 } as never);\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n\n      const request = createMockNextRequest('http://localhost:3000/api/user', {\n        headers: {\n          'Authorization': 'Bearer valid-token',\n        },\n      });\n\n      // Act\n      const response = await userHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data.user).toEqual(mockUser);\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n        where: { id: 1 },\n        select: {\n          id: true,\n          email: true,\n          name: true,\n          permissions: true,\n          shopId: true,\n          isActive: true,\n        },\n      });\n    });\n\n    it('should return 401 for invalid token', async () => {\n      // Arrange\n      jest.spyOn(jwt, 'verify').mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      const request = createMockNextRequest('http://localhost:3000/api/user', {\n        headers: {\n          'Authorization': 'Bearer invalid-token',\n        },\n      });\n\n      // Act\n      const response = await userHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Invalid token');\n    });\n\n    it('should return 404 for non-existent user', async () => {\n      // Arrange\n      jest.spyOn(jwt, 'verify').mockReturnValue({ userId: 999 } as never);\n      mockPrisma.user.findUnique.mockResolvedValue(null);\n\n      const request = createMockNextRequest('http://localhost:3000/api/user', {\n        headers: {\n          'Authorization': 'Bearer valid-token',\n        },\n      });\n\n      // Act\n      const response = await userHandler.GET!(request);\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(404);\n      expect(data.error).toBe('User not found');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database connection errors', async () => {\n      // Arrange\n      mockPrisma.user.findUnique.mockRejectedValue(new Error('Database connection failed'));\n\n      const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: {\n          email: 'test@example.com',\n          password: 'password123',\n        },\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act & Assert\n      await expect(authHandler.POST!(request)).rejects.toThrow('Database connection failed');\n    });\n\n    it('should handle malformed JSON requests', async () => {\n      // Arrange\n      const request = createMockNextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        body: 'invalid json',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act & Assert\n      await expect(authHandler.POST!(request)).rejects.toThrow();\n    });\n  });\n\n  describe('Rate Limiting Simulation', () => {\n    it('should handle multiple concurrent requests', async () => {\n      // Arrange\n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        password: '$2a$10$hashedPassword',\n        name: 'Test User',\n        shopId: 'shop-1',\n      };\n      \n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockResolvedValue(true as never);\n      jest.spyOn(jwt, 'sign').mockReturnValue('mock-token' as never);\n\n      const requests = Array.from({ length: 5 }, () => \n        createMockNextRequest('http://localhost:3000/api/auth/login', {\n          method: 'POST',\n          body: {\n            email: 'test@example.com',\n            password: 'password123',\n          },\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n      );\n\n      // Act\n      const responses = await Promise.all(\n        requests.map(req => authHandler.POST!(req))\n      );\n\n      // Assert\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n      });\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledTimes(5);\n    });\n  });\n});"],"names":["NextResponse","json","data","init","status","createMockNextRequest","url","options","method","body","headers","Headers","JSON","parse","text","stringify","mockPrisma","user","findUnique","jest","fn","create","findMany","update","delete","product","shop","refreshToken","$disconnect","authHandler","POST","req","email","password","error","where","isValid","bcrypt","compare","token","jwt","sign","userId","id","process","env","JWT_SECRET","expiresIn","name","productsHandler","GET","URL","shopId","searchParams","get","page","parseInt","limit","search","OR","contains","mode","description","sku","products","skip","take","orderBy","createdAt","pagination","total","length","authHeader","startsWith","substring","verify","price","existingProduct","sku_shopId","Date","updatedAt","userHandler","decoded","select","permissions","isActive","describe","beforeAll","beforeEach","clearAllMocks","afterEach","resetAllMocks","afterAll","mockUser","it","mockResolvedValue","spyOn","mockReturnValue","request","response","expect","toBe","toEqual","toHaveBeenCalledWith","mockProducts","filteredProducts","validToken","mockProduct","objectContaining","mockImplementation","Error","mockRejectedValue","rejects","toThrow","requests","Array","from","responses","Promise","all","map","forEach","toHaveBeenCalledTimes"],"mappings":"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"}