{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/services/smsService.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma';\nimport axios from 'axios';\n\ninterface SMSOptions {\n    to: string;\n    message: string;\n}\n\ninterface NotifyLKResponse {\n    status: number;\n    message: string;\n    data?: any;\n}\n\n/**\n * SMS Service for sending notifications via notify.lk\n */\nexport class SMSService {\n    private apiKey: string | null = null;\n    private userId: string | null = null;\n    private baseUrl = 'https://app.notify.lk/api/v1/send';\n    private isEnabled = false;\n\n    /**\n     * Initialize the SMS service with settings from the database\n     */\n    async init(): Promise<void> {\n        try {\n            // Get settings from database\n            const apiKeySetting = await prisma.systemSettings.findUnique({\n                where: { key: 'sms_api_key' }\n            });\n\n            const userIdSetting = await prisma.systemSettings.findUnique({\n                where: { key: 'sms_user_id' }\n            });\n\n            const enabledSetting = await prisma.systemSettings.findUnique({\n                where: { key: 'sms_enabled' }\n            });\n\n            this.apiKey = apiKeySetting?.value || null;\n            this.userId = userIdSetting?.value || null;\n            this.isEnabled = enabledSetting?.value === 'true';\n        } catch (error) {\n            console.error('Failed to initialize SMS service:', error);\n        }\n    }\n\n    /**\n     * Check if the SMS service is properly configured\n     */\n    isConfigured(): boolean {\n        return !!(this.apiKey && this.userId && this.isEnabled);\n    }\n\n    /**\n     * Send an SMS message\n     * @param options SMS options including recipient and message\n     * @returns Response from notify.lk API\n     */\n    async sendSMS(options: SMSOptions): Promise<NotifyLKResponse> {\n        // Initialize if not already initialized\n        if (!this.apiKey || !this.userId) {\n            await this.init();\n        }\n\n        // Check if service is configured and enabled\n        if (!this.isConfigured()) {\n            return {\n                status: 400,\n                message: 'SMS service is not configured or disabled'\n            };\n        }\n\n        // Format phone number (remove spaces, ensure it starts with 94 for Sri Lanka)\n        let phoneNumber = options.to.replace(/\\s+/g, '');\n        if (phoneNumber.startsWith('0')) {\n            phoneNumber = '94' + phoneNumber.substring(1);\n        } else if (!phoneNumber.startsWith('94')) {\n            phoneNumber = '94' + phoneNumber;\n        }\n\n        try {\n            const response = await axios.get(this.baseUrl, {\n                params: {\n                    user_id: this.userId,\n                    api_key: this.apiKey,\n                    sender_id: 'NotifyDEMO',\n                    to: phoneNumber,\n                    message: options.message\n                }\n            });\n\n            return {\n                status: response.status,\n                message: 'SMS sent successfully',\n                data: response.data\n            };\n        } catch (error) {\n            console.error('Failed to send SMS:', error);\n            return {\n                status: 500,\n                message: error instanceof Error ? error.message : 'Failed to send SMS'\n            };\n        }\n    }\n\n    /**\n     * Send invoice notification to customer\n     * @param invoiceId Invoice ID\n     * @returns Response from notify.lk API\n     */\n    async sendInvoiceNotification(invoiceId: number): Promise<NotifyLKResponse> {\n        try {\n            // Get invoice with customer details\n            const invoice = await prisma.invoice.findUnique({\n                where: { id: invoiceId },\n                include: {\n                    customer: true\n                }\n            });\n\n            if (!invoice) {\n                return {\n                    status: 404,\n                    message: 'Invoice not found'\n                };\n            }\n\n            if (!invoice.customer.phone) {\n                return {\n                    status: 400,\n                    message: 'Customer phone number not available'\n                };\n            }\n\n            // Prepare message\n            const message = `Dear ${invoice.customer.name}, your invoice #${invoice.invoiceNumber} for LKR ${invoice.total.toFixed(2)} has been created. Thank you for your business with MS Sport.`;\n\n            // Send SMS\n            return this.sendSMS({\n                to: invoice.customer.phone,\n                message\n            });\n        } catch (error) {\n            console.error('Failed to send invoice notification:', error);\n            return {\n                status: 500,\n                message: error instanceof Error ? error.message : 'Failed to send invoice notification'\n            };\n        }\n    }\n\n    /**\n     * Send payment reminder for overdue invoices\n     * @param invoiceId Invoice ID\n     * @returns Response from notify.lk API\n     */\n    async sendPaymentReminder(invoiceId: number): Promise<NotifyLKResponse> {\n        try {\n            // Get invoice with customer details\n            const invoice = await prisma.invoice.findUnique({\n                where: { id: invoiceId },\n                include: {\n                    customer: true\n                }\n            });\n\n            if (!invoice) {\n                return {\n                    status: 404,\n                    message: 'Invoice not found'\n                };\n            }\n\n            if (!invoice.customer.phone) {\n                return {\n                    status: 400,\n                    message: 'Customer phone number not available'\n                };\n            }\n\n            // Prepare message\n            const message = `Dear ${invoice.customer.name}, this is a reminder that invoice #${invoice.invoiceNumber} for LKR ${invoice.total.toFixed(2)} is overdue. Please make payment at your earliest convenience.`;\n\n            // Send SMS\n            return this.sendSMS({\n                to: invoice.customer.phone,\n                message\n            });\n        } catch (error) {\n            console.error('Failed to send payment reminder:', error);\n            return {\n                status: 500,\n                message: error instanceof Error ? error.message : 'Failed to send payment reminder'\n            };\n        }\n    }\n}\n\n// Export singleton instance\nexport const smsService = new SMSService(); "],"names":["SMSService","smsService","init","apiKeySetting","prisma","systemSettings","findUnique","where","key","userIdSetting","enabledSetting","apiKey","value","userId","isEnabled","error","console","isConfigured","sendSMS","options","status","message","phoneNumber","to","replace","startsWith","substring","response","axios","get","baseUrl","params","user_id","api_key","sender_id","data","Error","sendInvoiceNotification","invoiceId","invoice","id","include","customer","phone","name","invoiceNumber","total","toFixed","sendPaymentReminder"],"mappings":"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"}