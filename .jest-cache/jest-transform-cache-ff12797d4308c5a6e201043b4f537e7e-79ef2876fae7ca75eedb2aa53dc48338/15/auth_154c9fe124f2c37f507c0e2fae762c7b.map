{"version":3,"names":["authOptions","cov_170jsuow5d","f","s","extractToken","getShopIdFromToken","getUserIdFromToken","validateTokenPermission","verifyToken","JWT_SECRET","b","process","env","secretKey","TextEncoder","encode","secret","session","strategy","maxAge","callbacks","jwt","token","user","id","permissions","payload","_jose","jwtVerify","error","code","console","message","req","authHeader","headers","get","startsWith","split","permission","log","substring","isValid","userId","Number","sub","Array","isArray","hasPermission","includes","_prisma","default","findUnique","where","undefined","Error","String","shopId"],"sources":["/Users/sachin/Documents/md-sports-/src/lib/auth.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\n// import jwt from 'jsonwebtoken'; replaced\nimport * as jose from 'jose';\nimport prisma from '@/lib/prisma';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'default-secret-key-for-development';\nconst secretKey = new TextEncoder().encode(JWT_SECRET);\n\n// Export authOptions for NextAuth\nexport const authOptions = {\n  secret: JWT_SECRET,\n  session: {\n    strategy: 'jwt' as const,\n    maxAge: 24 * 60 * 60, // 24 hours\n  },\n  callbacks: {\n    async jwt({ token, user }: { token: any; user?: any }) {\n      if (user) {\n        token.id = user.id;\n        token.permissions = user.permissions;\n      }\n      return token;\n    },\n    async session({ session, token }: { session: any; token: any }) {\n      if (token && session.user) {\n        session.user.id = token.id;\n        session.user.permissions = token.permissions;\n      }\n      return session;\n    }\n  }\n};\n\n/**\n * Verify a JWT token\n */\nexport const verifyToken = async (token: string): Promise<jose.JWTPayload | null> => {\n    try {\n        const { payload } = await jose.jwtVerify(token, secretKey, {\n            // Assuming HS256 algorithm, adjust if different\n            // algorithms: ['HS256'] \n        });\n        return payload;\n    } catch (error: any) {\n        if (error.code === 'ERR_JWT_EXPIRED') {\n            console.error('Token expired:', error.message);\n        } else if (error.code === 'ERR_JWS_INVALID' || error.code === 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED' || error.code === 'ERR_JWT_CLAIM_VALIDATION_FAILED') {\n            console.error('Invalid token:', error.message);\n        } else {\n            console.error('Token verification error:', error.message);\n        }\n        return null;\n    }\n};\n\n/**\n * Extract token from authorization header\n */\nexport const extractToken = (req: NextRequest): string | null => {\n    const authHeader = req.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return null;\n    }\n    return authHeader.split(' ')[1];\n};\n\n/**\n * Validate if a user has a specific permission\n * @param req - Next.js request object\n * @param permission - Permission string to check\n * @returns Object with isValid flag and optional error message\n */\nexport const validateTokenPermission = async (req: NextRequest, permission: string): Promise<{ isValid: boolean; message?: string }> => {\n    try {\n        const token = extractToken(req);\n        console.log(`Checking permission \"${permission}\" with token: ${token ? `${token.substring(0, 10)}...` : 'none'}`);\n\n        if (!token) {\n            console.error('No token provided when checking permission:', permission);\n            return { isValid: false, message: 'Authentication required' };\n        }\n\n        // Special case for development token\n        if (token === 'dev-token') {\n            console.log(`Development mode: granting permission '${permission}'`);\n            return { isValid: true };\n        }\n\n        const payload = await verifyToken(token);\n        console.log('Token payload:', payload);\n\n        if (!payload || typeof payload !== 'object' || !('sub' in payload)) {\n            console.error('Invalid token payload when checking permission:', permission);\n            return { isValid: false, message: 'Invalid authentication token' };\n        }\n\n        const userId = Number(payload.sub);\n\n        // Check if permission is in the token payload directly\n        if (payload.permissions && Array.isArray(payload.permissions)) {\n            const hasPermission = payload.permissions.includes(permission);\n            console.log(`Permission check from token for \"${permission}\": ${hasPermission ? 'GRANTED' : 'DENIED'}`);\n            \n            if (hasPermission) {\n                return { isValid: true };\n            }\n        }\n\n        // If not in token or as fallback, get user with permissions from database\n        const user = await prisma.user.findUnique({\n            where: { id: userId }\n        });\n\n        if (!user) {\n            console.error(`User not found for ID: ${userId}`);\n            return { isValid: false, message: 'User not found' };\n        }\n\n        if (!user.permissions || !Array.isArray(user.permissions)) {\n            console.error(`User ${userId} has no permissions array`);\n            return { isValid: false, message: 'User has no permissions' };\n        }\n\n        // Check if user has the required permission\n        console.log(`User ${userId} permissions:`, user.permissions);\n        const hasPermission = user.permissions.includes(permission);\n        console.log(`Permission check result for \"${permission}\": ${hasPermission ? 'GRANTED' : 'DENIED'}`);\n\n        return {\n            isValid: hasPermission,\n            message: hasPermission ? undefined : `Permission denied: '${permission}' is required`\n        };\n    } catch (error) {\n        console.error(`Error checking permission ${permission}:`, error);\n        return { isValid: false, message: `Error checking permission: ${error instanceof Error ? error.message : String(error)}` };\n    }\n};\n\n/**\n * Get user ID from token\n */\nexport const getUserIdFromToken = async (req: NextRequest): Promise<number | null> => {\n    const token = extractToken(req);\n\n    if (!token) {\n        return null;\n    }\n\n    // Special case for development token\n    if (token === 'dev-token') {\n        return 1; // Development user ID\n    }\n\n    const payload = await verifyToken(token);\n\n    if (!payload || typeof payload !== 'object' || !('sub' in payload)) {\n        return null;\n    }\n\n    return Number(payload.sub);\n};\n\n/**\n * Get shop ID from token\n */\nexport const getShopIdFromToken = async (req: NextRequest): Promise<string | null> => {\n    const token = extractToken(req);\n\n    if (!token) {\n        return null;\n    }\n\n    // Special case for development token - assign to first shop for testing shop staff behavior\n    if (token === 'dev-token') {\n        return 'cmbtr9q6l000061romoxi7uvf'; // Assign dev-token to first shop from database\n    }\n\n    const payload = await verifyToken(token);\n\n    if (!payload || typeof payload !== 'object') {\n        return null;\n    }\n\n    // Extract shop ID from token as string to match database schema\n    return 'shopId' in payload ? String(payload.shopId) : null;\n};"],"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","ignoreList":[]}