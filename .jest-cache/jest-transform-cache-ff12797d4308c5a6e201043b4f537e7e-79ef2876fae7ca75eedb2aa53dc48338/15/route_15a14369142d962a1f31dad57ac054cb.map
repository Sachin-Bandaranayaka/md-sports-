{"version":3,"names":["DELETE","cov_f1qq8m28t","f","s","GET","PUT","request","params","id","parseInt","isNaN","b","_server","NextResponse","json","error","status","receipt","_prisma","prisma","findUnique","where","include","payment","customer","invoice","confirmedByUser","console","receiptData","existingReceipt","updatedReceipt","update","data","receiptDate","Date","undefined","bankName","accountNumber","chequeNumber","transactionId","notes","confirmedBy","token","headers","get","replace","userId","decoded","_auth","verifyToken","warn","$transaction","tx","relatedTransaction","transaction","findFirst","reference","receiptNumber","type","account","accountId","balance","decrement","amount","delete","totalPayments","aggregate","invoiceId","isNot","_sum","totalPaid","select","total","invoiceTotal","newStatus","auditService","_auditService","AuditService","softDelete","success"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/receipts/[id]/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\n// Get a single receipt by ID\nexport async function GET(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        const receipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: {\n                payment: {\n                    include: {\n                        customer: true,\n                        invoice: true\n                    }\n                },\n                confirmedByUser: true\n            }\n        });\n\n        if (!receipt) {\n            return NextResponse.json(\n                { error: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(receipt);\n    } catch (error) {\n        console.error('Error fetching receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch receipt' },\n            { status: 500 }\n        );\n    }\n}\n\n// Update a receipt\nexport async function PUT(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        const receiptData = await request.json();\n\n        // Check if receipt exists\n        const existingReceipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: { payment: true }\n        });\n\n        if (!existingReceipt) {\n            return NextResponse.json(\n                { error: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        // Update receipt\n        const updatedReceipt = await prisma.receipt.update({\n            where: { id },\n            data: {\n                receiptDate: receiptData.receiptDate ? new Date(receiptData.receiptDate) : undefined,\n                bankName: receiptData.bankName !== undefined ? receiptData.bankName : undefined,\n                accountNumber: receiptData.accountNumber !== undefined ? receiptData.accountNumber : undefined,\n                chequeNumber: receiptData.chequeNumber !== undefined ? receiptData.chequeNumber : undefined,\n                transactionId: receiptData.transactionId !== undefined ? receiptData.transactionId : undefined,\n                notes: receiptData.notes !== undefined ? receiptData.notes : undefined,\n                confirmedBy: receiptData.confirmedBy !== undefined ? receiptData.confirmedBy : undefined\n            },\n            include: {\n                payment: {\n                    include: {\n                        customer: true,\n                        invoice: true\n                    }\n                },\n                confirmedByUser: true\n            }\n        });\n\n        return NextResponse.json(updatedReceipt);\n    } catch (error) {\n        console.error('Error updating receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to update receipt' },\n            { status: 500 }\n        );\n    }\n}\n\n// Delete a receipt\nexport async function DELETE(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        // Check if receipt exists\n        const existingReceipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: { payment: true }\n        });\n\n        if (!existingReceipt) {\n            return NextResponse.json(\n                { error: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        // Get user ID from token for audit logging\n        const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n        let userId = 1; // Default system user ID\n        \n        if (token) {\n            try {\n                const decoded = await verifyToken(token);\n                if (decoded && decoded.userId) {\n                    userId = decoded.userId;\n                }\n            } catch (error) {\n                console.warn('Invalid token for audit logging, using default user ID');\n            }\n        }\n\n        // Delete receipt and recalculate invoice status\n        await prisma.$transaction(async (tx) => {\n            // Find the related accounting transaction to reverse it\n            const relatedTransaction = await tx.transaction.findFirst({\n                where: {\n                    reference: existingReceipt.receiptNumber,\n                    type: 'income'\n                },\n                include: { account: true }\n            });\n\n            if (relatedTransaction) {\n                // Reverse the account balance\n                await tx.account.update({\n                    where: { id: relatedTransaction.accountId },\n                    data: {\n                        balance: {\n                            decrement: relatedTransaction.amount\n                        }\n                    }\n                });\n\n                // Delete the accounting transaction\n                await tx.transaction.delete({\n                    where: { id: relatedTransaction.id }\n                });\n            }\n\n            // Delete the receipt\n            await tx.receipt.delete({\n                where: { id }\n            });\n\n            // Recalculate invoice status based on remaining payments with receipts\n            // Only count payments that have receipts (confirmed payments)\n            const totalPayments = await tx.payment.aggregate({\n                where: { \n                    invoiceId: existingReceipt.payment.invoiceId,\n                    receipt: {\n                        isNot: null\n                    }\n                },\n                _sum: { amount: true }\n            });\n\n            const totalPaid = totalPayments._sum.amount || 0;\n\n            // Get invoice total\n            const invoice = await tx.invoice.findUnique({\n                where: { id: existingReceipt.payment.invoiceId },\n                select: { total: true }\n            });\n\n            const invoiceTotal = invoice?.total || 0;\n\n            // Determine the correct status based on remaining payment amount\n            let newStatus = 'pending';\n            if (totalPaid >= invoiceTotal) {\n                newStatus = 'paid';\n            } else if (totalPaid > 0) {\n                newStatus = 'partial';\n            }\n\n            // Update invoice status based on remaining payments\n            await tx.invoice.update({\n                where: { id: existingReceipt.payment.invoiceId },\n                data: { status: newStatus }\n            });\n        });\n\n        // Log the deletion to the audit trail\n        const auditService = new AuditService();\n        await auditService.softDelete(\n            'Receipt',\n            id,\n            existingReceipt,\n            userId,\n            true // canRecover\n        );\n\n        return NextResponse.json({ success: true });\n    } catch (error) {\n        console.error('Error deleting receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to delete receipt' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}