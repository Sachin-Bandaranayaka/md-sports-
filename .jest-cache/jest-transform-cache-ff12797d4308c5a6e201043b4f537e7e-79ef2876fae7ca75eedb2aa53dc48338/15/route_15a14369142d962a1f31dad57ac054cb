86448e22d7e749c95dea1720337039f6
"use strict";

/* istanbul ignore next */
function cov_f1qq8m28t() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/receipts/[id]/route.ts";
  var hash = "eccbe80721ac8adbbbea068623e722e4579ca31a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/receipts/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "9": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "10": {
        start: {
          line: 25,
          column: 14
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "12": {
        start: {
          line: 28,
          column: 19
        },
        end: {
          line: 28,
          column: 38
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "15": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "16": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "17": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "18": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 50
        }
      },
      "19": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 56
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "21": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "22": {
        start: {
          line: 69,
          column: 19
        },
        end: {
          line: 69,
          column: 38
        }
      },
      "23": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "24": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "25": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 48
        }
      },
      "26": {
        start: {
          line: 79,
          column: 32
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "27": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "28": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "29": {
        start: {
          line: 95,
          column: 31
        },
        end: {
          line: 117,
          column: 10
        }
      },
      "30": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 57
        }
      },
      "31": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 56
        }
      },
      "32": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "33": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 259,
          column: 5
        }
      },
      "34": {
        start: {
          line: 130,
          column: 19
        },
        end: {
          line: 130,
          column: 38
        }
      },
      "35": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "36": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "37": {
        start: {
          line: 139,
          column: 32
        },
        end: {
          line: 146,
          column: 10
        }
      },
      "38": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "39": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 152,
          column: 15
        }
      },
      "40": {
        start: {
          line: 155,
          column: 22
        },
        end: {
          line: 155,
          column: 82
        }
      },
      "41": {
        start: {
          line: 156,
          column: 21
        },
        end: {
          line: 156,
          column: 22
        }
      },
      "42": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "43": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "44": {
        start: {
          line: 159,
          column: 32
        },
        end: {
          line: 159,
          column: 67
        }
      },
      "45": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 162,
          column: 17
        }
      },
      "46": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 161,
          column: 44
        }
      },
      "47": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 87
        }
      },
      "48": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 244,
          column: 11
        }
      },
      "49": {
        start: {
          line: 170,
          column: 39
        },
        end: {
          line: 178,
          column: 14
        }
      },
      "50": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "51": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 190,
          column: 19
        }
      },
      "52": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 196,
          column: 19
        }
      },
      "53": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 203,
          column: 15
        }
      },
      "54": {
        start: {
          line: 206,
          column: 34
        },
        end: {
          line: 216,
          column: 14
        }
      },
      "55": {
        start: {
          line: 217,
          column: 30
        },
        end: {
          line: 217,
          column: 60
        }
      },
      "56": {
        start: {
          line: 219,
          column: 28
        },
        end: {
          line: 226,
          column: 14
        }
      },
      "57": {
        start: {
          line: 227,
          column: 33
        },
        end: {
          line: 227,
          column: 52
        }
      },
      "58": {
        start: {
          line: 229,
          column: 28
        },
        end: {
          line: 229,
          column: 37
        }
      },
      "59": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "60": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 35
        }
      },
      "61": {
        start: {
          line: 232,
          column: 19
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "62": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 38
        }
      },
      "63": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 243,
          column: 15
        }
      },
      "64": {
        start: {
          line: 246,
          column: 29
        },
        end: {
          line: 246,
          column: 61
        }
      },
      "65": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 248,
          column: 10
        }
      },
      "66": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "67": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 56
        }
      },
      "68": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 258,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 40
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "PUT",
        decl: {
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 67,
            column: 18
          }
        },
        loc: {
          start: {
            line: 67,
            column: 40
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 67
      },
      "6": {
        name: "DELETE",
        decl: {
          start: {
            line: 128,
            column: 15
          },
          end: {
            line: 128,
            column: 21
          }
        },
        loc: {
          start: {
            line: 128,
            column: 43
          },
          end: {
            line: 260,
            column: 1
          }
        },
        line: 128
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 168,
            column: 42
          },
          end: {
            line: 168,
            column: 43
          }
        },
        loc: {
          start: {
            line: 168,
            column: 54
          },
          end: {
            line: 244,
            column: 9
          }
        },
        line: 168
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "2": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "3": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "4": {
        loc: {
          start: {
            line: 100,
            column: 29
          },
          end: {
            line: 100,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 55
          },
          end: {
            line: 100,
            column: 88
          }
        }, {
          start: {
            line: 100,
            column: 91
          },
          end: {
            line: 100,
            column: 100
          }
        }],
        line: 100
      },
      "5": {
        loc: {
          start: {
            line: 101,
            column: 26
          },
          end: {
            line: 101,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 101,
            column: 63
          },
          end: {
            line: 101,
            column: 83
          }
        }, {
          start: {
            line: 101,
            column: 86
          },
          end: {
            line: 101,
            column: 95
          }
        }],
        line: 101
      },
      "6": {
        loc: {
          start: {
            line: 102,
            column: 31
          },
          end: {
            line: 102,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 73
          },
          end: {
            line: 102,
            column: 98
          }
        }, {
          start: {
            line: 102,
            column: 101
          },
          end: {
            line: 102,
            column: 110
          }
        }],
        line: 102
      },
      "7": {
        loc: {
          start: {
            line: 103,
            column: 30
          },
          end: {
            line: 103,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 71
          },
          end: {
            line: 103,
            column: 95
          }
        }, {
          start: {
            line: 103,
            column: 98
          },
          end: {
            line: 103,
            column: 107
          }
        }],
        line: 103
      },
      "8": {
        loc: {
          start: {
            line: 104,
            column: 31
          },
          end: {
            line: 104,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 73
          },
          end: {
            line: 104,
            column: 98
          }
        }, {
          start: {
            line: 104,
            column: 101
          },
          end: {
            line: 104,
            column: 110
          }
        }],
        line: 104
      },
      "9": {
        loc: {
          start: {
            line: 105,
            column: 23
          },
          end: {
            line: 105,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 57
          },
          end: {
            line: 105,
            column: 74
          }
        }, {
          start: {
            line: 105,
            column: 77
          },
          end: {
            line: 105,
            column: 86
          }
        }],
        line: 105
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 29
          },
          end: {
            line: 106,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 69
          },
          end: {
            line: 106,
            column: 92
          }
        }, {
          start: {
            line: 106,
            column: 95
          },
          end: {
            line: 106,
            column: 104
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "12": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "13": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "14": {
        loc: {
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 162,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 162,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "15": {
        loc: {
          start: {
            line: 160,
            column: 20
          },
          end: {
            line: 160,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 20
          },
          end: {
            line: 160,
            column: 27
          }
        }, {
          start: {
            line: 160,
            column: 31
          },
          end: {
            line: 160,
            column: 45
          }
        }],
        line: 160
      },
      "16": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "17": {
        loc: {
          start: {
            line: 217,
            column: 30
          },
          end: {
            line: 217,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 30
          },
          end: {
            line: 217,
            column: 55
          }
        }, {
          start: {
            line: 217,
            column: 59
          },
          end: {
            line: 217,
            column: 60
          }
        }],
        line: 217
      },
      "18": {
        loc: {
          start: {
            line: 227,
            column: 33
          },
          end: {
            line: 227,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 33
          },
          end: {
            line: 227,
            column: 47
          }
        }, {
          start: {
            line: 227,
            column: 51
          },
          end: {
            line: 227,
            column: 52
          }
        }],
        line: 227
      },
      "19": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: 232,
            column: 19
          },
          end: {
            line: 234,
            column: 13
          }
        }],
        line: 230
      },
      "20": {
        loc: {
          start: {
            line: 232,
            column: 19
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 19
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/receipts/[id]/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { AuditService } from '@/services/auditService';\nimport { verifyToken } from '@/lib/auth';\n\n// Get a single receipt by ID\nexport async function GET(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        const receipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: {\n                payment: {\n                    include: {\n                        customer: true,\n                        invoice: true\n                    }\n                },\n                confirmedByUser: true\n            }\n        });\n\n        if (!receipt) {\n            return NextResponse.json(\n                { error: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        return NextResponse.json(receipt);\n    } catch (error) {\n        console.error('Error fetching receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch receipt' },\n            { status: 500 }\n        );\n    }\n}\n\n// Update a receipt\nexport async function PUT(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        const receiptData = await request.json();\n\n        // Check if receipt exists\n        const existingReceipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: { payment: true }\n        });\n\n        if (!existingReceipt) {\n            return NextResponse.json(\n                { error: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        // Update receipt\n        const updatedReceipt = await prisma.receipt.update({\n            where: { id },\n            data: {\n                receiptDate: receiptData.receiptDate ? new Date(receiptData.receiptDate) : undefined,\n                bankName: receiptData.bankName !== undefined ? receiptData.bankName : undefined,\n                accountNumber: receiptData.accountNumber !== undefined ? receiptData.accountNumber : undefined,\n                chequeNumber: receiptData.chequeNumber !== undefined ? receiptData.chequeNumber : undefined,\n                transactionId: receiptData.transactionId !== undefined ? receiptData.transactionId : undefined,\n                notes: receiptData.notes !== undefined ? receiptData.notes : undefined,\n                confirmedBy: receiptData.confirmedBy !== undefined ? receiptData.confirmedBy : undefined\n            },\n            include: {\n                payment: {\n                    include: {\n                        customer: true,\n                        invoice: true\n                    }\n                },\n                confirmedByUser: true\n            }\n        });\n\n        return NextResponse.json(updatedReceipt);\n    } catch (error) {\n        console.error('Error updating receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to update receipt' },\n            { status: 500 }\n        );\n    }\n}\n\n// Delete a receipt\nexport async function DELETE(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    try {\n        const id = parseInt(params.id);\n\n        if (isNaN(id)) {\n            return NextResponse.json(\n                { error: 'Invalid receipt ID' },\n                { status: 400 }\n            );\n        }\n\n        // Check if receipt exists\n        const existingReceipt = await prisma.receipt.findUnique({\n            where: { id },\n            include: { payment: true }\n        });\n\n        if (!existingReceipt) {\n            return NextResponse.json(\n                { error: 'Receipt not found' },\n                { status: 404 }\n            );\n        }\n\n        // Get user ID from token for audit logging\n        const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n        let userId = 1; // Default system user ID\n        \n        if (token) {\n            try {\n                const decoded = await verifyToken(token);\n                if (decoded && decoded.userId) {\n                    userId = decoded.userId;\n                }\n            } catch (error) {\n                console.warn('Invalid token for audit logging, using default user ID');\n            }\n        }\n\n        // Delete receipt and recalculate invoice status\n        await prisma.$transaction(async (tx) => {\n            // Find the related accounting transaction to reverse it\n            const relatedTransaction = await tx.transaction.findFirst({\n                where: {\n                    reference: existingReceipt.receiptNumber,\n                    type: 'income'\n                },\n                include: { account: true }\n            });\n\n            if (relatedTransaction) {\n                // Reverse the account balance\n                await tx.account.update({\n                    where: { id: relatedTransaction.accountId },\n                    data: {\n                        balance: {\n                            decrement: relatedTransaction.amount\n                        }\n                    }\n                });\n\n                // Delete the accounting transaction\n                await tx.transaction.delete({\n                    where: { id: relatedTransaction.id }\n                });\n            }\n\n            // Delete the receipt\n            await tx.receipt.delete({\n                where: { id }\n            });\n\n            // Recalculate invoice status based on remaining payments with receipts\n            // Only count payments that have receipts (confirmed payments)\n            const totalPayments = await tx.payment.aggregate({\n                where: { \n                    invoiceId: existingReceipt.payment.invoiceId,\n                    receipt: {\n                        isNot: null\n                    }\n                },\n                _sum: { amount: true }\n            });\n\n            const totalPaid = totalPayments._sum.amount || 0;\n\n            // Get invoice total\n            const invoice = await tx.invoice.findUnique({\n                where: { id: existingReceipt.payment.invoiceId },\n                select: { total: true }\n            });\n\n            const invoiceTotal = invoice?.total || 0;\n\n            // Determine the correct status based on remaining payment amount\n            let newStatus = 'pending';\n            if (totalPaid >= invoiceTotal) {\n                newStatus = 'paid';\n            } else if (totalPaid > 0) {\n                newStatus = 'partial';\n            }\n\n            // Update invoice status based on remaining payments\n            await tx.invoice.update({\n                where: { id: existingReceipt.payment.invoiceId },\n                data: { status: newStatus }\n            });\n        });\n\n        // Log the deletion to the audit trail\n        const auditService = new AuditService();\n        await auditService.softDelete(\n            'Receipt',\n            id,\n            existingReceipt,\n            userId,\n            true // canRecover\n        );\n\n        return NextResponse.json({ success: true });\n    } catch (error) {\n        console.error('Error deleting receipt:', error);\n        return NextResponse.json(\n            { error: 'Failed to delete receipt' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "id", "parseInt", "isNaN", "NextResponse", "json", "error", "status", "receipt", "prisma", "findUnique", "where", "include", "payment", "customer", "invoice", "confirmedByUser", "console", "receiptData", "existingReceipt", "updatedReceipt", "update", "data", "receiptDate", "Date", "undefined", "bankName", "accountNumber", "chequeNumber", "transactionId", "notes", "confirmedBy", "token", "headers", "get", "replace", "userId", "decoded", "verifyToken", "warn", "$transaction", "tx", "relatedTransaction", "transaction", "findFirst", "reference", "receiptNumber", "type", "account", "accountId", "balance", "decrement", "amount", "delete", "totalPayments", "aggregate", "invoiceId", "isNot", "_sum", "totalPaid", "select", "total", "invoiceTotal", "newStatus", "auditService", "AuditService", "softDelete", "success"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eccbe80721ac8adbbbea068623e722e4579ca31a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_f1qq8m28t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f1qq8m28t();
cov_f1qq8m28t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_f1qq8m28t().f[0]++;
  cov_f1qq8m28t().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_f1qq8m28t().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_f1qq8m28t().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_f1qq8m28t().f[1]++;
    cov_f1qq8m28t().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_f1qq8m28t().f[2]++;
    cov_f1qq8m28t().s[5]++;
    return GET;
  },
  PUT: function () {
    /* istanbul ignore next */
    cov_f1qq8m28t().f[3]++;
    cov_f1qq8m28t().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_f1qq8m28t().s[7]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_f1qq8m28t().s[8]++, require("../../../../lib/prisma"));
const _auditService =
/* istanbul ignore next */
(cov_f1qq8m28t().s[9]++, require("../../../../services/auditService"));
const _auth =
/* istanbul ignore next */
(cov_f1qq8m28t().s[10]++, require("../../../../lib/auth"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_f1qq8m28t().f[4]++;
  cov_f1qq8m28t().s[11]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[12]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[13]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[0][0]++;
      cov_f1qq8m28t().s[14]++;
      return _server.NextResponse.json({
        error: "Invalid receipt ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[0][1]++;
    }
    const receipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[15]++, await _prisma.prisma.receipt.findUnique({
      where: {
        id
      },
      include: {
        payment: {
          include: {
            customer: true,
            invoice: true
          }
        },
        confirmedByUser: true
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[16]++;
    if (!receipt) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[1][0]++;
      cov_f1qq8m28t().s[17]++;
      return _server.NextResponse.json({
        error: "Receipt not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[1][1]++;
    }
    cov_f1qq8m28t().s[18]++;
    return _server.NextResponse.json(receipt);
  } catch (error) {
    /* istanbul ignore next */
    cov_f1qq8m28t().s[19]++;
    console.error("Error fetching receipt:", error);
    /* istanbul ignore next */
    cov_f1qq8m28t().s[20]++;
    return _server.NextResponse.json({
      error: "Failed to fetch receipt"
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_f1qq8m28t().f[5]++;
  cov_f1qq8m28t().s[21]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[22]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[23]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[2][0]++;
      cov_f1qq8m28t().s[24]++;
      return _server.NextResponse.json({
        error: "Invalid receipt ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[2][1]++;
    }
    const receiptData =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[25]++, await request.json());
    // Check if receipt exists
    const existingReceipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[26]++, await _prisma.prisma.receipt.findUnique({
      where: {
        id
      },
      include: {
        payment: true
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[27]++;
    if (!existingReceipt) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[3][0]++;
      cov_f1qq8m28t().s[28]++;
      return _server.NextResponse.json({
        error: "Receipt not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[3][1]++;
    }
    // Update receipt
    const updatedReceipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[29]++, await _prisma.prisma.receipt.update({
      where: {
        id
      },
      data: {
        receiptDate: receiptData.receiptDate ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[4][0]++, new Date(receiptData.receiptDate)) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[4][1]++, undefined),
        bankName: receiptData.bankName !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[5][0]++, receiptData.bankName) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[5][1]++, undefined),
        accountNumber: receiptData.accountNumber !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[6][0]++, receiptData.accountNumber) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[6][1]++, undefined),
        chequeNumber: receiptData.chequeNumber !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[7][0]++, receiptData.chequeNumber) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[7][1]++, undefined),
        transactionId: receiptData.transactionId !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[8][0]++, receiptData.transactionId) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[8][1]++, undefined),
        notes: receiptData.notes !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[9][0]++, receiptData.notes) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[9][1]++, undefined),
        confirmedBy: receiptData.confirmedBy !== undefined ?
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[10][0]++, receiptData.confirmedBy) :
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[10][1]++, undefined)
      },
      include: {
        payment: {
          include: {
            customer: true,
            invoice: true
          }
        },
        confirmedByUser: true
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[30]++;
    return _server.NextResponse.json(updatedReceipt);
  } catch (error) {
    /* istanbul ignore next */
    cov_f1qq8m28t().s[31]++;
    console.error("Error updating receipt:", error);
    /* istanbul ignore next */
    cov_f1qq8m28t().s[32]++;
    return _server.NextResponse.json({
      error: "Failed to update receipt"
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_f1qq8m28t().f[6]++;
  cov_f1qq8m28t().s[33]++;
  try {
    const id =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[34]++, parseInt(params.id));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[35]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[11][0]++;
      cov_f1qq8m28t().s[36]++;
      return _server.NextResponse.json({
        error: "Invalid receipt ID"
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[11][1]++;
    }
    // Check if receipt exists
    const existingReceipt =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[37]++, await _prisma.prisma.receipt.findUnique({
      where: {
        id
      },
      include: {
        payment: true
      }
    }));
    /* istanbul ignore next */
    cov_f1qq8m28t().s[38]++;
    if (!existingReceipt) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[12][0]++;
      cov_f1qq8m28t().s[39]++;
      return _server.NextResponse.json({
        error: "Receipt not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[12][1]++;
    }
    // Get user ID from token for audit logging
    const token =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[40]++, request.headers.get("Authorization")?.replace("Bearer ", ""));
    let userId =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[41]++, 1); // Default system user ID
    /* istanbul ignore next */
    cov_f1qq8m28t().s[42]++;
    if (token) {
      /* istanbul ignore next */
      cov_f1qq8m28t().b[13][0]++;
      cov_f1qq8m28t().s[43]++;
      try {
        const decoded =
        /* istanbul ignore next */
        (cov_f1qq8m28t().s[44]++, await (0, _auth.verifyToken)(token));
        /* istanbul ignore next */
        cov_f1qq8m28t().s[45]++;
        if (
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[15][0]++, decoded) &&
        /* istanbul ignore next */
        (cov_f1qq8m28t().b[15][1]++, decoded.userId)) {
          /* istanbul ignore next */
          cov_f1qq8m28t().b[14][0]++;
          cov_f1qq8m28t().s[46]++;
          userId = decoded.userId;
        } else
        /* istanbul ignore next */
        {
          cov_f1qq8m28t().b[14][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_f1qq8m28t().s[47]++;
        console.warn("Invalid token for audit logging, using default user ID");
      }
    } else
    /* istanbul ignore next */
    {
      cov_f1qq8m28t().b[13][1]++;
    }
    // Delete receipt and recalculate invoice status
    cov_f1qq8m28t().s[48]++;
    await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_f1qq8m28t().f[7]++;
      // Find the related accounting transaction to reverse it
      const relatedTransaction =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[49]++, await tx.transaction.findFirst({
        where: {
          reference: existingReceipt.receiptNumber,
          type: "income"
        },
        include: {
          account: true
        }
      }));
      /* istanbul ignore next */
      cov_f1qq8m28t().s[50]++;
      if (relatedTransaction) {
        /* istanbul ignore next */
        cov_f1qq8m28t().b[16][0]++;
        cov_f1qq8m28t().s[51]++;
        // Reverse the account balance
        await tx.account.update({
          where: {
            id: relatedTransaction.accountId
          },
          data: {
            balance: {
              decrement: relatedTransaction.amount
            }
          }
        });
        // Delete the accounting transaction
        /* istanbul ignore next */
        cov_f1qq8m28t().s[52]++;
        await tx.transaction.delete({
          where: {
            id: relatedTransaction.id
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_f1qq8m28t().b[16][1]++;
      }
      // Delete the receipt
      cov_f1qq8m28t().s[53]++;
      await tx.receipt.delete({
        where: {
          id
        }
      });
      // Recalculate invoice status based on remaining payments with receipts
      // Only count payments that have receipts (confirmed payments)
      const totalPayments =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[54]++, await tx.payment.aggregate({
        where: {
          invoiceId: existingReceipt.payment.invoiceId,
          receipt: {
            isNot: null
          }
        },
        _sum: {
          amount: true
        }
      }));
      const totalPaid =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[55]++,
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[17][0]++, totalPayments._sum.amount) ||
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[17][1]++, 0));
      // Get invoice total
      const invoice =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[56]++, await tx.invoice.findUnique({
        where: {
          id: existingReceipt.payment.invoiceId
        },
        select: {
          total: true
        }
      }));
      const invoiceTotal =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[57]++,
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[18][0]++, invoice?.total) ||
      /* istanbul ignore next */
      (cov_f1qq8m28t().b[18][1]++, 0));
      // Determine the correct status based on remaining payment amount
      let newStatus =
      /* istanbul ignore next */
      (cov_f1qq8m28t().s[58]++, "pending");
      /* istanbul ignore next */
      cov_f1qq8m28t().s[59]++;
      if (totalPaid >= invoiceTotal) {
        /* istanbul ignore next */
        cov_f1qq8m28t().b[19][0]++;
        cov_f1qq8m28t().s[60]++;
        newStatus = "paid";
      } else {
        /* istanbul ignore next */
        cov_f1qq8m28t().b[19][1]++;
        cov_f1qq8m28t().s[61]++;
        if (totalPaid > 0) {
          /* istanbul ignore next */
          cov_f1qq8m28t().b[20][0]++;
          cov_f1qq8m28t().s[62]++;
          newStatus = "partial";
        } else
        /* istanbul ignore next */
        {
          cov_f1qq8m28t().b[20][1]++;
        }
      }
      // Update invoice status based on remaining payments
      /* istanbul ignore next */
      cov_f1qq8m28t().s[63]++;
      await tx.invoice.update({
        where: {
          id: existingReceipt.payment.invoiceId
        },
        data: {
          status: newStatus
        }
      });
    });
    // Log the deletion to the audit trail
    const auditService =
    /* istanbul ignore next */
    (cov_f1qq8m28t().s[64]++, new _auditService.AuditService());
    /* istanbul ignore next */
    cov_f1qq8m28t().s[65]++;
    await auditService.softDelete("Receipt", id, existingReceipt, userId, true // canRecover
    );
    /* istanbul ignore next */
    cov_f1qq8m28t().s[66]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f1qq8m28t().s[67]++;
    console.error("Error deleting receipt:", error);
    /* istanbul ignore next */
    cov_f1qq8m28t().s[68]++;
    return _server.NextResponse.json({
      error: "Failed to delete receipt"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,