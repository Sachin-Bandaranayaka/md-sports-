{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/components/purchaseInvoiceForms.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport userEvent from '@testing-library/user-event';\n\n// Mock next/navigation\nconst mockPush = jest.fn();\nconst mockBack = jest.fn();\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    back: mockBack,\n    replace: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Mock hooks\njest.mock('@/hooks/useQueries', () => ({\n  useCreatePurchaseInvoice: () => ({\n    mutateAsync: jest.fn().mockResolvedValue({ data: { id: 1 } }),\n  }),\n  useSuppliersOptimized: () => ({\n    data: [\n      { id: '1', name: 'Test Supplier' }\n    ]\n  }),\n  useProducts: () => ({\n    data: [\n      { id: 1, name: 'Test Product', price: 100 }\n    ],\n    refetch: jest.fn()\n  }),\n}));\n\n// Mock framer-motion\njest.mock('framer-motion', () => ({\n  motion: {\n    div: React.forwardRef(({ children, ...props }: any, ref: any) => \n      <div ref={ref} {...props}>{children}</div>\n    ),\n    form: React.forwardRef(({ children, ...props }: any, ref: any) => \n      <form ref={ref} {...props}>{children}</form>\n    ),\n  },\n  AnimatePresence: ({ children }: any) => <>{children}</>,\n}));\n\n// Mock components\njest.mock('@/components/ui/Button', () => {\n  return function MockButton({ children, disabled, type, onClick, ...props }: any) {\n    return (\n      <button \n        type={type} \n        disabled={disabled} \n        onClick={onClick}\n        data-testid={props['data-testid'] || 'button'}\n        {...props}\n      >\n        {children}\n      </button>\n    );\n  };\n});\n\njest.mock('@/components/ui/Combobox', () => {\n  return function MockCombobox({ value, onSelect, options, placeholder }: any) {\n    return (\n      <select \n        value={value} \n        onChange={(e) => onSelect?.(e.target.value)}\n        data-testid=\"combobox\"\n      >\n        <option value=\"\">{placeholder}</option>\n        {options?.map((opt: any) => (\n          <option key={opt.value} value={opt.value}>{opt.label}</option>\n        ))}\n      </select>\n    );\n  };\n});\n\n// Mock Purchase Invoice Form Component\nconst MockNewPurchaseInvoiceForm = ({ \n  initialSuppliers = [], \n  initialProducts = [], \n  initialShops = [], \n  onSuccess,\n  onCancel\n}: any) => {\n  const [formData, setFormData] = React.useState({\n    items: [] as any[],\n    supplierId: '',\n  });\n  const [itemDistributions, setItemDistributions] = React.useState<Array<Record<string, number>>>([]);\n  const [error, setError] = React.useState<string | null>(null);\n\n  // Validation functions (extracted from actual component)\n  const validateDistributions = () => {\n    if (!formData.items || formData.items.length === 0) return { isValid: false, error: 'No items to validate' };\n    \n    if (initialShops.length === 0) {\n      return { isValid: false, error: 'No shops available for distribution. Please configure at least one shop before creating purchase invoices.' };\n    }\n\n    for (let i = 0; i < formData.items.length; i++) {\n      const item = formData.items[i];\n      const distribution = itemDistributions[i] || {};\n      \n      const totalDistributed = Object.values(distribution).reduce((sum: number, qty) => {\n        const num = Number(qty) || 0;\n        return sum + num;\n      }, 0);\n      \n      const requiredQuantity = Number(item.quantity);\n      \n      if (totalDistributed === 0) {\n        return { \n          isValid: false, \n          error: `Product \"${item.productName || `Product ${item.productId}`}\" has no distribution set. Please distribute all quantities to shops.` \n        };\n      }\n      \n      if (totalDistributed !== requiredQuantity) {\n        return { \n          isValid: false, \n          error: `Product \"${item.productName || `Product ${item.productId}`}\" distribution mismatch. Required: ${requiredQuantity}, Distributed: ${totalDistributed}` \n        };\n      }\n    }\n    \n    return { isValid: true, error: null };\n  };\n\n  const getItemDistributionStatus = (itemIndex: number) => {\n    if (!formData.items || !formData.items[itemIndex]) return { status: 'none', message: 'No item' };\n    \n    const item = formData.items[itemIndex];\n    const requiredQty = Number(item.quantity);\n    \n    const distribution = itemDistributions[itemIndex] || {};\n    const distributedQty = Object.values(distribution).reduce((sum: number, qty) => sum + (Number(qty) || 0), 0);\n    \n    if (distributedQty === 0) {\n      return { status: 'none', message: 'Not distributed' };\n    } else if (distributedQty < requiredQty) {\n      return { status: 'partial', message: `${distributedQty}/${requiredQty} distributed` };\n    } else if (distributedQty === requiredQty) {\n      return { status: 'complete', message: 'Fully distributed' };\n    } else {\n      return { status: 'over', message: `Over-distributed: ${distributedQty}/${requiredQty}` };\n    }\n  };\n\n  const addItem = () => {\n    const newItem = {\n      productId: '1',\n      productName: 'Test Product',\n      quantity: 10,\n      price: 100\n    };\n    setFormData(prev => ({\n      ...prev,\n      items: [...prev.items, newItem]\n    }));\n    setItemDistributions(prev => [...prev, {}]);\n  };\n\n  const setDistribution = (itemIndex: number, shopId: string, quantity: number) => {\n    setItemDistributions(prev => {\n      const newDist = [...prev];\n      if (!newDist[itemIndex]) newDist[itemIndex] = {};\n      newDist[itemIndex] = { ...newDist[itemIndex], [shopId]: quantity };\n      return newDist;\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    if (!formData.supplierId) {\n      setError('Please select a supplier.');\n      return;\n    }\n\n    if (!formData.items || formData.items.length === 0) {\n      setError('Please add at least one item to the invoice.');\n      return;\n    }\n\n    const { isValid, error: validationError } = validateDistributions();\n    if (!isValid) {\n      setError(validationError || 'An unexpected error occurred during distribution validation.');\n      return;\n    }\n\n    onSuccess?.();\n  };\n\n  const { isValid } = validateDistributions();\n\n  return (\n    <form onSubmit={handleSubmit} data-testid=\"purchase-invoice-form\">\n      {error && (\n        <div data-testid=\"error-message\" className=\"error\">\n          {error}\n        </div>\n      )}\n\n      <select \n        data-testid=\"supplier-select\"\n        value={formData.supplierId}\n        onChange={(e) => setFormData(prev => ({ ...prev, supplierId: e.target.value }))}\n      >\n        <option value=\"\">Select Supplier</option>\n        {initialSuppliers.map((supplier: any) => (\n          <option key={supplier.id} value={supplier.id}>{supplier.name}</option>\n        ))}\n      </select>\n\n      <button type=\"button\" onClick={addItem} data-testid=\"add-item-btn\">\n        Add Item\n      </button>\n\n      {formData.items.map((item, index) => {\n        const status = getItemDistributionStatus(index);\n        return (\n          <div key={index} data-testid={`item-${index}`}>\n            <div data-testid={`item-${index}-name`}>{item.productName}</div>\n            <div data-testid={`item-${index}-quantity`}>Qty: {item.quantity}</div>\n            <div \n              data-testid={`item-${index}-status`}\n              className={`status-${status.status}`}\n            >\n              {status.message}\n            </div>\n            \n            {initialShops.map((shop: any) => (\n              <div key={shop.id}>\n                <label>{shop.name}:</label>\n                <input\n                  type=\"number\"\n                  data-testid={`distribution-${index}-${shop.id}`}\n                  value={itemDistributions[index]?.[shop.id] || ''}\n                  onChange={(e) => setDistribution(index, shop.id, Number(e.target.value))}\n                />\n              </div>\n            ))}\n          </div>\n        );\n      })}\n\n      {/* Validation Summary */}\n      {formData.items && formData.items.length > 0 && (\n        <div data-testid=\"validation-summary\">\n          {(() => {\n            const { isValid, error } = validateDistributions();\n            if (!isValid) {\n              return (\n                <div data-testid=\"validation-error\" className=\"validation-error\">\n                  <h4>Distribution Required</h4>\n                  <p>{error}</p>\n                </div>\n              );\n            }\n            \n            const allItemsDistributed = formData.items.every((_, index) => {\n              const status = getItemDistributionStatus(index);\n              return status.status === 'complete';\n            });\n            \n            if (allItemsDistributed && formData.items.length > 0) {\n              return (\n                <div data-testid=\"validation-success\" className=\"validation-success\">\n                  <h4>Ready to Submit</h4>\n                  <p>All items are properly distributed to shops.</p>\n                </div>\n              );\n            }\n            \n            return null;\n          })()}\n        </div>\n      )}\n\n      <button \n        type=\"button\" \n        onClick={onCancel}\n        data-testid=\"cancel-btn\"\n      >\n        Cancel\n      </button>\n      \n      <button \n        type=\"submit\" \n        disabled={!isValid}\n        data-testid=\"submit-btn\"\n      >\n        Save Invoice\n      </button>\n    </form>\n  );\n};\n\ndescribe('Purchase Invoice Forms - Distribution Validation', () => {\n  const mockSuppliers = [\n    { id: '1', name: 'Test Supplier 1' },\n    { id: '2', name: 'Test Supplier 2' }\n  ];\n\n  const mockProducts = [\n    { id: 1, name: 'Product A', price: 100 },\n    { id: 2, name: 'Product B', price: 200 }\n  ];\n\n  const mockShops = [\n    { id: 'shop1', name: 'Shop 1' },\n    { id: 'shop2', name: 'Shop 2' }\n  ];\n\n  const mockOnSuccess = jest.fn();\n  const mockOnCancel = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Form Validation', () => {\n    it('should show error when no supplier is selected', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      // Add an item and distribute it\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n      await userEvent.type(screen.getByTestId('distribution-0-shop1'), '10');\n\n      // Try to submit without selecting supplier\n      await userEvent.click(screen.getByTestId('submit-btn'));\n\n      expect(screen.getByTestId('error-message')).toHaveTextContent('Please select a supplier.');\n      expect(mockOnSuccess).not.toHaveBeenCalled();\n    });\n\n    it('should show error when no items are added', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      // Select supplier but don't add items\n      await userEvent.selectOptions(screen.getByTestId('supplier-select'), '1');\n      await userEvent.click(screen.getByTestId('submit-btn'));\n\n      expect(screen.getByTestId('error-message')).toHaveTextContent('Please add at least one item to the invoice.');\n      expect(mockOnSuccess).not.toHaveBeenCalled();\n    });\n\n    it('should show error when no shops are configured', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={[]} // No shops\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      // Select supplier and add item\n      await userEvent.selectOptions(screen.getByTestId('supplier-select'), '1');\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n\n      // Try to submit\n      await userEvent.click(screen.getByTestId('submit-btn'));\n\n      expect(screen.getByTestId('error-message')).toHaveTextContent('No shops available for distribution');\n      expect(mockOnSuccess).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Distribution Status Indicators', () => {\n    it('should show \"Not distributed\" status initially', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n\n      expect(screen.getByTestId('item-0-status')).toHaveTextContent('Not distributed');\n      expect(screen.getByTestId('item-0-status')).toHaveClass('status-none');\n    });\n\n    it('should show \"Partial distributed\" status', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n      await userEvent.type(screen.getByTestId('distribution-0-shop1'), '5'); // 5 out of 10\n\n      await waitFor(() => {\n        expect(screen.getByTestId('item-0-status')).toHaveTextContent('5/10 distributed');\n        expect(screen.getByTestId('item-0-status')).toHaveClass('status-partial');\n      });\n    });\n\n    it('should show \"Fully distributed\" status', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n      await userEvent.type(screen.getByTestId('distribution-0-shop1'), '6');\n      await userEvent.type(screen.getByTestId('distribution-0-shop2'), '4'); // Total: 10\n\n      await waitFor(() => {\n        expect(screen.getByTestId('item-0-status')).toHaveTextContent('Fully distributed');\n        expect(screen.getByTestId('item-0-status')).toHaveClass('status-complete');\n      });\n    });\n\n    it('should show \"Over-distributed\" status', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n      await userEvent.type(screen.getByTestId('distribution-0-shop1'), '15'); // 15 out of 10\n\n      await waitFor(() => {\n        expect(screen.getByTestId('item-0-status')).toHaveTextContent('Over-distributed: 15/10');\n        expect(screen.getByTestId('item-0-status')).toHaveClass('status-over');\n      });\n    });\n  });\n\n  describe('Validation Summary', () => {\n    it('should show validation error when items are not distributed', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n\n      expect(screen.getByTestId('validation-error')).toBeInTheDocument();\n      expect(screen.getByTestId('validation-error')).toHaveTextContent('Distribution Required');\n      expect(screen.getByTestId('validation-error')).toHaveTextContent('has no distribution set');\n    });\n\n    it('should show validation success when all items are distributed', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n      await userEvent.type(screen.getByTestId('distribution-0-shop1'), '10');\n\n      await waitFor(() => {\n        expect(screen.getByTestId('validation-success')).toBeInTheDocument();\n        expect(screen.getByTestId('validation-success')).toHaveTextContent('Ready to Submit');\n        expect(screen.getByTestId('validation-success')).toHaveTextContent('All items are properly distributed');\n      });\n    });\n  });\n\n  describe('Submit Button State', () => {\n    it('should disable submit button when validation fails', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n\n      expect(screen.getByTestId('submit-btn')).toBeDisabled();\n    });\n\n    it('should enable submit button when validation passes', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      // Select supplier\n      await userEvent.selectOptions(screen.getByTestId('supplier-select'), '1');\n      \n      // Add item and distribute it fully\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n      await userEvent.type(screen.getByTestId('distribution-0-shop1'), '10');\n\n      await waitFor(() => {\n        expect(screen.getByTestId('submit-btn')).not.toBeDisabled();\n      });\n    });\n\n    it('should successfully submit when all validations pass', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      // Select supplier\n      await userEvent.selectOptions(screen.getByTestId('supplier-select'), '1');\n      \n      // Add item and distribute it fully\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n      await userEvent.type(screen.getByTestId('distribution-0-shop1'), '10');\n\n      // Submit\n      await userEvent.click(screen.getByTestId('submit-btn'));\n\n      await waitFor(() => {\n        expect(mockOnSuccess).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Multiple Items Validation', () => {\n    it('should validate all items before allowing submission', async () => {\n      render(\n        <MockNewPurchaseInvoiceForm\n          initialSuppliers={mockSuppliers}\n          initialProducts={mockProducts}\n          initialShops={mockShops}\n          onSuccess={mockOnSuccess}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      // Select supplier\n      await userEvent.selectOptions(screen.getByTestId('supplier-select'), '1');\n      \n      // Add two items\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n      await userEvent.click(screen.getByTestId('add-item-btn'));\n\n      // Distribute only first item\n      await userEvent.type(screen.getByTestId('distribution-0-shop1'), '10');\n\n      // Should still be disabled because second item is not distributed\n      expect(screen.getByTestId('submit-btn')).toBeDisabled();\n      expect(screen.getByTestId('validation-error')).toHaveTextContent('has no distribution set');\n\n      // Distribute second item\n      await userEvent.type(screen.getByTestId('distribution-1-shop2'), '10');\n\n      await waitFor(() => {\n        expect(screen.getByTestId('submit-btn')).not.toBeDisabled();\n        expect(screen.getByTestId('validation-success')).toBeInTheDocument();\n      });\n    });\n  });\n}); "],"names":["jest","mock","useRouter","push","mockPush","back","mockBack","replace","fn","forward","refresh","prefetch","useCreatePurchaseInvoice","mutateAsync","mockResolvedValue","data","id","useSuppliersOptimized","name","useProducts","price","refetch","motion","div","React","forwardRef","children","props","ref","form","AnimatePresence","MockButton","disabled","type","onClick","button","data-testid","MockCombobox","value","onSelect","options","placeholder","select","onChange","e","target","option","map","opt","label","MockNewPurchaseInvoiceForm","initialSuppliers","initialProducts","initialShops","onSuccess","onCancel","formData","setFormData","useState","items","supplierId","itemDistributions","setItemDistributions","error","setError","validateDistributions","length","isValid","i","item","distribution","totalDistributed","Object","values","reduce","sum","qty","num","Number","requiredQuantity","quantity","productName","productId","getItemDistributionStatus","itemIndex","status","message","requiredQty","distributedQty","addItem","newItem","prev","setDistribution","shopId","newDist","handleSubmit","preventDefault","validationError","onSubmit","className","supplier","index","shop","input","h4","p","allItemsDistributed","every","_","describe","mockSuppliers","mockProducts","mockShops","mockOnSuccess","mockOnCancel","beforeEach","clearAllMocks","it","render","userEvent","click","screen","getByTestId","expect","toHaveTextContent","not","toHaveBeenCalled","selectOptions","toHaveClass","waitFor","toBeInTheDocument","toBeDisabled"],"mappings":"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"}