{"version":3,"names":["DELETE","cov_39x6d23tp","f","s","GET","PUT","request","params","id","purchaseId","parseInt","isNaN","b","_server","NextResponse","json","error","message","status","purchase","_prisma","default","purchaseInvoice","findUnique","where","include","supplier","items","product","response","headers","set","updatedAt","getTime","Date","now","console","details","Error","body","originalPurchase","newItemsData","distributions","newDistributionsData","invoiceData","_","createdAt","notes","dirtyData","cleanedInvoiceData","invoiceNumber","date","dueDate","undefined","totalAmount","total","Number","supplierId","connect","disconnect","result","$transaction","tx","inventoryUpdates","length","oldItem","productToUpdate","productId","oldItemDistribution","Array","isArray","indexOf","Object","keys","shopIdStr","quantityInShop","entries","shopId","qtyToRemove","inventory","inventoryItem","findFirst","oldShopQuantity","quantity","newQuantity","Math","max","update","data","shopSpecificCost","push","oldQuantity","warn","existingInventoriesForOldItem","findMany","shopIdToReverseFrom","log","currentTotalProductQuantity","allInventoryForProductAfterReversal","reduce","sum","inv","remainingPurchaseItems","purchaseInvoiceItem","purchaseInvoiceId","not","totalRemainingQuantity","totalRemainingValue","forEach","purchaseItem","price","newWAC","weightedAverageCost","deleteMany","newTotalInvoiceAmount","item","updatedInvoice","i","newItem","create","newItemDistribution","itemQuantityTotal","qtyToAdd","finalQuantity","oldInvQty","newShopSpecificCostValue","itemPrice","oldShopTotalValue","valueOfThisBatch","existingInventoryItems","targetShopId","allPurchaseItems","totalPurchaseQuantity","totalPurchaseValue","newWeightedAverageCost","fullUpdatedInvoice","timeout","_cache1","cacheService","invalidateInventory","del","invalidatePattern","cacheError","_cache","revalidateTag","revalidatePath","revalidateError","String","purchaseIdStr","purchaseToDelete","quantityToRemoveForItemTotal","itemDistributionInfo","distributionsOnInvoice","distData","distributedQuantityStr","qtyInShopToRemove","newShopQuantity","updateData","existingInventoriesForItem","singleShopInventory","shopIdToDeductFrom","updateDataInferred","pItem","newCalculatedWAC","delete","deletedInvoiceId"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/purchases/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { revalidateTag, revalidatePath } from 'next/cache';\nimport prisma from '@/lib/prisma';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\nimport { getToken } from 'next-auth/jwt';\nimport { cacheService } from '@/lib/cache';\n\n// GET /api/purchases/[id] - Get a specific purchase invoice\nexport async function GET(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const id = params.id; // Store params.id early to avoid async issues\n    try {\n        const purchaseId = parseInt(id);\n\n        if (isNaN(purchaseId)) {\n            return NextResponse.json(\n                { error: { message: 'Invalid purchase ID format' } },\n                { status: 400 }\n            );\n        }\n\n        const purchase = await prisma.purchaseInvoice.findUnique({\n            where: {\n                id: purchaseId\n            },\n            include: {\n                supplier: true,\n                items: {\n                    include: {\n                        product: true\n                    }\n                }\n            }\n        });\n\n        if (!purchase) {\n            return NextResponse.json(\n                { error: { message: 'Purchase invoice not found' } },\n                { status: 404 }\n            );\n        }\n\n        // Create response with proper cache headers\n        const response = NextResponse.json(purchase);\n        \n        // Add cache control headers to enable proper caching and revalidation\n        response.headers.set('Cache-Control', 'no-cache, must-revalidate');\n        response.headers.set('ETag', `\"purchase-${purchaseId}-${purchase.updatedAt?.getTime() || Date.now()}\"`);\n        \n        return response;\n    } catch (error) {\n        console.error(`Error fetching purchase invoice ${id}:`, error);\n        const details = error instanceof Error ? error.message : 'An unknown error occurred';\n        return NextResponse.json(\n            { error: { message: 'Failed to fetch purchase invoice', details: details } },\n            { status: 500 }\n        );\n    }\n}\n\n// PUT /api/purchases/[id] - Update a purchase invoice\nexport async function PUT(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const id = params.id;\n    try {\n        const purchaseId = parseInt(id);\n        if (isNaN(purchaseId)) {\n            return NextResponse.json(\n                { error: { message: 'Invalid purchase ID format' } },\n                { status: 400 });\n        }\n        const body = await request.json();\n        const originalPurchase = await prisma.purchaseInvoice.findUnique({\n            where: { id: purchaseId },\n            include: { items: { include: { product: true } } },\n        });\n        if (!originalPurchase) {\n            return NextResponse.json(\n                { error: { message: 'Purchase invoice not found to update' } },\n                { status: 404 });\n        }\n        const { items: newItemsData, distributions: newDistributionsData, ...invoiceData } = body;\n        const { id: _, createdAt, updatedAt, supplier, notes, ...dirtyData } = invoiceData;\n        const cleanedInvoiceData: any = {};\n        if (dirtyData.invoiceNumber) cleanedInvoiceData.invoiceNumber = dirtyData.invoiceNumber;\n        if (dirtyData.status) cleanedInvoiceData.status = dirtyData.status;\n        if (dirtyData.date) cleanedInvoiceData.date = new Date(dirtyData.date);\n        if (dirtyData.dueDate !== undefined) cleanedInvoiceData.dueDate = dirtyData.dueDate ? new Date(dirtyData.dueDate) : null;\n        if (dirtyData.totalAmount !== undefined) cleanedInvoiceData.total = Number(dirtyData.totalAmount);\n        else if (dirtyData.total !== undefined) cleanedInvoiceData.total = Number(dirtyData.total);\n        cleanedInvoiceData.distributions = newDistributionsData !== undefined ? newDistributionsData : originalPurchase.distributions;\n        if (dirtyData.supplierId) cleanedInvoiceData.supplier = { connect: { id: Number(dirtyData.supplierId) } };\n        else if (dirtyData.supplierId === null && originalPurchase.supplierId) cleanedInvoiceData.supplier = { disconnect: true };\n\n        const result = await prisma.$transaction(async (tx) => {\n            const inventoryUpdates: Array<{ productId: number, shopId: number, newQuantity: number, oldQuantity?: number }> = [];\n\n            if (originalPurchase.items && originalPurchase.items.length > 0) {\n                for (const oldItem of originalPurchase.items) {\n                    const productToUpdate = await tx.product.findUnique({ where: { id: oldItem.productId } });\n                    if (!productToUpdate) continue;\n\n                    const oldItemDistribution = originalPurchase.distributions && Array.isArray(originalPurchase.distributions) && originalPurchase.items.indexOf(oldItem) < originalPurchase.distributions.length\n                        ? originalPurchase.distributions[originalPurchase.items.indexOf(oldItem)]\n                        : (originalPurchase.distributions && typeof originalPurchase.distributions === 'object' && !Array.isArray(originalPurchase.distributions) ? originalPurchase.distributions : null);\n\n                    if (oldItemDistribution && Object.keys(oldItemDistribution).length > 0) {\n                        for (const [shopIdStr, quantityInShop] of Object.entries(oldItemDistribution as any)) {\n                            const shopId = shopIdStr;\n                            const qtyToRemove = Number(quantityInShop);\n                            if (qtyToRemove <= 0 || isNaN(qtyToRemove)) continue;\n                            const inventory = await tx.inventoryItem.findFirst({ where: { productId: oldItem.productId, shopId: shopId } });\n                            if (inventory) {\n                                const oldShopQuantity = inventory.quantity;\n                                const newQuantity = Math.max(0, inventory.quantity - qtyToRemove);\n                                await tx.inventoryItem.update({\n                                    where: { id: inventory.id },\n                                    data: {\n                                        quantity: newQuantity,\n                                        // If new quantity is 0, reset shopSpecificCost, else keep existing\n                                        shopSpecificCost: newQuantity === 0 ? 0 : inventory.shopSpecificCost\n                                    }\n                                });\n                                inventoryUpdates.push({ productId: oldItem.productId, shopId: Number(shopId), newQuantity, oldQuantity: oldShopQuantity });\n                            }\n                        }\n                    } else {\n                        // oldItemDistribution is missing. Attempt to infer shop for stock reversal.\n                        console.warn(`Old item ${oldItem.productId} in purchase ${purchaseId} has no distribution. Attempting to infer shop for stock reversal.`);\n                        const existingInventoriesForOldItem = await tx.inventoryItem.findMany({\n                            where: { productId: oldItem.productId }\n                        });\n                        if (existingInventoriesForOldItem.length === 1) {\n                            const shopIdToReverseFrom = existingInventoriesForOldItem[0].shopId;\n                            const inventory = existingInventoriesForOldItem[0]; // Already fetched\n                            const oldShopQuantity = inventory.quantity;\n                            const newQuantity = Math.max(0, inventory.quantity - oldItem.quantity); // Use total oldItem.quantity\n                            await tx.inventoryItem.update({\n                                where: { id: inventory.id },\n                                data: {\n                                    quantity: newQuantity,\n                                    // If new quantity is 0, reset shopSpecificCost, else keep existing\n                                    shopSpecificCost: newQuantity === 0 ? 0 : inventory.shopSpecificCost\n                                }\n                            });\n                            inventoryUpdates.push({ productId: oldItem.productId, shopId: Number(shopIdToReverseFrom), newQuantity, oldQuantity: oldShopQuantity });\n                            console.log(`Reversed ${oldItem.quantity} from product ${oldItem.productId} in inferred shop ${shopIdToReverseFrom}.`);\n                        } else if (existingInventoriesForOldItem.length === 0) {\n                            console.error(`Old item ${oldItem.productId} not found in any inventory. Cannot reverse stock for this item line from a specific shop.`);\n                        } else { // Multiple shops\n                            console.error(`Old item ${oldItem.productId} exists in multiple shops and no specific distribution for reversal. Ambiguous. Stock not reversed from a specific shop for this item line.`);\n                        }\n                    }\n\n                    let currentTotalProductQuantity = 0;\n                    const allInventoryForProductAfterReversal = await tx.inventoryItem.findMany({ where: { productId: oldItem.productId } });\n                    currentTotalProductQuantity = allInventoryForProductAfterReversal.reduce((sum, inv) => sum + inv.quantity, 0);\n\n                    // Recalculate WAC based on remaining purchase history after removing this item\n                    const remainingPurchaseItems = await tx.purchaseInvoiceItem.findMany({\n                        where: {\n                            productId: oldItem.productId,\n                            purchaseInvoiceId: { not: purchaseId } // Exclude current invoice being updated\n                        }\n                    });\n\n                    let totalRemainingQuantity = 0;\n                    let totalRemainingValue = 0;\n\n                    remainingPurchaseItems.forEach(purchaseItem => {\n                        totalRemainingQuantity += purchaseItem.quantity;\n                        totalRemainingValue += purchaseItem.quantity * purchaseItem.price;\n                    });\n\n                    let newWAC = 0;\n                    if (totalRemainingQuantity > 0) {\n                        newWAC = totalRemainingValue / totalRemainingQuantity;\n                    }\n\n                    await tx.product.update({\n                        where: { id: oldItem.productId },\n                        data: { weightedAverageCost: newWAC >= 0 ? newWAC : 0 }\n                    });\n                }\n            }\n\n            await tx.purchaseInvoiceItem.deleteMany({ where: { purchaseInvoiceId: purchaseId } });\n\n            // Recalculate totalAmount for the invoice based on new/updated items\n            let newTotalInvoiceAmount = 0;\n            if (newItemsData && Array.isArray(newItemsData)) {\n                newItemsData.forEach(item => {\n                    newTotalInvoiceAmount += Number(item.quantity) * Number(item.price || 0);\n                });\n            }\n            cleanedInvoiceData.total = newTotalInvoiceAmount; // Ensure this is assigned to the correct field for DB update\n\n            const updatedInvoice = await tx.purchaseInvoice.update({ where: { id: purchaseId }, data: cleanedInvoiceData });\n\n            if (newItemsData && Array.isArray(newItemsData)) {\n                for (let i = 0; i < newItemsData.length; i++) {\n                    const newItem = newItemsData[i];\n                    if (!newItem.productId || !newItem.quantity || newItem.quantity <= 0) continue;\n                    await tx.purchaseInvoiceItem.create({\n                        data: {\n                            purchaseInvoiceId: purchaseId, productId: Number(newItem.productId),\n                            quantity: Number(newItem.quantity), price: Number(newItem.price || 0),\n                            total: Number(newItem.quantity) * Number(newItem.price || 0)\n                        }\n                    });\n                    const productToUpdate = await tx.product.findUnique({ where: { id: Number(newItem.productId) } });\n                    if (!productToUpdate) continue;\n\n                    const newItemDistribution = newDistributionsData && Array.isArray(newDistributionsData) && newDistributionsData[i]\n                        ? newDistributionsData[i]\n                        : (newDistributionsData && typeof newDistributionsData === 'object' && !Array.isArray(newDistributionsData) ? newDistributionsData : null);\n\n                    const itemQuantityTotal = Number(newItem.quantity);\n\n                    if (newItemDistribution && Object.keys(newItemDistribution).length > 0) {\n                        for (const [shopIdStr, quantityInShop] of Object.entries(newItemDistribution as any)) {\n                            const shopId = shopIdStr;\n                            const qtyToAdd = Number(quantityInShop);\n                            if (qtyToAdd <= 0 || isNaN(qtyToAdd)) continue;\n\n                            const inventory = await tx.inventoryItem.findFirst({ where: { productId: Number(newItem.productId), shopId: shopId } });\n                            let finalQuantity = 0;\n                            const oldInvQty = inventory?.quantity || 0;\n                            let newShopSpecificCostValue = 0;\n                            const itemPrice = Number(newItem.price || 0);\n\n                            if (inventory) {\n                                finalQuantity = inventory.quantity + qtyToAdd;\n                                const oldShopTotalValue = (inventory.quantity || 0) * (inventory.shopSpecificCost || 0);\n                                const valueOfThisBatch = qtyToAdd * itemPrice;\n                                if (finalQuantity > 0) {\n                                    newShopSpecificCostValue = (oldShopTotalValue + valueOfThisBatch) / finalQuantity;\n                                } else {\n                                    newShopSpecificCostValue = 0;\n                                }\n                                await tx.inventoryItem.update({\n                                    where: { id: inventory.id },\n                                    data: { quantity: finalQuantity, shopSpecificCost: newShopSpecificCostValue >= 0 ? newShopSpecificCostValue : 0 }\n                                });\n                            } else {\n                                finalQuantity = qtyToAdd;\n                                newShopSpecificCostValue = itemPrice;\n                                await tx.inventoryItem.create({\n                                    data: {\n                                        productId: Number(newItem.productId),\n                                        shopId: shopId,\n                                        quantity: finalQuantity,\n                                        shopSpecificCost: newShopSpecificCostValue >= 0 ? newShopSpecificCostValue : 0\n                                    }\n                                });\n                            }\n                            inventoryUpdates.push({ productId: Number(newItem.productId), shopId: Number(shopId), newQuantity: finalQuantity, oldQuantity: oldInvQty });\n                        }\n                    } else {\n                        // newItemDistribution is missing or empty. Try to infer shop or log error.\n                        console.warn(`Purchase item with productId ${newItem.productId} in invoice ${purchaseId} does not have explicit shop distribution data. Attempting to infer target shop.`);\n                        const existingInventoryItems = await tx.inventoryItem.findMany({\n                            where: { productId: Number(newItem.productId) }\n                        });\n\n                        let targetShopId: string | null = null;\n\n                        if (existingInventoryItems.length === 1) {\n                            targetShopId = existingInventoryItems[0].shopId;\n                            console.log(`Product ${newItem.productId} exists in one shop (${targetShopId}). Attributing new stock there.`);\n                        } else if (existingInventoryItems.length === 0) {\n                            console.error(`Product ${newItem.productId} is new to inventory and no shop distribution provided. Cannot automatically assign to a shop. Inventory not updated for this item.`);\n                        } else { // existingInventoryItems.length > 1\n                            console.error(`Product ${newItem.productId} exists in multiple shops and no specific distribution provided. Ambiguous. Inventory not updated for this item.`);\n                        }\n\n                        if (targetShopId) {\n                            const qtyToAdd = itemQuantityTotal; // The total quantity for this newItem.\n                            if (qtyToAdd > 0) {\n                                const inventory = await tx.inventoryItem.findFirst({ where: { productId: Number(newItem.productId), shopId: targetShopId } });\n                                let finalQuantity = 0;\n                                const oldInvQty = inventory?.quantity || 0;\n                                let newShopSpecificCostValue = 0;\n                                const itemPrice = Number(newItem.price || 0);\n\n                                if (inventory) {\n                                    finalQuantity = inventory.quantity + qtyToAdd;\n                                    const oldShopTotalValue = (inventory.quantity || 0) * (inventory.shopSpecificCost || 0);\n                                    const valueOfThisBatch = qtyToAdd * itemPrice;\n                                    if (finalQuantity > 0) {\n                                        newShopSpecificCostValue = (oldShopTotalValue + valueOfThisBatch) / finalQuantity;\n                                    } else {\n                                        newShopSpecificCostValue = 0;\n                                    }\n                                    await tx.inventoryItem.update({\n                                        where: { id: inventory.id },\n                                        data: { quantity: finalQuantity, shopSpecificCost: newShopSpecificCostValue >= 0 ? newShopSpecificCostValue : 0 }\n                                    });\n                                } else {\n                                    finalQuantity = qtyToAdd;\n                                    newShopSpecificCostValue = itemPrice;\n                                    console.warn(`InventoryItem for product ${newItem.productId} in targetShopId ${targetShopId} not found during update, attempting create.`);\n                                    await tx.inventoryItem.create({\n                                        data: {\n                                            productId: Number(newItem.productId),\n                                            shopId: targetShopId,\n                                            quantity: finalQuantity,\n                                            shopSpecificCost: newShopSpecificCostValue >= 0 ? newShopSpecificCostValue : 0\n                                        }\n                                    });\n                                }\n                                inventoryUpdates.push({ productId: Number(newItem.productId), shopId: Number(targetShopId), newQuantity: finalQuantity, oldQuantity: oldInvQty });\n                            } else {\n                                console.warn(`Quantity for product ${newItem.productId} is zero or negative. No inventory update performed for this item.`);\n                            }\n                        }\n                    }\n\n                    // Recalculate WAC based on all purchase history for this product\n                    // This ensures accuracy regardless of update order\n                    const allPurchaseItems = await tx.purchaseInvoiceItem.findMany({\n                        where: { productId: Number(newItem.productId) }\n                    });\n\n                    let totalPurchaseQuantity = 0;\n                    let totalPurchaseValue = 0;\n\n                    allPurchaseItems.forEach(purchaseItem => {\n                        totalPurchaseQuantity += purchaseItem.quantity;\n                        totalPurchaseValue += purchaseItem.quantity * purchaseItem.price;\n                    });\n\n                    let newWeightedAverageCost = 0;\n                    if (totalPurchaseQuantity > 0) {\n                        newWeightedAverageCost = totalPurchaseValue / totalPurchaseQuantity;\n                    }\n\n                    // Ensure WAC is valid\n                    if (newWeightedAverageCost <= 0 || isNaN(newWeightedAverageCost)) {\n                        newWeightedAverageCost = Number(newItem.price);\n                    }\n\n                    await tx.product.update({\n                        where: { id: Number(newItem.productId) },\n                        data: { weightedAverageCost: newWeightedAverageCost }\n                    });\n                }\n            }\n            const fullUpdatedInvoice = await tx.purchaseInvoice.findUnique({\n                where: { id: purchaseId },\n                include: { supplier: true, items: { include: { product: true } } }\n            });\n            return { fullUpdatedInvoice, inventoryUpdates };\n        }, { timeout: 30000 });\n\n        // Real-time updates now handled by polling system\n        if (result && result.fullUpdatedInvoice) {\n            console.log('Purchase invoice updated successfully');\n        }\n\n        // After successful transaction, invalidate relevant caches\n        try {\n            await cacheService.invalidateInventory(); // Handles 'inventory:summary:*' and 'products:*'\n            await cacheService.del('dashboard:inventory');\n            await cacheService.del('dashboard:inventory-value');\n            await cacheService.del('dashboard:shops');\n            await cacheService.del('dashboard:all');\n            await cacheService.del('dashboard:summary');\n            // Invalidate purchases-specific caches\n            await cacheService.invalidatePattern('purchases-optimized*');\n            await cacheService.invalidatePattern('purchase-stats*');\n            console.log('Relevant caches invalidated after purchase update.');\n        } catch (cacheError) {\n            console.error('Error invalidating caches after purchase update:', cacheError);\n            // Do not let cache invalidation error fail the main operation\n        }\n\n        // Revalidate Next.js cached pages immediately\n        try {\n            revalidateTag('purchase-invoices');\n            revalidateTag(`purchase-${purchaseId}`);\n            revalidatePath(`/purchases/${purchaseId}`);\n            revalidatePath(`/purchases/${purchaseId}/edit`);\n            revalidatePath('/purchases');\n            \n            // Also revalidate the main purchases page to ensure list updates\n            revalidatePath('/purchases', 'page');\n            \n            console.log('Next.js pages revalidated after purchase update.');\n        } catch (revalidateError) {\n            console.error('Error revalidating Next.js pages after purchase update:', revalidateError);\n        }\n\n        return NextResponse.json({\n            message: 'Purchase invoice updated successfully',\n            data: result.fullUpdatedInvoice\n        });\n    } catch (error) {\n        console.error(`Error updating purchase invoice ${id}:`, error);\n        const details = error instanceof Error ? error.message : String(error);\n        return NextResponse.json(\n            { error: { message: 'Failed to update purchase invoice', details: details } },\n            { status: 500 });\n    }\n}\n\n// DELETE /api/purchases/[id] - Delete a purchase invoice\nexport async function DELETE(\n    request: NextRequest,\n    { params }: { params: { id: string } }\n) {\n    const purchaseIdStr = params.id;\n    try {\n        const purchaseId = parseInt(purchaseIdStr);\n        if (isNaN(purchaseId)) {\n            return NextResponse.json(\n                { error: { message: 'Invalid purchase ID format' } },\n                { status: 400 });\n        }\n\n        const purchaseToDelete = await prisma.purchaseInvoice.findUnique({\n            where: { id: purchaseId },\n            include: {\n                items: { include: { product: true } },\n                // Ensure 'distributions' is included if it's a relation,\n                // or directly accessible if it's a JSON field on PurchaseInvoice\n            },\n        });\n\n        if (!purchaseToDelete) {\n            return NextResponse.json(\n                { error: { message: 'Purchase invoice not found to delete' } },\n                { status: 404 });\n        }\n\n        const result = await prisma.$transaction(async (tx) => {\n            const inventoryUpdates: Array<{ productId: number, shopId: number, newQuantity: number, oldQuantity?: number }> = [];\n\n            if (purchaseToDelete.items && purchaseToDelete.items.length > 0) {\n                for (const item of purchaseToDelete.items) {\n                    if (!item.product) {\n                        console.warn(`Item ${item.id} for purchase ${purchaseId} is missing product data. Skipping stock adjustment.`);\n                        continue;\n                    }\n\n                    const productId = item.productId;\n                    const quantityToRemoveForItemTotal = item.quantity; // Total quantity for this item line\n\n                    let itemDistributionInfo: { [shopId: string]: number } | null = null;\n                    const distributionsOnInvoice = (purchaseToDelete as any).distributions;\n\n                    // Attempt to get specific distribution for this item\n                    if (\n                        distributionsOnInvoice &&\n                        Array.isArray(distributionsOnInvoice) &&\n                        purchaseToDelete.items.indexOf(item) < distributionsOnInvoice.length\n                    ) {\n                        const distData = distributionsOnInvoice[purchaseToDelete.items.indexOf(item)];\n                        if (distData && typeof distData === 'object' && Object.keys(distData).length > 0) {\n                            itemDistributionInfo = distData as { [shopId: string]: number };\n                        }\n                    }\n\n                    if (itemDistributionInfo) {\n                        // Case 1: Explicit distribution data found for the item\n                        console.log(`Reversing item-specific distribution for product ${productId}, purchase ${purchaseId}`);\n                        for (const [shopIdStr, distributedQuantityStr] of Object.entries(itemDistributionInfo)) {\n                            const shopId = shopIdStr;\n                            const qtyInShopToRemove = Number(distributedQuantityStr);\n\n                            if (isNaN(qtyInShopToRemove) || qtyInShopToRemove <= 0) continue;\n\n                            const inventoryItem = await tx.inventoryItem.findFirst({ where: { productId, shopId: shopId } });\n                            if (inventoryItem) {\n                                const oldShopQuantity = inventoryItem.quantity;\n                                const newShopQuantity = Math.max(0, inventoryItem.quantity - qtyInShopToRemove);\n                                const updateData = {\n                                    quantity: newShopQuantity,\n                                    shopSpecificCost: newShopQuantity === 0 ? 0 : inventoryItem.shopSpecificCost\n                                };\n                                await tx.inventoryItem.update({\n                                    where: { id: inventoryItem.id },\n                                    data: updateData,\n                                });\n                                inventoryUpdates.push({ productId, shopId: Number(shopId), newQuantity: newShopQuantity, oldQuantity: oldShopQuantity });\n                                console.log(`  - Reduced inventory for product ${productId} in shop ${shopId} by ${qtyInShopToRemove}. Old: ${oldShopQuantity}, New: ${newShopQuantity}`);\n                            } else {\n                                console.warn(`  - Inventory item not found for product ${productId} in shop ${shopId} during purchase deletion with explicit distribution. Stock may be inaccurate.`);\n                            }\n                        }\n                    } else {\n                        // Case 2: No explicit distribution for this item. Attempt to infer.\n                        console.warn(`No specific distribution found for item ${productId} in deleted purchase ${purchaseId}. Attempting to infer shop(s) for stock reversal of total quantity ${quantityToRemoveForItemTotal}.`);\n                        const existingInventoriesForItem = await tx.inventoryItem.findMany({\n                            where: { productId: productId }\n                        });\n\n                        if (existingInventoriesForItem.length === 1) {\n                            const singleShopInventory = existingInventoriesForItem[0];\n                            const shopIdToDeductFrom = singleShopInventory.shopId;\n\n                            console.log(`Product ${productId} found in single shop ${shopIdToDeductFrom}. Deducting total item quantity ${quantityToRemoveForItemTotal}.`);\n                            const oldShopQuantity = singleShopInventory.quantity;\n                            const newShopQuantity = Math.max(0, singleShopInventory.quantity - quantityToRemoveForItemTotal);\n                            const updateDataInferred = {\n                                quantity: newShopQuantity,\n                                shopSpecificCost: newShopQuantity === 0 ? 0 : singleShopInventory.shopSpecificCost\n                            };\n                            await tx.inventoryItem.update({\n                                where: { id: singleShopInventory.id },\n                                data: updateDataInferred,\n                            });\n                            inventoryUpdates.push({ productId, shopId: Number(shopIdToDeductFrom), newQuantity: newShopQuantity, oldQuantity: oldShopQuantity });\n                            console.log(`  - Reduced inventory for product ${productId} in inferred shop ${shopIdToDeductFrom} by ${quantityToRemoveForItemTotal}. Old: ${oldShopQuantity}, New: ${newShopQuantity}`);\n                        } else if (existingInventoriesForItem.length === 0) {\n                            console.error(`Product ${productId} (from deleted purchase ${purchaseId}) not found in any inventory. Cannot reverse stock for this item.`);\n                        } else { // Product exists in multiple shops\n                            console.error(`Product ${productId} (from deleted purchase ${purchaseId}) exists in multiple shops, but no specific distribution data was found on the invoice for reversal. Ambiguous. Stock not automatically reversed for this item. Manual adjustment may be needed.`);\n                        }\n                    }\n\n                    // ---- BEGIN WAC Recalculation for the deleted item ----\n                    const remainingPurchaseItems = await tx.purchaseInvoiceItem.findMany({\n                        where: {\n                            productId: productId,\n                            purchaseInvoiceId: { not: purchaseId }\n                        }\n                    });\n\n                    let totalRemainingQuantity = 0;\n                    let totalRemainingValue = 0;\n                    remainingPurchaseItems.forEach(pItem => {\n                        totalRemainingQuantity += pItem.quantity;\n                        totalRemainingValue += pItem.quantity * pItem.price;\n                    });\n\n                    let newCalculatedWAC = 0;\n                    if (totalRemainingQuantity > 0) {\n                        newCalculatedWAC = totalRemainingValue / totalRemainingQuantity;\n                    }\n                    await tx.product.update({\n                        where: { id: productId },\n                        data: { weightedAverageCost: newCalculatedWAC >= 0 ? newCalculatedWAC : 0 }\n                    });\n                    // ---- END WAC Recalculation ----\n                }\n            }\n\n            await tx.purchaseInvoiceItem.deleteMany({ where: { purchaseInvoiceId: purchaseId } });\n            await tx.purchaseInvoice.delete({ where: { id: purchaseId } });\n\n            return { deletedInvoiceId: purchaseId, inventoryUpdates };\n        });\n\n        // Real-time updates now handled by polling system\n        if (result && result.deletedInvoiceId) {\n            console.log(`Purchase invoice ${result.deletedInvoiceId} deleted successfully`);\n        }\n\n        // After successful transaction, invalidate relevant caches\n        try {\n            await cacheService.invalidateInventory(); // Handles 'inventory:summary:*' and 'products:*'\n            await cacheService.del('dashboard:inventory');\n            await cacheService.del('dashboard:inventory-value');\n            await cacheService.del('dashboard:shops');\n            await cacheService.del('dashboard:all');\n            await cacheService.del('dashboard:summary');\n            // Invalidate purchases-specific caches\n            await cacheService.invalidatePattern('purchases-optimized*');\n            await cacheService.invalidatePattern('purchase-stats*');\n            console.log('Relevant caches invalidated after purchase deletion.');\n        } catch (cacheError) {\n            console.error('Error invalidating caches after purchase deletion:', cacheError);\n            // Do not let cache invalidation error fail the main operation\n        }\n\n        // Revalidate Next.js cached pages\n        try {\n            revalidateTag('purchase-invoices');\n            revalidateTag(`purchase-${purchaseId}`);\n            revalidatePath(`/purchases/${purchaseId}`);\n            revalidatePath(`/purchases/${purchaseId}/edit`);\n            revalidatePath('/purchases');\n            console.log('Next.js pages revalidated after purchase deletion.');\n        } catch (revalidateError) {\n            console.error('Error revalidating Next.js pages after purchase deletion:', revalidateError);\n        }\n\n        return NextResponse.json({ message: 'Purchase invoice deleted successfully' });\n\n    } catch (error) {\n        console.error(`Error deleting purchase invoice ${purchaseIdStr}:`, error);\n        const details = error instanceof Error ? error.message : 'An unknown error occurred';\n        return NextResponse.json(\n            { error: { message: 'Failed to delete purchase invoice', details: details } },\n            { status: 500 });\n    }\n}"],"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","ignoreList":[]}