{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/prisma.test.ts"],"sourcesContent":["// Unit tests for Prisma utilities\n// Testing the safeQuery helper function and Prisma client configuration\n\nimport { PrismaClient } from '@prisma/client';\n\n// Mock PrismaClient\nconst mockPrismaClient = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  user: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  shop: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n};\n\n// Mock the PrismaClient constructor\njest.mock('@prisma/client', () => ({\n  PrismaClient: jest.fn().mockImplementation(() => mockPrismaClient),\n}));\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n  warn: jest.spyOn(console, 'warn').mockImplementation(() => {}),\n};\n\ndescribe('Prisma Utilities', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.log.mockClear();\n    consoleSpy.error.mockClear();\n    consoleSpy.warn.mockClear();\n  });\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore();\n    consoleSpy.error.mockRestore();\n    consoleSpy.warn.mockRestore();\n  });\n\n  describe('PrismaClient Configuration', () => {\n    it('should create PrismaClient with correct configuration', () => {\n      // Re-import to trigger constructor\n      jest.resetModules();\n      require('@/lib/prisma');\n      \n      expect(PrismaClient).toHaveBeenCalledWith({\n        log: ['query', 'info', 'warn', 'error'],\n        datasources: {\n          db: {\n            url: process.env.DATABASE_URL,\n          },\n        },\n      });\n    });\n  });\n\n  describe('safeQuery function (isolated implementation)', () => {\n    // Isolated implementation of safeQuery for testing\n    const safeQuery = async <T>(\n      operation: () => Promise<T>,\n      context: string = 'Database operation'\n    ): Promise<T | null> => {\n      try {\n        const result = await operation();\n        return result;\n      } catch (error: any) {\n        console.error(`${context} failed:`, error.message);\n        \n        // Handle specific Prisma errors\n        if (error.code === 'P2002') {\n          console.error('Unique constraint violation');\n        } else if (error.code === 'P2025') {\n          console.error('Record not found');\n        } else if (error.code === 'P2003') {\n          console.error('Foreign key constraint violation');\n        } else if (error.code === 'P2016') {\n          console.error('Query interpretation error');\n        }\n        \n        return null;\n      }\n    };\n\n    it('should return result for successful operation', async () => {\n      const mockOperation = jest.fn().mockResolvedValue({ id: 1, name: 'Test User' });\n      \n      const result = await safeQuery(mockOperation, 'Find user');\n      \n      expect(result).toEqual({ id: 1, name: 'Test User' });\n      expect(mockOperation).toHaveBeenCalledTimes(1);\n      expect(consoleSpy.error).not.toHaveBeenCalled();\n    });\n\n    it('should return null and log error for failed operation', async () => {\n      const mockError = new Error('Database connection failed');\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, 'Find user');\n      \n      expect(result).toBeNull();\n      expect(mockOperation).toHaveBeenCalledTimes(1);\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Find user failed:',\n        'Database connection failed'\n      );\n    });\n\n    it('should handle unique constraint violation (P2002)', async () => {\n      const mockError = { code: 'P2002', message: 'Unique constraint failed' };\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, 'Create user');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Create user failed:',\n        'Unique constraint failed'\n      );\n      expect(consoleSpy.error).toHaveBeenCalledWith('Unique constraint violation');\n    });\n\n    it('should handle record not found (P2025)', async () => {\n      const mockError = { code: 'P2025', message: 'Record to update not found' };\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, 'Update user');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Update user failed:',\n        'Record to update not found'\n      );\n      expect(consoleSpy.error).toHaveBeenCalledWith('Record not found');\n    });\n\n    it('should handle foreign key constraint violation (P2003)', async () => {\n      const mockError = { code: 'P2003', message: 'Foreign key constraint failed' };\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, 'Delete user');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Delete user failed:',\n        'Foreign key constraint failed'\n      );\n      expect(consoleSpy.error).toHaveBeenCalledWith('Foreign key constraint violation');\n    });\n\n    it('should handle query interpretation error (P2016)', async () => {\n      const mockError = { code: 'P2016', message: 'Query interpretation error' };\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, 'Complex query');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Complex query failed:',\n        'Query interpretation error'\n      );\n      expect(consoleSpy.error).toHaveBeenCalledWith('Query interpretation error');\n    });\n\n    it('should use default context when none provided', async () => {\n      const mockError = new Error('Generic error');\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation);\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Database operation failed:',\n        'Generic error'\n      );\n    });\n\n    it('should handle errors without message property', async () => {\n      const mockError = { code: 'UNKNOWN' };\n      const mockOperation = jest.fn().mockRejectedValue(mockError);\n      \n      const result = await safeQuery(mockOperation, 'Test operation');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Test operation failed:',\n        undefined\n      );\n    });\n\n    it('should handle string errors', async () => {\n      const mockOperation = jest.fn().mockRejectedValue('String error');\n      \n      const result = await safeQuery(mockOperation, 'String error test');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'String error test failed:',\n        undefined\n      );\n    });\n\n    it('should handle null/undefined errors', async () => {\n      const mockOperation = jest.fn().mockRejectedValue(null);\n      \n      const result = await safeQuery(mockOperation, 'Null error test');\n      \n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Null error test failed:',\n        undefined\n      );\n    });\n  });\n\n  describe('Database Operations with safeQuery', () => {\n    // Mock safeQuery for integration testing\n    const mockSafeQuery = jest.fn();\n    \n    beforeEach(() => {\n      mockSafeQuery.mockClear();\n    });\n\n    it('should safely execute user findMany operation', async () => {\n      const mockUsers = [{ id: 1, name: 'User 1' }, { id: 2, name: 'User 2' }];\n      mockSafeQuery.mockResolvedValue(mockUsers);\n      \n      const result = await mockSafeQuery(\n        () => mockPrismaClient.user.findMany(),\n        'Find all users'\n      );\n      \n      expect(result).toEqual(mockUsers);\n      expect(mockSafeQuery).toHaveBeenCalledWith(\n        expect.any(Function),\n        'Find all users'\n      );\n    });\n\n    it('should safely execute user create operation', async () => {\n      const newUser = { id: 1, name: 'New User', email: 'new@example.com' };\n      mockSafeQuery.mockResolvedValue(newUser);\n      \n      const result = await mockSafeQuery(\n        () => mockPrismaClient.user.create({\n          data: { name: 'New User', email: 'new@example.com' }\n        }),\n        'Create user'\n      );\n      \n      expect(result).toEqual(newUser);\n      expect(mockSafeQuery).toHaveBeenCalledWith(\n        expect.any(Function),\n        'Create user'\n      );\n    });\n\n    it('should safely execute shop operations', async () => {\n      const mockShop = { id: 'shop1', name: 'Test Shop' };\n      mockSafeQuery.mockResolvedValue(mockShop);\n      \n      const result = await mockSafeQuery(\n        () => mockPrismaClient.shop.findUnique({ where: { id: 'shop1' } }),\n        'Find shop'\n      );\n      \n      expect(result).toEqual(mockShop);\n      expect(mockSafeQuery).toHaveBeenCalledWith(\n        expect.any(Function),\n        'Find shop'\n      );\n    });\n\n    it('should return null when operation fails', async () => {\n      mockSafeQuery.mockResolvedValue(null);\n      \n      const result = await mockSafeQuery(\n        () => mockPrismaClient.user.findUnique({ where: { id: 999 } }),\n        'Find non-existent user'\n      );\n      \n      expect(result).toBeNull();\n    });\n  });\n\n  describe('Prisma Client Lifecycle', () => {\n    it('should handle connection operations', async () => {\n      mockPrismaClient.$connect.mockResolvedValue(undefined);\n      \n      await mockPrismaClient.$connect();\n      \n      expect(mockPrismaClient.$connect).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle disconnection operations', async () => {\n      mockPrismaClient.$disconnect.mockResolvedValue(undefined);\n      \n      await mockPrismaClient.$disconnect();\n      \n      expect(mockPrismaClient.$disconnect).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle connection errors', async () => {\n      const connectionError = new Error('Connection failed');\n      mockPrismaClient.$connect.mockRejectedValue(connectionError);\n      \n      await expect(mockPrismaClient.$connect()).rejects.toThrow('Connection failed');\n    });\n  });\n});"],"names":["jest","mock","PrismaClient","fn","mockImplementation","mockPrismaClient","$connect","$disconnect","user","findMany","findUnique","create","update","delete","shop","consoleSpy","log","spyOn","console","error","warn","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","it","resetModules","require","expect","toHaveBeenCalledWith","datasources","db","url","process","env","DATABASE_URL","safeQuery","operation","context","result","message","code","mockOperation","mockResolvedValue","id","name","toEqual","toHaveBeenCalledTimes","not","toHaveBeenCalled","mockError","Error","mockRejectedValue","toBeNull","undefined","mockSafeQuery","mockUsers","any","Function","newUser","email","data","mockShop","where","connectionError","rejects","toThrow"],"mappings":"AAAA,kCAAkC;AAClC,wEAAwE;;AAwBxE,oCAAoC;AACpCA,KAAKC,IAAI,CAAC,kBAAkB,IAAO,CAAA;QACjCC,cAAcF,KAAKG,EAAE,GAAGC,kBAAkB,CAAC,IAAMC;IACnD,CAAA;;;;wBAzB6B;AAE7B,oBAAoB;AACpB,MAAMA,mBAAmB;IACvBC,UAAUN,KAAKG,EAAE;IACjBI,aAAaP,KAAKG,EAAE;IACpBK,MAAM;QACJC,UAAUT,KAAKG,EAAE;QACjBO,YAAYV,KAAKG,EAAE;QACnBQ,QAAQX,KAAKG,EAAE;QACfS,QAAQZ,KAAKG,EAAE;QACfU,QAAQb,KAAKG,EAAE;IACjB;IACAW,MAAM;QACJL,UAAUT,KAAKG,EAAE;QACjBO,YAAYV,KAAKG,EAAE;QACnBQ,QAAQX,KAAKG,EAAE;QACfS,QAAQZ,KAAKG,EAAE;QACfU,QAAQb,KAAKG,EAAE;IACjB;AACF;AAOA,uBAAuB;AACvB,MAAMY,aAAa;IACjBC,KAAKhB,KAAKiB,KAAK,CAACC,SAAS,OAAOd,kBAAkB,CAAC,KAAO;IAC1De,OAAOnB,KAAKiB,KAAK,CAACC,SAAS,SAASd,kBAAkB,CAAC,KAAO;IAC9DgB,MAAMpB,KAAKiB,KAAK,CAACC,SAAS,QAAQd,kBAAkB,CAAC,KAAO;AAC9D;AAEAiB,SAAS,oBAAoB;IAC3BC,WAAW;QACTtB,KAAKuB,aAAa;QAClBR,WAAWC,GAAG,CAACQ,SAAS;QACxBT,WAAWI,KAAK,CAACK,SAAS;QAC1BT,WAAWK,IAAI,CAACI,SAAS;IAC3B;IAEAC,SAAS;QACPV,WAAWC,GAAG,CAACU,WAAW;QAC1BX,WAAWI,KAAK,CAACO,WAAW;QAC5BX,WAAWK,IAAI,CAACM,WAAW;IAC7B;IAEAL,SAAS,8BAA8B;QACrCM,GAAG,yDAAyD;YAC1D,mCAAmC;YACnC3B,KAAK4B,YAAY;YACjBC,QAAQ;YAERC,OAAO5B,oBAAY,EAAE6B,oBAAoB,CAAC;gBACxCf,KAAK;oBAAC;oBAAS;oBAAQ;oBAAQ;iBAAQ;gBACvCgB,aAAa;oBACXC,IAAI;wBACFC,KAAKC,QAAQC,GAAG,CAACC,YAAY;oBAC/B;gBACF;YACF;QACF;IACF;IAEAhB,SAAS,gDAAgD;QACvD,mDAAmD;QACnD,MAAMiB,YAAY,OAChBC,WACAC,UAAkB,oBAAoB;YAEtC,IAAI;gBACF,MAAMC,SAAS,MAAMF;gBACrB,OAAOE;YACT,EAAE,OAAOtB,OAAY;gBACnBD,QAAQC,KAAK,CAAC,CAAC,EAAEqB,QAAQ,QAAQ,CAAC,EAAErB,MAAMuB,OAAO;gBAEjD,gCAAgC;gBAChC,IAAIvB,MAAMwB,IAAI,KAAK,SAAS;oBAC1BzB,QAAQC,KAAK,CAAC;gBAChB,OAAO,IAAIA,MAAMwB,IAAI,KAAK,SAAS;oBACjCzB,QAAQC,KAAK,CAAC;gBAChB,OAAO,IAAIA,MAAMwB,IAAI,KAAK,SAAS;oBACjCzB,QAAQC,KAAK,CAAC;gBAChB,OAAO,IAAIA,MAAMwB,IAAI,KAAK,SAAS;oBACjCzB,QAAQC,KAAK,CAAC;gBAChB;gBAEA,OAAO;YACT;QACF;QAEAQ,GAAG,iDAAiD;YAClD,MAAMiB,gBAAgB5C,KAAKG,EAAE,GAAG0C,iBAAiB,CAAC;gBAAEC,IAAI;gBAAGC,MAAM;YAAY;YAE7E,MAAMN,SAAS,MAAMH,UAAUM,eAAe;YAE9Cd,OAAOW,QAAQO,OAAO,CAAC;gBAAEF,IAAI;gBAAGC,MAAM;YAAY;YAClDjB,OAAOc,eAAeK,qBAAqB,CAAC;YAC5CnB,OAAOf,WAAWI,KAAK,EAAE+B,GAAG,CAACC,gBAAgB;QAC/C;QAEAxB,GAAG,yDAAyD;YAC1D,MAAMyB,YAAY,IAAIC,MAAM;YAC5B,MAAMT,gBAAgB5C,KAAKG,EAAE,GAAGmD,iBAAiB,CAACF;YAElD,MAAMX,SAAS,MAAMH,UAAUM,eAAe;YAE9Cd,OAAOW,QAAQc,QAAQ;YACvBzB,OAAOc,eAAeK,qBAAqB,CAAC;YAC5CnB,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAC3C,qBACA;QAEJ;QAEAJ,GAAG,qDAAqD;YACtD,MAAMyB,YAAY;gBAAET,MAAM;gBAASD,SAAS;YAA2B;YACvE,MAAME,gBAAgB5C,KAAKG,EAAE,GAAGmD,iBAAiB,CAACF;YAElD,MAAMX,SAAS,MAAMH,UAAUM,eAAe;YAE9Cd,OAAOW,QAAQc,QAAQ;YACvBzB,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAC3C,uBACA;YAEFD,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAAC;QAChD;QAEAJ,GAAG,0CAA0C;YAC3C,MAAMyB,YAAY;gBAAET,MAAM;gBAASD,SAAS;YAA6B;YACzE,MAAME,gBAAgB5C,KAAKG,EAAE,GAAGmD,iBAAiB,CAACF;YAElD,MAAMX,SAAS,MAAMH,UAAUM,eAAe;YAE9Cd,OAAOW,QAAQc,QAAQ;YACvBzB,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAC3C,uBACA;YAEFD,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAAC;QAChD;QAEAJ,GAAG,0DAA0D;YAC3D,MAAMyB,YAAY;gBAAET,MAAM;gBAASD,SAAS;YAAgC;YAC5E,MAAME,gBAAgB5C,KAAKG,EAAE,GAAGmD,iBAAiB,CAACF;YAElD,MAAMX,SAAS,MAAMH,UAAUM,eAAe;YAE9Cd,OAAOW,QAAQc,QAAQ;YACvBzB,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAC3C,uBACA;YAEFD,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAAC;QAChD;QAEAJ,GAAG,oDAAoD;YACrD,MAAMyB,YAAY;gBAAET,MAAM;gBAASD,SAAS;YAA6B;YACzE,MAAME,gBAAgB5C,KAAKG,EAAE,GAAGmD,iBAAiB,CAACF;YAElD,MAAMX,SAAS,MAAMH,UAAUM,eAAe;YAE9Cd,OAAOW,QAAQc,QAAQ;YACvBzB,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAC3C,yBACA;YAEFD,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAAC;QAChD;QAEAJ,GAAG,iDAAiD;YAClD,MAAMyB,YAAY,IAAIC,MAAM;YAC5B,MAAMT,gBAAgB5C,KAAKG,EAAE,GAAGmD,iBAAiB,CAACF;YAElD,MAAMX,SAAS,MAAMH,UAAUM;YAE/Bd,OAAOW,QAAQc,QAAQ;YACvBzB,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAC3C,8BACA;QAEJ;QAEAJ,GAAG,iDAAiD;YAClD,MAAMyB,YAAY;gBAAET,MAAM;YAAU;YACpC,MAAMC,gBAAgB5C,KAAKG,EAAE,GAAGmD,iBAAiB,CAACF;YAElD,MAAMX,SAAS,MAAMH,UAAUM,eAAe;YAE9Cd,OAAOW,QAAQc,QAAQ;YACvBzB,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAC3C,0BACAyB;QAEJ;QAEA7B,GAAG,+BAA+B;YAChC,MAAMiB,gBAAgB5C,KAAKG,EAAE,GAAGmD,iBAAiB,CAAC;YAElD,MAAMb,SAAS,MAAMH,UAAUM,eAAe;YAE9Cd,OAAOW,QAAQc,QAAQ;YACvBzB,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAC3C,6BACAyB;QAEJ;QAEA7B,GAAG,uCAAuC;YACxC,MAAMiB,gBAAgB5C,KAAKG,EAAE,GAAGmD,iBAAiB,CAAC;YAElD,MAAMb,SAAS,MAAMH,UAAUM,eAAe;YAE9Cd,OAAOW,QAAQc,QAAQ;YACvBzB,OAAOf,WAAWI,KAAK,EAAEY,oBAAoB,CAC3C,2BACAyB;QAEJ;IACF;IAEAnC,SAAS,sCAAsC;QAC7C,yCAAyC;QACzC,MAAMoC,gBAAgBzD,KAAKG,EAAE;QAE7BmB,WAAW;YACTmC,cAAcjC,SAAS;QACzB;QAEAG,GAAG,iDAAiD;YAClD,MAAM+B,YAAY;gBAAC;oBAAEZ,IAAI;oBAAGC,MAAM;gBAAS;gBAAG;oBAAED,IAAI;oBAAGC,MAAM;gBAAS;aAAE;YACxEU,cAAcZ,iBAAiB,CAACa;YAEhC,MAAMjB,SAAS,MAAMgB,cACnB,IAAMpD,iBAAiBG,IAAI,CAACC,QAAQ,IACpC;YAGFqB,OAAOW,QAAQO,OAAO,CAACU;YACvB5B,OAAO2B,eAAe1B,oBAAoB,CACxCD,OAAO6B,GAAG,CAACC,WACX;QAEJ;QAEAjC,GAAG,+CAA+C;YAChD,MAAMkC,UAAU;gBAAEf,IAAI;gBAAGC,MAAM;gBAAYe,OAAO;YAAkB;YACpEL,cAAcZ,iBAAiB,CAACgB;YAEhC,MAAMpB,SAAS,MAAMgB,cACnB,IAAMpD,iBAAiBG,IAAI,CAACG,MAAM,CAAC;oBACjCoD,MAAM;wBAAEhB,MAAM;wBAAYe,OAAO;oBAAkB;gBACrD,IACA;YAGFhC,OAAOW,QAAQO,OAAO,CAACa;YACvB/B,OAAO2B,eAAe1B,oBAAoB,CACxCD,OAAO6B,GAAG,CAACC,WACX;QAEJ;QAEAjC,GAAG,yCAAyC;YAC1C,MAAMqC,WAAW;gBAAElB,IAAI;gBAASC,MAAM;YAAY;YAClDU,cAAcZ,iBAAiB,CAACmB;YAEhC,MAAMvB,SAAS,MAAMgB,cACnB,IAAMpD,iBAAiBS,IAAI,CAACJ,UAAU,CAAC;oBAAEuD,OAAO;wBAAEnB,IAAI;oBAAQ;gBAAE,IAChE;YAGFhB,OAAOW,QAAQO,OAAO,CAACgB;YACvBlC,OAAO2B,eAAe1B,oBAAoB,CACxCD,OAAO6B,GAAG,CAACC,WACX;QAEJ;QAEAjC,GAAG,2CAA2C;YAC5C8B,cAAcZ,iBAAiB,CAAC;YAEhC,MAAMJ,SAAS,MAAMgB,cACnB,IAAMpD,iBAAiBG,IAAI,CAACE,UAAU,CAAC;oBAAEuD,OAAO;wBAAEnB,IAAI;oBAAI;gBAAE,IAC5D;YAGFhB,OAAOW,QAAQc,QAAQ;QACzB;IACF;IAEAlC,SAAS,2BAA2B;QAClCM,GAAG,uCAAuC;YACxCtB,iBAAiBC,QAAQ,CAACuC,iBAAiB,CAACW;YAE5C,MAAMnD,iBAAiBC,QAAQ;YAE/BwB,OAAOzB,iBAAiBC,QAAQ,EAAE2C,qBAAqB,CAAC;QAC1D;QAEAtB,GAAG,0CAA0C;YAC3CtB,iBAAiBE,WAAW,CAACsC,iBAAiB,CAACW;YAE/C,MAAMnD,iBAAiBE,WAAW;YAElCuB,OAAOzB,iBAAiBE,WAAW,EAAE0C,qBAAqB,CAAC;QAC7D;QAEAtB,GAAG,mCAAmC;YACpC,MAAMuC,kBAAkB,IAAIb,MAAM;YAClChD,iBAAiBC,QAAQ,CAACgD,iBAAiB,CAACY;YAE5C,MAAMpC,OAAOzB,iBAAiBC,QAAQ,IAAI6D,OAAO,CAACC,OAAO,CAAC;QAC5D;IACF;AACF"}