619aa27877f4927b1969b9145e9e4a5d
/**
 * Centralized Permission Service
 * 
 * Provides a unified interface for permission checking with caching,
 * context-aware validation, and performance optimizations.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    permissionService: function() {
        return permissionService;
    }
});
const _permissions = require("../constants/permissions");
class PermissionService {
    /**
   * Check if user has a specific permission
   */ hasPermission(user, permission, context) {
        if (!user || !user.permissions) {
            return false;
        }
        // Validate permission format
        if (!(0, _permissions.isValidPermission)(permission)) {
            console.warn(`Invalid permission format: ${permission}`);
            return false;
        }
        // Generate cache key
        const cacheKey = this.generateCacheKey(user.id, permission, context);
        // Check cache first
        const cached = this.getFromCache(cacheKey);
        if (cached !== null) {
            return cached;
        }
        // Perform permission check
        const result = this.checkPermission(user, permission, context);
        // Cache the result
        this.setCache(cacheKey, result);
        return result;
    }
    /**
   * Check if user has any of the specified permissions
   */ hasAnyPermission(user, permissions, context) {
        return permissions.some((permission)=>this.hasPermission(user, permission, context));
    }
    /**
   * Check if user has all of the specified permissions
   */ hasAllPermissions(user, permissions, context) {
        return permissions.every((permission)=>this.hasPermission(user, permission, context));
    }
    /**
   * Check if user is admin (has admin permissions)
   */ isAdmin(user) {
        if (!user) return false;
        return this.hasAnyPermission(user, [
            _permissions.PERMISSIONS.ADMIN_ALL,
            _permissions.PERMISSIONS.LEGACY_ALL,
            _permissions.PERMISSIONS.WILDCARD
        ]);
    }
    /**
   * Check if user has shop-specific access
   */ hasShopAccess(user, targetShopId, permission) {
        if (!user) return false;
        // Admin users have access to all shops
        if (this.isAdmin(user)) {
            return true;
        }
        // Check if user has shop:assigned_only restriction
        if (user.permissions.includes(_permissions.PERMISSIONS.SHOP_ASSIGNED_ONLY)) {
            // User can only access their assigned shop
            if (user.shopId !== targetShopId) {
                return false;
            }
        }
        // Check the specific permission
        return this.hasPermission(user, permission, {
            shopId: targetShopId
        });
    }
    /**
   * Checks if a user has a specific permission, ignoring wildcards.
   * This is useful for checking for explicit restrictions.
   */ hasExactPermission(user, permission) {
        if (!user || !user.permissions) {
            return false;
        }
        return user.permissions.includes(permission);
    }
    /**
   * Get user's accessible shop IDs based on permissions
   */ getAccessibleShopIds(user) {
        if (!user) return [];
        // Admin users have access to all shops
        if (this.isAdmin(user)) {
            return [
                "*"
            ]; // Wildcard for all shops
        }
        // Check if user has shop:assigned_only restriction
        if (user.permissions.includes(_permissions.PERMISSIONS.SHOP_ASSIGNED_ONLY)) {
            return user.shopId ? [
                user.shopId
            ] : [];
        }
        // For other users, return their assigned shop or all if they have shop:manage
        if (this.hasPermission(user, _permissions.PERMISSIONS.SHOP_MANAGE)) {
            return [
                "*"
            ]; // Can manage all shops
        }
        return user.shopId ? [
            user.shopId
        ] : [];
    }
    /**
   * Clear permission cache for a user
   */ clearUserCache(userId) {
        const keysToDelete = Array.from(this.cache.keys()).filter((key)=>key.startsWith(`${userId}:`));
        keysToDelete.forEach((key)=>this.cache.delete(key));
    }
    /**
   * Clear all permission cache
   */ clearAllCache() {
        this.cache.clear();
    }
    /**
   * Get cache statistics
   */ getCacheStats() {
        return {
            size: this.cache.size,
            hitRate: 0 // TODO: Implement hit rate tracking
        };
    }
    // Private methods
    checkPermission(user, permission, context) {
        // Check if permission is defined
        if (!permission) {
            return false;
        }
        const userPermissions = user.permissions || [];
        // Check for wildcard permissions
        if (userPermissions.includes(_permissions.PERMISSIONS.WILDCARD) || userPermissions.includes(_permissions.PERMISSIONS.LEGACY_ALL) || userPermissions.includes(_permissions.PERMISSIONS.ADMIN_ALL)) {
            return true;
        }
        // Check for exact permission match
        if (userPermissions.includes(permission)) {
            return true;
        }
        // Check for module-level permissions (e.g., 'sales:manage' includes 'sales:view')
        if (permission && typeof permission === "string" && permission.includes(":")) {
            const [module, action] = permission.split(":");
            if (action && userPermissions.includes(`${module}:manage`)) {
                return true;
            }
        }
        // Context-specific checks
        if (context) {
            return this.checkContextualPermission(user, permission, context);
        }
        return false;
    }
    checkContextualPermission(user, permission, context) {
        // Shop-specific permission checks
        if (context.shopId) {
            // Check if user has shop:assigned_only and is accessing their shop
            if (user.permissions.includes(_permissions.PERMISSIONS.SHOP_ASSIGNED_ONLY)) {
                return user.shopId === context.shopId;
            }
        }
        // Add more contextual checks as needed
        return false;
    }
    generateCacheKey(userId, permission, context) {
        const contextStr = context ? JSON.stringify(context) : "";
        return `${userId}:${permission}:${contextStr}`;
    }
    getFromCache(key) {
        const entry = this.cache.get(key);
        if (!entry) return null;
        // Check if cache entry is expired
        if (Date.now() > entry.timestamp + entry.ttl) {
            this.cache.delete(key);
            return null;
        }
        return entry.result;
    }
    setCache(key, result, ttl) {
        // Implement LRU eviction if cache is full
        if (this.cache.size >= this.MAX_CACHE_SIZE) {
            const firstKey = this.cache.keys().next().value;
            if (firstKey) {
                this.cache.delete(firstKey);
            }
        }
        this.cache.set(key, {
            result,
            timestamp: Date.now(),
            ttl: ttl || this.DEFAULT_TTL
        });
    }
    constructor(){
        this.cache = new Map();
        this.DEFAULT_TTL = 5 * 60 * 1000 // 5 minutes
        ;
        this.MAX_CACHE_SIZE = 1000;
    }
}
const permissionService = new PermissionService();
const _default = permissionService;

//# sourceMappingURL=data:application/json;base64,