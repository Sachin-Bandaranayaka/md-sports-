{"version":3,"names":["GET","cov_11omm1l759","s","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","f","authResult","_auth","validateTokenPermission","isValid","b","_server","NextResponse","json","error","message","status","searchParams","URL","url","startDateParam","get","endDateParam","endDate","Date","startDate","now","periodDays","Math","ceil","getTime","includes","success","dateRangeKey","toISOString","split","cacheKey","isFiltered","shopId","console","time","cachedData","_cache","cacheService","timeEnd","log","meta","period","fromCache","userId","getUserIdFromToken","user","_prisma","prisma","findUnique","where","id","select","roleName","permissions","isAdmin","filterUserId","p1","_route","fetchSummaryData","undefined","finally","p2","_route1","fetchTotalRetailValueData","p3","_route2","fetchShopsData","p4","_route3","fetchInventoryDistributionData","p5","_route4","fetchSalesData","p6","_route5","fetchTransfersData","summaryResult","totalRetailValueResult","shopsResult","inventoryResult","salesResult","transfersResult","Promise","all","data","map","item","title","value","formattedValue","trend","trendUp","responseData","summaryData","shopPerformance","inventoryDistribution","monthlySales","recentTransfers","shopFiltered","errors","filter","e","set","Error","String"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/all/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { fetchSummaryData } from '../summary/route';\nimport { fetchTotalRetailValueData } from '../total-retail-value/route';\nimport { fetchShopsData } from '../shops/route';\nimport { fetchInventoryDistributionData } from '../inventory/route';\nimport { fetchSalesData } from '../sales/route';\nimport { fetchTransfersData } from '../transfers/route';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission, getUserIdFromToken } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_dashboard');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Extract date range from query parameters\n        const { searchParams } = new URL(request.url);\n        const startDateParam = searchParams.get('startDate');\n        const endDateParam = searchParams.get('endDate');\n        \n        // Default to last 7 days if no dates provided\n        const endDate = endDateParam ? new Date(endDateParam) : new Date();\n        const startDate = startDateParam ? new Date(startDateParam) : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n        \n        // Calculate period days for backward compatibility with existing functions\n        const periodDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n\n        // Validate period parameter\n        if (![7, 30].includes(periodDays)) {\n            return NextResponse.json({ \n                success: false, \n                message: 'Invalid period. Must be 7 or 30 days.' \n            }, { status: 400 });\n        }\n\n        // Create cache key based on shop and date range\n        const dateRangeKey = `${startDate.toISOString().split('T')[0]}-${endDate.toISOString().split('T')[0]}`;\n        const cacheKey = `dashboard:all:${context.isFiltered ? context.shopId : 'all'}:${dateRangeKey}`;\n        console.time('cache check');\n        const cachedData = await cacheService.get(cacheKey);\n        console.timeEnd('cache check');\n\n        if (cachedData) {\n            console.log('âœ… Dashboard data served from cache for period:', periodDays, 'days');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    ...cachedData.meta,\n                    period: periodDays,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('ðŸ”„ Fetching fresh dashboard data with shop context and period:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered,\n            period: periodDays\n        });\n\n        const shopId = context.isFiltered ? context.shopId : null;\n\n        // Get user ID from token\n        const userId = await getUserIdFromToken(request);\n        if (!userId) {\n            return NextResponse.json({ error: 'User ID not found in token' }, { status: 401 });\n        }\n\n        // Fetch user details to check role and permissions\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            select: {\n                id: true,\n                roleName: true,\n                permissions: true\n            }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check if user is admin or has admin permissions\n        const isAdmin = user.roleName === 'Admin' || user.roleName === 'Super Admin' || \n                       (user.permissions && user.permissions.includes('admin:all'));\n\n        // Determine user filtering\n        let filterUserId: string | null = null;\n        if (!isAdmin) {\n            filterUserId = userId;\n        }\n\n        console.time('fetchSummaryData');\n        const p1 = fetchSummaryData(shopId, periodDays, undefined, undefined, filterUserId).finally(() => console.timeEnd('fetchSummaryData'));\n\n        console.time('fetchTotalRetailValueData');\n        const p2 = fetchTotalRetailValueData(shopId, periodDays).finally(() => console.timeEnd('fetchTotalRetailValueData'));\n\n        console.time('fetchShopsData');\n        const p3 = fetchShopsData(shopId, periodDays).finally(() => console.timeEnd('fetchShopsData'));\n\n        console.time('fetchInventoryDistributionData');\n        const p4 = fetchInventoryDistributionData(shopId, periodDays).finally(() => console.timeEnd('fetchInventoryDistributionData'));\n\n        console.time('fetchSalesData');\n        const p5 = fetchSalesData(shopId, periodDays, undefined, undefined, filterUserId).finally(() => console.timeEnd('fetchSalesData'));\n\n        console.time('fetchTransfersData');\n        const p6 = fetchTransfersData(shopId, periodDays).finally(() => console.timeEnd('fetchTransfersData'));\n\n        console.time('Promise.all dashboard data');\n        const [\n            summaryResult,\n            totalRetailValueResult,\n            shopsResult,\n            inventoryResult,\n            salesResult,\n            transfersResult\n        ] = await Promise.all([\n             fetchSummaryData(context.shopId, periodDays, startDate, endDate, filterUserId),\n             fetchTotalRetailValueData(context.shopId, periodDays, startDate, endDate),\n             fetchShopsData(context.shopId, periodDays, startDate, endDate),\n             fetchInventoryDistributionData(context.shopId, periodDays, startDate, endDate),\n             fetchSalesData(context.shopId, periodDays, startDate, endDate, filterUserId),\n             fetchTransfersData(context.shopId, periodDays, startDate, endDate)\n         ]);\n        console.timeEnd('Promise.all dashboard data');\n\n        // The summaryData expects totalRetailValue to be part of its structure.\n        // Let's merge it here.\n        if (summaryResult.success && summaryResult.data && totalRetailValueResult.success) {\n            summaryResult.data = summaryResult.data.map(item => {\n                if (item.title === 'Total Retail Value') {\n                    return {\n                        ...item,\n                        value: totalRetailValueResult.formattedValue,\n                        trend: totalRetailValueResult.trend,\n                        trendUp: totalRetailValueResult.trendUp\n                    };\n                }\n                return item;\n            });\n        }\n\n        const responseData = {\n            success: true, // Overall success\n            summaryData: summaryResult.success ? summaryResult.data : null,\n            // totalRetailValue: totalRetailValueResult.success ? totalRetailValueResult : null, // No longer needed separately\n            shopPerformance: shopsResult.success ? shopsResult.data : null,\n            inventoryDistribution: inventoryResult.success ? inventoryResult.data : null,\n            monthlySales: salesResult.success ? salesResult.data : null,\n            recentTransfers: transfersResult.success ? transfersResult.data : null,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                period: periodDays,\n                fromCache: false\n            },\n            // You might want to include individual success statuses or error messages if needed\n            errors: [\n                !summaryResult.success ? 'Failed to fetch summary data' : null,\n                !totalRetailValueResult.success ? 'Failed to fetch total retail value' : null,\n                !shopsResult.success ? 'Failed to fetch shops data' : null,\n                !inventoryResult.success ? 'Failed to fetch inventory data' : null,\n                !salesResult.success ? 'Failed to fetch sales data' : null,\n                !transfersResult.success ? 'Failed to fetch transfers data' : null,\n            ].filter(e => e !== null)\n        };\n\n        // Cache the response for 2 minutes with period-specific key\n        console.time('cache set');\n        await cacheService.set(cacheKey, responseData, 120);\n        console.timeEnd('cache set');\n        console.log('ðŸ’¾ Dashboard data cached for 2 minutes with date range:', dateRangeKey);\n\n        return NextResponse.json(responseData);\n\n    } catch (error) {\n        console.error('Error fetching all dashboard data:', error);\n        return NextResponse.json(\n            {\n                success: false,\n                message: 'Failed to load all dashboard data',\n                error: error instanceof Error ? error.message : String(error),\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId\n                }\n            },\n            { status: 500 }\n        );\n    }\n});"],"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","ignoreList":[]}