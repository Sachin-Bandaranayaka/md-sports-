a6031d6db940884359c6d07b23505e31
/**
 * Request Deduplication Utility
 * 
 * Prevents duplicate API requests by caching ongoing requests
 * and returning the same promise for identical requests.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEDUPLICATION_CONFIG: function() {
        return DEDUPLICATION_CONFIG;
    },
    clearAllRequests: function() {
        return clearAllRequests;
    },
    deduplicateRequest: function() {
        return deduplicateRequest;
    },
    deduplicatedFetch: function() {
        return deduplicatedFetch;
    },
    deduplicatedFetchJson: function() {
        return deduplicatedFetchJson;
    },
    forceCleanup: function() {
        return forceCleanup;
    },
    getDeduplicationStats: function() {
        return getDeduplicationStats;
    },
    useDeduplicatedFetch: function() {
        return useDeduplicatedFetch;
    }
});
const _performance = require("./performance");
const monitor = new _performance.PerformanceMonitor();
// Store for ongoing requests
const ongoingRequests = new Map();
const requestMetadata = new Map();
// Configuration
const DEDUPLICATION_CONFIG = {
    // How long to keep a request in the deduplication cache (ms)
    maxAge: 30 * 1000,
    // Maximum number of concurrent requests to track
    maxConcurrentRequests: 100,
    // Cleanup interval for expired requests
    cleanupInterval: 60 * 1000,
    // Enable logging for debugging
    enableLogging: process.env.NODE_ENV === "development"
};
/**
 * Generate a unique key for a request
 */ function generateRequestKey(url, method = "GET", body, headers) {
    const normalizedUrl = url.toLowerCase();
    const normalizedMethod = method.toUpperCase();
    // Include relevant headers in the key (excluding auth tokens for security)
    const relevantHeaders = headers ? Object.entries(headers).filter(([key])=>!key.toLowerCase().includes("authorization")).sort(([a], [b])=>a.localeCompare(b)).map(([key, value])=>`${key}:${value}`).join("|") : "";
    const bodyString = body ? JSON.stringify(body) : "";
    return `${normalizedMethod}:${normalizedUrl}:${bodyString}:${relevantHeaders}`;
}
/**
 * Clean up expired requests
 */ function cleanupExpiredRequests() {
    const now = Date.now();
    const expiredKeys = [];
    for (const [key, metadata] of requestMetadata.entries()){
        if (now - metadata.lastAccess > DEDUPLICATION_CONFIG.maxAge) {
            expiredKeys.push(key);
        }
    }
    for (const key of expiredKeys){
        ongoingRequests.delete(key);
        requestMetadata.delete(key);
    }
    if (DEDUPLICATION_CONFIG.enableLogging && expiredKeys.length > 0) {
        console.log(`🧹 Cleaned up ${expiredKeys.length} expired request deduplication entries`);
    }
}
/**
 * Check if we're at the concurrent request limit
 */ function isAtConcurrentLimit() {
    return ongoingRequests.size >= DEDUPLICATION_CONFIG.maxConcurrentRequests;
}
async function deduplicateRequest(requestFn, url, method = "GET", body, headers) {
    const requestKey = generateRequestKey(url, method, body, headers);
    const now = Date.now();
    // Check if we already have this request ongoing
    const existingRequest = ongoingRequests.get(requestKey);
    if (existingRequest) {
        // Update metadata
        const metadata = requestMetadata.get(requestKey);
        if (metadata) {
            metadata.count++;
            metadata.lastAccess = now;
        }
        if (DEDUPLICATION_CONFIG.enableLogging) {
            console.log(`🔄 Deduplicating request: ${method} ${url} (${metadata?.count || 1} total)`);
        }
        return existingRequest;
    }
    // Clean up if we're at the limit
    if (isAtConcurrentLimit()) {
        cleanupExpiredRequests();
        // If still at limit, proceed without deduplication
        if (isAtConcurrentLimit()) {
            if (DEDUPLICATION_CONFIG.enableLogging) {
                console.warn(`⚠️ Request deduplication limit reached, proceeding without deduplication: ${method} ${url}`);
            }
            return requestFn();
        }
    }
    // Create new request
    const timer = monitor.startTimer("request-deduplication");
    const requestPromise = requestFn().finally(()=>{
        // Clean up after request completes
        ongoingRequests.delete(requestKey);
        monitor.endTimer(timer);
    });
    // Store the request
    ongoingRequests.set(requestKey, requestPromise);
    requestMetadata.set(requestKey, {
        timestamp: now,
        count: 1,
        lastAccess: now
    });
    if (DEDUPLICATION_CONFIG.enableLogging) {
        console.log(`🚀 Starting new request: ${method} ${url}`);
    }
    return requestPromise;
}
async function deduplicatedFetch(url, options = {}) {
    const method = options.method || "GET";
    const headers = options.headers || {};
    const body = options.body;
    return deduplicateRequest(()=>fetch(url, options), url, method, body, headers);
}
async function deduplicatedFetchJson(url, options = {}) {
    const response = await deduplicatedFetch(url, options);
    if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return response.json();
}
function clearAllRequests() {
    ongoingRequests.clear();
    requestMetadata.clear();
    if (DEDUPLICATION_CONFIG.enableLogging) {
        console.log("\uD83E\uDDF9 Cleared all request deduplication entries");
    }
}
function getDeduplicationStats() {
    const now = Date.now();
    let totalRequests = 0;
    let oldestTimestamp = Infinity;
    for (const metadata of requestMetadata.values()){
        totalRequests += metadata.count;
        if (metadata.timestamp < oldestTimestamp) {
            oldestTimestamp = metadata.timestamp;
        }
    }
    return {
        ongoingRequests: ongoingRequests.size,
        totalRequests,
        averageRequestCount: requestMetadata.size > 0 ? totalRequests / requestMetadata.size : 0,
        oldestRequest: oldestTimestamp === Infinity ? null : now - oldestTimestamp
    };
}
function forceCleanup() {
    cleanupExpiredRequests();
}
// Start automatic cleanup
setInterval(cleanupExpiredRequests, DEDUPLICATION_CONFIG.cleanupInterval);
function useDeduplicatedFetch() {
    return {
        fetch: deduplicatedFetch,
        fetchJson: deduplicatedFetchJson,
        getStats: getDeduplicationStats,
        clearAll: clearAllRequests
    };
}

//# sourceMappingURL=data:application/json;base64,