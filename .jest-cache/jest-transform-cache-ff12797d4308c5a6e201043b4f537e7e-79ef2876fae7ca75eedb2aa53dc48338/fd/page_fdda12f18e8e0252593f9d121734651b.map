{"version":3,"names":["default","cov_1wzwe2l5ja","f","s","Inventory","revalidate","fetchCategories","baseUrl","headers","categoriesResponse","fetch","next","tags","ok","b","console","error","status","text","categoriesData","json","success","data","searchParams","passedSearchParams","headersList","_headers","host","get","protocol","process","env","NODE_ENV","page","parseInt","limit","search","categoryFilter","category","statusFilter","queryParams","URLSearchParams","toString","append","cookieStore","cookies","log","getAll","accessToken","value","substring","requestHeaders","categories","inventoryResponse","inventoryItems","pagination","total","totalPages","inventoryData","message","e","_jsxruntime","jsx","_MainLayout","_PermissionGuard","PermissionGuard","permission","_permissions","PERMISSIONS","INVENTORY_VIEW","fallback","_AccessDenied","AccessDenied","jsxs","className","_InventoryHeaderActions","_react","Suspense","_InventoryClientWrapper","initialInventoryItems","initialCategories","initialPagination","initialSearchTerm","initialCategoryFilter","initialStatusFilter"],"sources":["/Users/sachin/Documents/md-sports-/src/app/inventory/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\nimport { headers, cookies } from 'next/headers';\nimport MainLayout from '@/components/layout/MainLayout';\nimport InventoryClientWrapper from '@/components/inventory/InventoryClientWrapper';\nimport InventoryHeaderActions from '@/components/inventory/InventoryHeaderActions';\nimport { PermissionGuard } from '@/components/auth/PermissionGuard';\nimport { PERMISSIONS } from '@/lib/constants/permissions';\nimport { AccessDenied } from '@/components/ui/AccessDenied';\n\n// Add revalidation - cache inventory page for 5 seconds (reduced from 10)\nexport const revalidate = 5;\n\n// Define proper types for our data\ninterface BranchStock {\n    shopId: number;\n    shopName: string;\n    quantity: number;\n}\n\ninterface InventoryItem {\n    id: number;\n    sku: string;\n    name: string;\n    category: string;\n    stock: number;\n    retailPrice: number;\n    weightedAverageCost: number;\n    status: string;\n    branchStock: BranchStock[];\n}\n\ninterface Category {\n    id: number;\n    name: string;\n}\n\ninterface InventorySearchParams {\n    page?: string;\n    limit?: string;\n    search?: string;\n    category?: string;\n    status?: string;\n}\n\nasync function fetchCategories(baseUrl: string, headers?: HeadersInit) {\n    try {\n        const categoriesResponse = await fetch(`${baseUrl}/api/categories`, {\n            headers,\n            next: { \n                revalidate: 30, // Revalidate every 30 seconds\n                tags: ['categories'] // Add tags for revalidation\n            }\n        });\n        if (!categoriesResponse.ok) {\n            console.error('Failed to fetch categories:', categoriesResponse.status, await categoriesResponse.text());\n            return []; // Return empty array on error\n        }\n        const categoriesData = await categoriesResponse.json();\n        return categoriesData.success ? categoriesData.data : [];\n    } catch (error) {\n        console.error('Error in fetchCategories:', error);\n        return [];\n    }\n}\n\nexport default async function Inventory({\n    searchParams: passedSearchParams\n}: {\n    searchParams: InventorySearchParams\n}) {\n    const headersList = await headers();\n    const host = headersList.get('host') || 'localhost:3000';\n    const protocol = process?.env?.NODE_ENV === 'development' ? 'http' : 'https';\n    const baseUrl = `${protocol}://${host}`;\n\n    const searchParams = await passedSearchParams;\n\n    const page = parseInt(searchParams?.page || '1');\n    const limit = parseInt(searchParams?.limit || '10');\n    const search = searchParams?.search || '';\n    const categoryFilter = searchParams?.category || '';\n    const statusFilter = searchParams?.status || '';\n\n    const queryParams = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n    });\n    if (search) queryParams.append('search', search);\n    if (categoryFilter) queryParams.append('category', categoryFilter);\n    if (statusFilter) queryParams.append('status', statusFilter);\n\n    // Get access token from cookies for authentication\n    const cookieStore = await cookies();\n    console.log('All cookies received on server component:', cookieStore.getAll());\n    const accessToken = cookieStore.get('accessToken')?.value;\n    console.log('Access token from cookie:', accessToken ? `${accessToken.substring(0, 10)}...` : 'Not Found');\n\n    // Prepare headers for authenticated requests\n    const requestHeaders: HeadersInit = {\n        'Content-Type': 'application/json',\n    };\n\n    if (accessToken) {\n        requestHeaders['Authorization'] = `Bearer ${accessToken}`;\n    }\n\n    // Fetch categories from the new API route with caching\n    const categories: Category[] = await fetchCategories(baseUrl, requestHeaders);\n\n    // Fetch inventory data with pagination and filters\n    const inventoryResponse = await fetch(\n        `${baseUrl}/api/inventory/summary?${queryParams.toString()}`,\n        {\n            headers: requestHeaders,\n            next: { \n                revalidate: 10, // Revalidate every 10 seconds to match page revalidation time\n                tags: ['inventory', 'products'] // Add tags for revalidation\n            }\n        }\n    );\n\n    let inventoryItems: InventoryItem[] = [];\n    let pagination = {\n        total: 0,\n        page: 1,\n        limit: 10,\n        totalPages: 0\n    };\n\n    if (!inventoryResponse.ok) {\n        console.error('Failed to fetch inventory data:', inventoryResponse.status, await inventoryResponse.text());\n        // Potentially set an error state to display to the user\n    } else {\n        try {\n            const inventoryData = await inventoryResponse.json();\n            if (inventoryData.success) {\n                inventoryItems = inventoryData.data;\n                pagination = inventoryData.pagination || pagination;\n            } else {\n                console.error('Inventory data API call not successful:', inventoryData.message);\n            }\n        } catch (e) {\n            console.error('Failed to parse inventory data JSON:', e);\n        }\n    }\n\n    return (\n        <MainLayout>\n            <PermissionGuard\n                permission={PERMISSIONS.INVENTORY_VIEW}\n                fallback={<AccessDenied message=\"You do not have permission to view the inventory.\" />}\n            >\n                <div className=\"space-y-6\">\n                    <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n                        <div>\n                            <h1 className=\"text-2xl font-bold text-gray-900\">Inventory Management</h1>\n                            <p className=\"text-gray-500\">Manage your product inventory across all shops</p>\n                        </div>\n                        <InventoryHeaderActions />\n                    </div>\n\n                    <Suspense fallback={<div>Loading inventory...</div>}>\n                        <InventoryClientWrapper\n                            initialInventoryItems={inventoryItems}\n                            initialCategories={categories}\n                            initialPagination={pagination}\n                            initialSearchTerm={search}\n                            initialCategoryFilter={categoryFilter}\n                            initialStatusFilter={statusFilter}\n                        />\n                    </Suspense>\n                </div>\n            </PermissionGuard>\n        </MainLayout>\n    );\n}"],"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","ignoreList":[]}