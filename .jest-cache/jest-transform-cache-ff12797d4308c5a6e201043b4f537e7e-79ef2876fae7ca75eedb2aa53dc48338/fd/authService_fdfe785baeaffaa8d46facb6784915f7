89e468503922ad93df1d4fa86d2e8028
"use strict";

/* istanbul ignore next */
function cov_y22h5fuwr() {
  var path = "/Users/sachin/Documents/md-sports-/src/services/authService.ts";
  var hash = "728c50ccf5f7806aa2ebe1901d9e0ccaec89652e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/services/authService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 32
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 41
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 27
        }
      },
      "11": {
        start: {
          line: 34,
          column: 32
        },
        end: {
          line: 34,
          column: 78
        }
      },
      "12": {
        start: {
          line: 35,
          column: 36
        },
        end: {
          line: 35,
          column: 86
        }
      },
      "13": {
        start: {
          line: 36,
          column: 30
        },
        end: {
          line: 36,
          column: 81
        }
      },
      "14": {
        start: {
          line: 37,
          column: 15
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "15": {
        start: {
          line: 38,
          column: 21
        },
        end: {
          line: 38,
          column: 56
        }
      },
      "16": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 51
        }
      },
      "17": {
        start: {
          line: 40,
          column: 39
        },
        end: {
          line: 40,
          column: 51
        }
      },
      "18": {
        start: {
          line: 41,
          column: 28
        },
        end: {
          line: 41,
          column: 41
        }
      },
      "19": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 40
        }
      },
      "20": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 45,
          column: 20
        }
      },
      "21": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 66
        }
      },
      "22": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "23": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 19
        }
      },
      "24": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "25": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 10
        }
      },
      "26": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 53
        }
      },
      "27": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "28": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 30
        }
      },
      "29": {
        start: {
          line: 60,
          column: 17
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "30": {
        start: {
          line: 63,
          column: 32
        },
        end: {
          line: 63,
          column: 88
        }
      },
      "31": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "32": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "33": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 95
        }
      },
      "34": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "35": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 57
        }
      },
      "36": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 39
        }
      },
      "37": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 25
        }
      },
      "38": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "39": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 31
        }
      },
      "40": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 18
        }
      },
      "41": {
        start: {
          line: 81,
          column: 19
        },
        end: {
          line: 81,
          column: 62
        }
      },
      "42": {
        start: {
          line: 83,
          column: 23
        },
        end: {
          line: 83,
          column: 71
        }
      },
      "43": {
        start: {
          line: 84,
          column: 33
        },
        end: {
          line: 102,
          column: 1
        }
      },
      "44": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 27
        }
      },
      "45": {
        start: {
          line: 85,
          column: 18
        },
        end: {
          line: 85,
          column: 27
        }
      },
      "46": {
        start: {
          line: 86,
          column: 21
        },
        end: {
          line: 86,
          column: 38
        }
      },
      "47": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 46
        }
      },
      "48": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 88,
          column: 29
        }
      },
      "49": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 29
        }
      },
      "50": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "51": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 23
        }
      },
      "52": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 28
        }
      },
      "53": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 33
        }
      },
      "54": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 38
        }
      },
      "55": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 68
        }
      },
      "56": {
        start: {
          line: 99,
          column: 43
        },
        end: {
          line: 99,
          column: 68
        }
      },
      "57": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 21
        }
      },
      "58": {
        start: {
          line: 103,
          column: 25
        },
        end: {
          line: 229,
          column: 1
        }
      },
      "59": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 228,
          column: 5
        }
      },
      "60": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 50
        }
      },
      "61": {
        start: {
          line: 107,
          column: 21
        },
        end: {
          line: 131,
          column: 66
        }
      },
      "62": {
        start: {
          line: 107,
          column: 54
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "63": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 53
        }
      },
      "64": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "65": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 138,
          column: 14
        }
      },
      "66": {
        start: {
          line: 141,
          column: 32
        },
        end: {
          line: 141,
          column: 80
        }
      },
      "67": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "68": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 146,
          column: 14
        }
      },
      "69": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 149,
          column: 34
        }
      },
      "70": {
        start: {
          line: 150,
          column: 30
        },
        end: {
          line: 150,
          column: 32
        }
      },
      "71": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "72": {
        start: {
          line: 152,
          column: 36
        },
        end: {
          line: 152,
          column: 88
        }
      },
      "73": {
        start: {
          line: 152,
          column: 65
        },
        end: {
          line: 152,
          column: 87
        }
      },
      "74": {
        start: {
          line: 153,
          column: 34
        },
        end: {
          line: 153,
          column: 115
        }
      },
      "75": {
        start: {
          line: 153,
          column: 63
        },
        end: {
          line: 153,
          column: 86
        }
      },
      "76": {
        start: {
          line: 153,
          column: 98
        },
        end: {
          line: 153,
          column: 114
        }
      },
      "77": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "78": {
        start: {
          line: 155,
          column: 43
        },
        end: {
          line: 164,
          column: 18
        }
      },
      "79": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 168,
          column: 18
        }
      },
      "80": {
        start: {
          line: 167,
          column: 51
        },
        end: {
          line: 167,
          column: 57
        }
      },
      "81": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 52
        }
      },
      "82": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "83": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 69
        }
      },
      "84": {
        start: {
          line: 174,
          column: 61
        },
        end: {
          line: 174,
          column: 67
        }
      },
      "85": {
        start: {
          line: 177,
          column: 31
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "86": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 78
        }
      },
      "87": {
        start: {
          line: 183,
          column: 22
        },
        end: {
          line: 191,
          column: 10
        }
      },
      "88": {
        start: {
          line: 192,
          column: 28
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "89": {
        start: {
          line: 204,
          column: 25
        },
        end: {
          line: 206,
          column: 10
        }
      },
      "90": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 99
        }
      },
      "91": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 221,
          column: 10
        }
      },
      "92": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 54
        }
      },
      "93": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 227,
          column: 10
        }
      },
      "94": {
        start: {
          line: 230,
          column: 22
        },
        end: {
          line: 234,
          column: 1
        }
      },
      "95": {
        start: {
          line: 231,
          column: 4
        },
        end: {
          line: 233,
          column: 7
        }
      },
      "96": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 268,
          column: 1
        }
      },
      "97": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 239,
          column: 5
        }
      },
      "98": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 48
        }
      },
      "99": {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 267,
          column: 5
        }
      },
      "100": {
        start: {
          line: 242,
          column: 24
        },
        end: {
          line: 242,
          column: 63
        }
      },
      "101": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "102": {
        start: {
          line: 245,
          column: 29
        },
        end: {
          line: 247,
          column: 14
        }
      },
      "103": {
        start: {
          line: 249,
          column: 33
        },
        end: {
          line: 249,
          column: 72
        }
      },
      "104": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "105": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 36
        }
      },
      "106": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 103
        }
      },
      "107": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 23
        }
      },
      "108": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "109": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 81
        }
      },
      "110": {
        start: {
          line: 261,
          column: 15
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "111": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 79
        }
      },
      "112": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 70
        }
      },
      "113": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 20
        }
      },
      "114": {
        start: {
          line: 269,
          column: 22
        },
        end: {
          line: 352,
          column: 1
        }
      },
      "115": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "116": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "117": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 24
        }
      },
      "118": {
        start: {
          line: 278,
          column: 32
        },
        end: {
          line: 280,
          column: 6
        }
      },
      "119": {
        start: {
          line: 281,
          column: 4
        },
        end: {
          line: 350,
          column: 5
        }
      },
      "120": {
        start: {
          line: 282,
          column: 34
        },
        end: {
          line: 282,
          column: 84
        }
      },
      "121": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "122": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 82
        }
      },
      "123": {
        start: {
          line: 287,
          column: 21
        },
        end: {
          line: 303,
          column: 65
        }
      },
      "124": {
        start: {
          line: 287,
          column: 54
        },
        end: {
          line: 303,
          column: 14
        }
      },
      "125": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "126": {
        start: {
          line: 306,
          column: 36
        },
        end: {
          line: 306,
          column: 82
        }
      },
      "127": {
        start: {
          line: 306,
          column: 69
        },
        end: {
          line: 306,
          column: 75
        }
      },
      "128": {
        start: {
          line: 307,
          column: 38
        },
        end: {
          line: 307,
          column: 60
        }
      },
      "129": {
        start: {
          line: 309,
          column: 45
        },
        end: {
          line: 309,
          column: 47
        }
      },
      "130": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 337,
          column: 13
        }
      },
      "131": {
        start: {
          line: 311,
          column: 40
        },
        end: {
          line: 311,
          column: 60
        }
      },
      "132": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 336,
          column: 17
        }
      },
      "133": {
        start: {
          line: 314,
          column: 42
        },
        end: {
          line: 314,
          column: 119
        }
      },
      "134": {
        start: {
          line: 314,
          column: 70
        },
        end: {
          line: 314,
          column: 93
        }
      },
      "135": {
        start: {
          line: 314,
          column: 108
        },
        end: {
          line: 314,
          column: 118
        }
      },
      "136": {
        start: {
          line: 315,
          column: 20
        },
        end: {
          line: 332,
          column: 21
        }
      },
      "137": {
        start: {
          line: 316,
          column: 24
        },
        end: {
          line: 331,
          column: 25
        }
      },
      "138": {
        start: {
          line: 317,
          column: 54
        },
        end: {
          line: 326,
          column: 76
        }
      },
      "139": {
        start: {
          line: 317,
          column: 87
        },
        end: {
          line: 326,
          column: 34
        }
      },
      "140": {
        start: {
          line: 327,
          column: 28
        },
        end: {
          line: 327,
          column: 92
        }
      },
      "141": {
        start: {
          line: 327,
          column: 84
        },
        end: {
          line: 327,
          column: 90
        }
      },
      "142": {
        start: {
          line: 329,
          column: 28
        },
        end: {
          line: 329,
          column: 94
        }
      },
      "143": {
        start: {
          line: 330,
          column: 28
        },
        end: {
          line: 330,
          column: 60
        }
      },
      "144": {
        start: {
          line: 335,
          column: 20
        },
        end: {
          line: 335,
          column: 67
        }
      },
      "145": {
        start: {
          line: 339,
          column: 35
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "146": {
        start: {
          line: 343,
          column: 32
        },
        end: {
          line: 343,
          column: 67
        }
      },
      "147": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 118
        }
      },
      "148": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 76
        }
      },
      "149": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 60
        }
      },
      "150": {
        start: {
          line: 351,
          column: 4
        },
        end: {
          line: 351,
          column: 17
        }
      },
      "151": {
        start: {
          line: 353,
          column: 34
        },
        end: {
          line: 456,
          column: 1
        }
      },
      "152": {
        start: {
          line: 354,
          column: 4
        },
        end: {
          line: 354,
          column: 72
        }
      },
      "153": {
        start: {
          line: 355,
          column: 4
        },
        end: {
          line: 355,
          column: 111
        }
      },
      "154": {
        start: {
          line: 356,
          column: 4
        },
        end: {
          line: 360,
          column: 5
        }
      },
      "155": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 85
        }
      },
      "156": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 88
        }
      },
      "157": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 20
        }
      },
      "158": {
        start: {
          line: 361,
          column: 4
        },
        end: {
          line: 365,
          column: 5
        }
      },
      "159": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 67
        }
      },
      "160": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 88
        }
      },
      "161": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 20
        }
      },
      "162": {
        start: {
          line: 366,
          column: 19
        },
        end: {
          line: 366,
          column: 30
        }
      },
      "163": {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 367,
          column: 99
        }
      },
      "164": {
        start: {
          line: 368,
          column: 21
        },
        end: {
          line: 370,
          column: 6
        }
      },
      "165": {
        start: {
          line: 371,
          column: 4
        },
        end: {
          line: 371,
          column: 70
        }
      },
      "166": {
        start: {
          line: 372,
          column: 4
        },
        end: {
          line: 455,
          column: 5
        }
      },
      "167": {
        start: {
          line: 374,
          column: 27
        },
        end: {
          line: 374,
          column: 66
        }
      },
      "168": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 378,
          column: 9
        }
      },
      "169": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 56
        }
      },
      "170": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 30
        }
      },
      "171": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 379,
          column: 56
        }
      },
      "172": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 55
        }
      },
      "173": {
        start: {
          line: 381,
          column: 21
        },
        end: {
          line: 397,
          column: 69
        }
      },
      "174": {
        start: {
          line: 381,
          column: 54
        },
        end: {
          line: 397,
          column: 14
        }
      },
      "175": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 58
        }
      },
      "176": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 402,
          column: 9
        }
      },
      "177": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 60
        }
      },
      "178": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 24
        }
      },
      "179": {
        start: {
          line: 404,
          column: 32
        },
        end: {
          line: 404,
          column: 78
        }
      },
      "180": {
        start: {
          line: 404,
          column: 65
        },
        end: {
          line: 404,
          column: 71
        }
      },
      "181": {
        start: {
          line: 405,
          column: 34
        },
        end: {
          line: 405,
          column: 56
        }
      },
      "182": {
        start: {
          line: 407,
          column: 41
        },
        end: {
          line: 407,
          column: 43
        }
      },
      "183": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "184": {
        start: {
          line: 410,
          column: 36
        },
        end: {
          line: 410,
          column: 56
        }
      },
      "185": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 435,
          column: 13
        }
      },
      "186": {
        start: {
          line: 413,
          column: 38
        },
        end: {
          line: 413,
          column: 115
        }
      },
      "187": {
        start: {
          line: 413,
          column: 66
        },
        end: {
          line: 413,
          column: 89
        }
      },
      "188": {
        start: {
          line: 413,
          column: 104
        },
        end: {
          line: 413,
          column: 114
        }
      },
      "189": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 431,
          column: 17
        }
      },
      "190": {
        start: {
          line: 415,
          column: 20
        },
        end: {
          line: 430,
          column: 21
        }
      },
      "191": {
        start: {
          line: 416,
          column: 50
        },
        end: {
          line: 425,
          column: 72
        }
      },
      "192": {
        start: {
          line: 416,
          column: 83
        },
        end: {
          line: 425,
          column: 30
        }
      },
      "193": {
        start: {
          line: 426,
          column: 24
        },
        end: {
          line: 426,
          column: 88
        }
      },
      "194": {
        start: {
          line: 426,
          column: 80
        },
        end: {
          line: 426,
          column: 86
        }
      },
      "195": {
        start: {
          line: 428,
          column: 24
        },
        end: {
          line: 428,
          column: 90
        }
      },
      "196": {
        start: {
          line: 429,
          column: 24
        },
        end: {
          line: 429,
          column: 56
        }
      },
      "197": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 434,
          column: 63
        }
      },
      "198": {
        start: {
          line: 438,
          column: 31
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "199": {
        start: {
          line: 442,
          column: 28
        },
        end: {
          line: 442,
          column: 63
        }
      },
      "200": {
        start: {
          line: 443,
          column: 36
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "201": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 107
        }
      },
      "202": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 66
        }
      },
      "203": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 35
        }
      },
      "204": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 453,
          column: 73
        }
      },
      "205": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 20
        }
      },
      "206": {
        start: {
          line: 457,
          column: 25
        },
        end: {
          line: 460,
          column: 1
        }
      },
      "207": {
        start: {
          line: 458,
          column: 20
        },
        end: {
          line: 458,
          column: 44
        }
      },
      "208": {
        start: {
          line: 459,
          column: 4
        },
        end: {
          line: 459,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 23
          }
        },
        loc: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 15,
            column: 20
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 18,
            column: 32
          }
        },
        loc: {
          start: {
            line: 18,
            column: 42
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 21,
            column: 23
          }
        },
        loc: {
          start: {
            line: 21,
            column: 33
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 19
          },
          end: {
            line: 24,
            column: 20
          }
        },
        loc: {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 27,
            column: 31
          }
        },
        loc: {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 17
          },
          end: {
            line: 30,
            column: 18
          }
        },
        loc: {
          start: {
            line: 30,
            column: 28
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 39,
            column: 9
          },
          end: {
            line: 39,
            column: 33
          }
        },
        loc: {
          start: {
            line: 39,
            column: 47
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 39
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 43,
            column: 39
          },
          end: {
            line: 43,
            column: 40
          }
        },
        loc: {
          start: {
            line: 43,
            column: 61
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 43
      },
      "10": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 47,
            column: 9
          },
          end: {
            line: 47,
            column: 34
          }
        },
        loc: {
          start: {
            line: 47,
            column: 53
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 47
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 84,
            column: 33
          },
          end: {
            line: 84,
            column: 34
          }
        },
        loc: {
          start: {
            line: 84,
            column: 44
          },
          end: {
            line: 102,
            column: 1
          }
        },
        line: 84
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 103,
            column: 25
          },
          end: {
            line: 103,
            column: 26
          }
        },
        loc: {
          start: {
            line: 103,
            column: 50
          },
          end: {
            line: 229,
            column: 1
          }
        },
        line: 103
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 107,
            column: 50
          },
          end: {
            line: 107,
            column: 51
          }
        },
        loc: {
          start: {
            line: 107,
            column: 54
          },
          end: {
            line: 131,
            column: 14
          }
        },
        line: 107
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 152,
            column: 60
          },
          end: {
            line: 152,
            column: 61
          }
        },
        loc: {
          start: {
            line: 152,
            column: 65
          },
          end: {
            line: 152,
            column: 87
          }
        },
        line: 152
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 153,
            column: 58
          },
          end: {
            line: 153,
            column: 59
          }
        },
        loc: {
          start: {
            line: 153,
            column: 63
          },
          end: {
            line: 153,
            column: 86
          }
        },
        line: 153
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 153,
            column: 92
          },
          end: {
            line: 153,
            column: 93
          }
        },
        loc: {
          start: {
            line: 153,
            column: 98
          },
          end: {
            line: 153,
            column: 114
          }
        },
        line: 153
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 167,
            column: 46
          },
          end: {
            line: 167,
            column: 47
          }
        },
        loc: {
          start: {
            line: 167,
            column: 51
          },
          end: {
            line: 167,
            column: 57
          }
        },
        line: 167
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 174,
            column: 56
          },
          end: {
            line: 174,
            column: 57
          }
        },
        loc: {
          start: {
            line: 174,
            column: 61
          },
          end: {
            line: 174,
            column: 67
          }
        },
        line: 174
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 230,
            column: 22
          },
          end: {
            line: 230,
            column: 23
          }
        },
        loc: {
          start: {
            line: 230,
            column: 33
          },
          end: {
            line: 234,
            column: 1
          }
        },
        line: 230
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 235,
            column: 20
          },
          end: {
            line: 235,
            column: 21
          }
        },
        loc: {
          start: {
            line: 235,
            column: 35
          },
          end: {
            line: 268,
            column: 1
          }
        },
        line: 235
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 269,
            column: 22
          },
          end: {
            line: 269,
            column: 23
          }
        },
        loc: {
          start: {
            line: 269,
            column: 56
          },
          end: {
            line: 352,
            column: 1
          }
        },
        line: 269
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 287,
            column: 50
          },
          end: {
            line: 287,
            column: 51
          }
        },
        loc: {
          start: {
            line: 287,
            column: 54
          },
          end: {
            line: 303,
            column: 14
          }
        },
        line: 287
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 306,
            column: 64
          },
          end: {
            line: 306,
            column: 65
          }
        },
        loc: {
          start: {
            line: 306,
            column: 69
          },
          end: {
            line: 306,
            column: 75
          }
        },
        line: 306
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 314,
            column: 64
          },
          end: {
            line: 314,
            column: 65
          }
        },
        loc: {
          start: {
            line: 314,
            column: 70
          },
          end: {
            line: 314,
            column: 93
          }
        },
        line: 314
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 314,
            column: 102
          },
          end: {
            line: 314,
            column: 103
          }
        },
        loc: {
          start: {
            line: 314,
            column: 108
          },
          end: {
            line: 314,
            column: 118
          }
        },
        line: 314
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 317,
            column: 83
          },
          end: {
            line: 317,
            column: 84
          }
        },
        loc: {
          start: {
            line: 317,
            column: 87
          },
          end: {
            line: 326,
            column: 34
          }
        },
        line: 317
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 327,
            column: 79
          },
          end: {
            line: 327,
            column: 80
          }
        },
        loc: {
          start: {
            line: 327,
            column: 84
          },
          end: {
            line: 327,
            column: 90
          }
        },
        line: 327
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 353,
            column: 34
          },
          end: {
            line: 353,
            column: 35
          }
        },
        loc: {
          start: {
            line: 353,
            column: 51
          },
          end: {
            line: 456,
            column: 1
          }
        },
        line: 353
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 381,
            column: 50
          },
          end: {
            line: 381,
            column: 51
          }
        },
        loc: {
          start: {
            line: 381,
            column: 54
          },
          end: {
            line: 397,
            column: 14
          }
        },
        line: 381
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 404,
            column: 60
          },
          end: {
            line: 404,
            column: 61
          }
        },
        loc: {
          start: {
            line: 404,
            column: 65
          },
          end: {
            line: 404,
            column: 71
          }
        },
        line: 404
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 413,
            column: 60
          },
          end: {
            line: 413,
            column: 61
          }
        },
        loc: {
          start: {
            line: 413,
            column: 66
          },
          end: {
            line: 413,
            column: 89
          }
        },
        line: 413
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 413,
            column: 98
          },
          end: {
            line: 413,
            column: 99
          }
        },
        loc: {
          start: {
            line: 413,
            column: 104
          },
          end: {
            line: 413,
            column: 114
          }
        },
        line: 413
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 416,
            column: 79
          },
          end: {
            line: 416,
            column: 80
          }
        },
        loc: {
          start: {
            line: 416,
            column: 83
          },
          end: {
            line: 425,
            column: 30
          }
        },
        line: 416
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 426,
            column: 75
          },
          end: {
            line: 426,
            column: 76
          }
        },
        loc: {
          start: {
            line: 426,
            column: 80
          },
          end: {
            line: 426,
            column: 86
          }
        },
        line: 426
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 457,
            column: 25
          },
          end: {
            line: 457,
            column: 26
          }
        },
        loc: {
          start: {
            line: 457,
            column: 40
          },
          end: {
            line: 460,
            column: 1
          }
        },
        line: 457
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 15
          },
          end: {
            line: 44,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 44,
            column: 45
          }
        }, {
          start: {
            line: 44,
            column: 48
          },
          end: {
            line: 44,
            column: 65
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 20
          }
        }, {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 27
          }
        }, {
          start: {
            line: 48,
            column: 31
          },
          end: {
            line: 48,
            column: 45
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 51,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 51,
            column: 20
          }
        }, {
          start: {
            line: 51,
            column: 24
          },
          end: {
            line: 51,
            column: 47
          }
        }, {
          start: {
            line: 51,
            column: 51
          },
          end: {
            line: 51,
            column: 76
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "7": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 57,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: 57,
            column: 17
          },
          end: {
            line: 57,
            column: 31
          }
        }],
        line: 57
      },
      "8": {
        loc: {
          start: {
            line: 63,
            column: 32
          },
          end: {
            line: 63,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 32
          },
          end: {
            line: 63,
            column: 53
          }
        }, {
          start: {
            line: 63,
            column: 57
          },
          end: {
            line: 63,
            column: 88
          }
        }],
        line: 63
      },
      "9": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "10": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 29
          }
        }, {
          start: {
            line: 65,
            column: 33
          },
          end: {
            line: 65,
            column: 79
          }
        }],
        line: 65
      },
      "11": {
        loc: {
          start: {
            line: 66,
            column: 23
          },
          end: {
            line: 66,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 66,
            column: 47
          },
          end: {
            line: 66,
            column: 88
          }
        }, {
          start: {
            line: 66,
            column: 91
          },
          end: {
            line: 66,
            column: 95
          }
        }],
        line: 66
      },
      "12": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        }, {
          start: {
            line: 69,
            column: 19
          },
          end: {
            line: 71,
            column: 13
          }
        }],
        line: 67
      },
      "13": {
        loc: {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 20
          }
        }, {
          start: {
            line: 67,
            column: 25
          },
          end: {
            line: 67,
            column: 33
          }
        }, {
          start: {
            line: 67,
            column: 37
          },
          end: {
            line: 67,
            column: 45
          }
        }],
        line: 67
      },
      "14": {
        loc: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "15": {
        loc: {
          start: {
            line: 81,
            column: 19
          },
          end: {
            line: 81,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 19
          },
          end: {
            line: 81,
            column: 41
          }
        }, {
          start: {
            line: 81,
            column: 45
          },
          end: {
            line: 81,
            column: 62
          }
        }],
        line: 81
      },
      "16": {
        loc: {
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 62
          }
        }, {
          start: {
            line: 83,
            column: 66
          },
          end: {
            line: 83,
            column: 71
          }
        }],
        line: 83
      },
      "17": {
        loc: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "18": {
        loc: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "19": {
        loc: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 91,
            column: 23
          }
        }, {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 93,
            column: 28
          }
        }, {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 95,
            column: 33
          }
        }, {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 97,
            column: 38
          }
        }, {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 21
          }
        }],
        line: 89
      },
      "20": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 99,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 99,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "21": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "22": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "23": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "24": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 28
          }
        }, {
          start: {
            line: 151,
            column: 32
          },
          end: {
            line: 151,
            column: 63
          }
        }],
        line: 151
      },
      "25": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: 169,
            column: 19
          },
          end: {
            line: 171,
            column: 13
          }
        }],
        line: 154
      },
      "26": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "27": {
        loc: {
          start: {
            line: 188,
            column: 22
          },
          end: {
            line: 188,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 22
          },
          end: {
            line: 188,
            column: 35
          }
        }, {
          start: {
            line: 188,
            column: 39
          },
          end: {
            line: 188,
            column: 54
          }
        }, {
          start: {
            line: 188,
            column: 58
          },
          end: {
            line: 188,
            column: 62
          }
        }],
        line: 188
      },
      "28": {
        loc: {
          start: {
            line: 198,
            column: 22
          },
          end: {
            line: 198,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 22
          },
          end: {
            line: 198,
            column: 35
          }
        }, {
          start: {
            line: 198,
            column: 39
          },
          end: {
            line: 198,
            column: 54
          }
        }, {
          start: {
            line: 198,
            column: 58
          },
          end: {
            line: 198,
            column: 62
          }
        }],
        line: 198
      },
      "29": {
        loc: {
          start: {
            line: 217,
            column: 26
          },
          end: {
            line: 217,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 26
          },
          end: {
            line: 217,
            column: 39
          }
        }, {
          start: {
            line: 217,
            column: 43
          },
          end: {
            line: 217,
            column: 58
          }
        }, {
          start: {
            line: 217,
            column: 62
          },
          end: {
            line: 217,
            column: 66
          }
        }],
        line: 217
      },
      "30": {
        loc: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "31": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 237,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 237,
            column: 14
          }
        }, {
          start: {
            line: 237,
            column: 18
          },
          end: {
            line: 237,
            column: 37
          }
        }],
        line: 237
      },
      "32": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "33": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "34": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: 261,
            column: 15
          },
          end: {
            line: 265,
            column: 9
          }
        }],
        line: 259
      },
      "35": {
        loc: {
          start: {
            line: 261,
            column: 15
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 15
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: 263,
            column: 15
          },
          end: {
            line: 265,
            column: 9
          }
        }],
        line: 261
      },
      "36": {
        loc: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "37": {
        loc: {
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "38": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "39": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "40": {
        loc: {
          start: {
            line: 306,
            column: 36
          },
          end: {
            line: 306,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 36
          },
          end: {
            line: 306,
            column: 76
          }
        }, {
          start: {
            line: 306,
            column: 80
          },
          end: {
            line: 306,
            column: 82
          }
        }],
        line: 306
      },
      "41": {
        loc: {
          start: {
            line: 307,
            column: 38
          },
          end: {
            line: 307,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 307,
            column: 38
          },
          end: {
            line: 307,
            column: 54
          }
        }, {
          start: {
            line: 307,
            column: 58
          },
          end: {
            line: 307,
            column: 60
          }
        }],
        line: 307
      },
      "42": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 337,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 337,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "43": {
        loc: {
          start: {
            line: 312,
            column: 16
          },
          end: {
            line: 336,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 16
          },
          end: {
            line: 336,
            column: 17
          }
        }, {
          start: {
            line: 333,
            column: 23
          },
          end: {
            line: 336,
            column: 17
          }
        }],
        line: 312
      },
      "44": {
        loc: {
          start: {
            line: 312,
            column: 20
          },
          end: {
            line: 312,
            column: 131
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 20
          },
          end: {
            line: 312,
            column: 55
          }
        }, {
          start: {
            line: 312,
            column: 59
          },
          end: {
            line: 312,
            column: 94
          }
        }, {
          start: {
            line: 312,
            column: 98
          },
          end: {
            line: 312,
            column: 131
          }
        }],
        line: 312
      },
      "45": {
        loc: {
          start: {
            line: 315,
            column: 20
          },
          end: {
            line: 332,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 20
          },
          end: {
            line: 332,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "46": {
        loc: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "47": {
        loc: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 365,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 365,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "48": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "49": {
        loc: {
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "50": {
        loc: {
          start: {
            line: 404,
            column: 32
          },
          end: {
            line: 404,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 32
          },
          end: {
            line: 404,
            column: 72
          }
        }, {
          start: {
            line: 404,
            column: 76
          },
          end: {
            line: 404,
            column: 78
          }
        }],
        line: 404
      },
      "51": {
        loc: {
          start: {
            line: 405,
            column: 34
          },
          end: {
            line: 405,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 34
          },
          end: {
            line: 405,
            column: 50
          }
        }, {
          start: {
            line: 405,
            column: 54
          },
          end: {
            line: 405,
            column: 56
          }
        }],
        line: 405
      },
      "52": {
        loc: {
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 408
      },
      "53": {
        loc: {
          start: {
            line: 408,
            column: 12
          },
          end: {
            line: 408,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 408,
            column: 12
          },
          end: {
            line: 408,
            column: 44
          }
        }, {
          start: {
            line: 408,
            column: 48
          },
          end: {
            line: 408,
            column: 76
          }
        }],
        line: 408
      },
      "54": {
        loc: {
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 435,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 435,
            column: 13
          }
        }, {
          start: {
            line: 432,
            column: 19
          },
          end: {
            line: 435,
            column: 13
          }
        }],
        line: 411
      },
      "55": {
        loc: {
          start: {
            line: 411,
            column: 16
          },
          end: {
            line: 411,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 411,
            column: 16
          },
          end: {
            line: 411,
            column: 51
          }
        }, {
          start: {
            line: 411,
            column: 55
          },
          end: {
            line: 411,
            column: 90
          }
        }, {
          start: {
            line: 411,
            column: 94
          },
          end: {
            line: 411,
            column: 127
          }
        }],
        line: 411
      },
      "56": {
        loc: {
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 431,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 431,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 414
      },
      "57": {
        loc: {
          start: {
            line: 445,
            column: 22
          },
          end: {
            line: 445,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 445,
            column: 22
          },
          end: {
            line: 445,
            column: 37
          }
        }, {
          start: {
            line: 445,
            column: 41
          },
          end: {
            line: 445,
            column: 54
          }
        }, {
          start: {
            line: 445,
            column: 58
          },
          end: {
            line: 445,
            column: 65
          }
        }],
        line: 445
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0],
      "28": [0, 0, 0],
      "29": [0, 0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0, 0],
      "56": [0, 0],
      "57": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/services/authService.ts"],
      sourcesContent: ["import * as bcrypt from 'bcryptjs';\nimport * as jwt from 'jsonwebtoken';\nimport prisma, { safeQuery } from '@/lib/prisma';\nimport { cacheService, CACHE_CONFIG } from '../lib/cache';\nimport { hasPermission as checkPermission } from '../lib/utils/permissions';\n\n// Secret key for JWT - should be moved to environment variables in production\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n// Changed token expiration to 12h (from 24h) for better security\nconst JWT_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '12h';\n\n/**\n * Parses a time string like \"15m\", \"2h\", \"1d\" into seconds.\n * @param timeStr The time string.\n * @returns The number of seconds, or 0 if parsing fails.\n */\nexport const parseTimeStringToSeconds = (timeStr: string): number => {\n    if (!timeStr) return 0;\n    const lastChar = timeStr.slice(-1);\n    const num = parseInt(timeStr.slice(0, -1));\n\n    if (isNaN(num)) return 0;\n\n    switch (lastChar) {\n        case 's': return num;\n        case 'm': return num * 60;\n        case 'h': return num * 60 * 60;\n        case 'd': return num * 60 * 60 * 24;\n        default: // If no unit, assume seconds if it's just a number string\n            if (!isNaN(parseInt(timeStr))) return parseInt(timeStr);\n            return 0;\n    }\n};\n\ninterface TokenPayload {\n    sub: number; // User ID as 'sub' claim\n    username: string;\n    email: string;\n    roleId: number;\n    roleName: string | null;\n    shopId?: number | null;\n    permissions?: string[];\n}\n\n/**\n * Authenticate a user with email and password (optimized with single query)\n */\nexport const authenticateUser = async (email: string, password: string) => {\n    try {\n        console.time('user authentication query');\n        // Optimized single query using the new composite index with retry logic\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: {\n                    email: email,\n                    isActive: true\n                },\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    password: true,\n                    roleId: true,\n                    roleName: true,\n                    shopId: true,\n                    permissions: true,\n                    role: {\n                        include: {\n                            permissions: {\n                                select: { name: true }\n                            }\n                        }\n                    }\n                }\n            }),\n            null,\n            'Failed to find user during authentication'\n        ) as any;\n        console.timeEnd('user authentication query');\n\n        // If user not found\n        if (!user) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Verify password\n        const isPasswordValid = await bcrypt.compare(password, user.password);\n        if (!isPasswordValid) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Get permissions from both the user's direct permissions and their role\n        let directPermissions: string[] = [];\n        let rolePermissions: string[] = [];\n\n        if (user.permissions && Array.isArray(user.permissions)) {\n            const permissionNames = user.permissions.filter((p: string) => isNaN(parseInt(p, 10)));\n            const permissionIds = user.permissions.filter((p: string) => !isNaN(parseInt(p, 10))).map((id: string) => parseInt(id, 10));\n\n            if (permissionIds.length > 0) {\n                const fetchedPermissions = await prisma.permission.findMany({\n                    where: { id: { in: permissionIds } },\n                    select: { name: true }\n                });\n                directPermissions = [...permissionNames, ...fetchedPermissions.map(p => p.name)];\n            } else {\n                directPermissions = permissionNames;\n            }\n        }\n\n        if (user.role?.permissions) {\n            rolePermissions = user.role.permissions.map((p: { name: string }) => p.name);\n        }\n\n        // Merge and deduplicate permissions\n        const allPermissions = Array.from(new Set([...directPermissions, ...rolePermissions]));\n\n        console.log('Final user permissions being returned:', allPermissions);\n        \n        // Generate JWT token\n        const token = generateToken({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.roleName || user.role?.name || null,\n            shopId: user.shopId,\n            permissions: allPermissions,\n        });\n\n        const userSession = {\n            id: user.id,\n            username: user.name,\n            fullName: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.roleName || user.role?.name || null,\n            shopId: user.shopId,\n            permissions: allPermissions,\n            role: user.role\n        };\n\n        // Cache user session for faster subsequent requests\n        const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId: user.id });\n        await cacheService.set(cacheKey, userSession, CACHE_CONFIG.TTL.USER_SESSION);\n\n        return {\n            success: true,\n            token,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.roleName || user.role?.name || null,\n                shopId: user.shopId,\n                permissions: allPermissions,\n            }\n        };\n    } catch (error) {\n        console.error('Authentication error:', error);\n        return {\n            success: false,\n            message: 'Authentication failed'\n        };\n    }\n};\n\n/**\n * Generate a JWT token\n */\nexport const generateToken = (payload: TokenPayload) => {\n    return jwt.sign(payload, JWT_SECRET as string, { expiresIn: JWT_EXPIRES_IN as any });\n};\n\n/**\n * Verify a JWT token with caching\n */\nexport const verifyToken = async (token: string) => {\n    // Validate token input\n    if (!token || token.trim() === '') {\n        throw new Error('jwt must be provided');\n    }\n\n    try {\n        // Verify token first\n        const decoded = jwt.verify(token, JWT_SECRET) as unknown as TokenPayload;\n\n        // Only generate cache key for valid tokens (ensure token is long enough for substring)\n        if (token.length >= 20) {\n            const tokenKey = cacheService.generateKey(CACHE_CONFIG.KEYS.TOKEN_VALIDATION, { token: token.substring(0, 20) });\n            \n            // Check cache first for token validation result\n            const cachedResult = await cacheService.get(tokenKey);\n            if (cachedResult) {\n                return cachedResult as TokenPayload;\n            }\n\n            // Cache the valid token payload (shorter TTL for security)\n            await cacheService.set(tokenKey, decoded, CACHE_CONFIG.TTL.TOKEN_VALIDATION);\n        }\n\n        return decoded;\n    } catch (error) {\n        // Log the error here if desired\n        if (error instanceof jwt.TokenExpiredError) {\n            console.error('Token expired during verification:', error.expiredAt);\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            console.error('Invalid token during verification:', error.message);\n        } else {\n            console.error('Unknown token verification error:', error);\n        }\n        throw error; // Re-throw the error\n    }\n};\n\n/**\n * Check if a token has a specific permission with caching\n */\nexport const hasPermission = async (tokenPayload: TokenPayload, permission: string) => {\n    // Use the imported permission checking utility\n    \n    // Quick check from token payload first\n    if (tokenPayload.permissions) {\n        if (checkPermission(tokenPayload.permissions, permission)) {\n            return true;\n        }\n    }\n\n    // If not in token, check cached user permissions\n    const permissionsCacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_PERMISSIONS, { userId: tokenPayload.sub });\n\n    try {\n        const cachedPermissions = await cacheService.get(permissionsCacheKey);\n        if (cachedPermissions) {\n            return checkPermission(cachedPermissions, permission);\n        }\n\n        // Fallback to database query if not cached\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: { id: String(tokenPayload.sub), isActive: true },\n                include: {\n                    role: {\n                        include: {\n                            permissions: { select: { name: true } }\n                        }\n                    }\n                }\n            }),\n            null,\n            'Failed to find user for permission check'\n        ) as any;\n\n        if (user) {\n            // Combine role permissions and direct user permissions\n            const rolePermissions = user.role?.permissions?.map((p: any) => p.name) || [];\n            const directPermissions = user.permissions || [];\n            \n            // Convert permission IDs to names if needed\n            let convertedDirectPermissions: string[] = [];\n            if (directPermissions.length > 0) {\n                const firstPermission = directPermissions[0];\n                if (typeof firstPermission === 'number' || (typeof firstPermission === 'string' && !isNaN(parseInt(firstPermission)))) {\n                    // Permissions are stored as IDs, need to convert to names\n                    const permissionIds = directPermissions\n                        .map((id: any) => parseInt(id.toString()))\n                        .filter((id: number) => !isNaN(id));\n                    \n                    if (permissionIds.length > 0) {\n                        try {\n                            const permissionRecords = await safeQuery(\n                                () => prisma.permission.findMany({\n                                    where: {\n                                        id: {\n                                            in: permissionIds\n                                        }\n                                    },\n                                    select: { name: true }\n                                }),\n                                [],\n                                'Failed to find permissions by IDs'\n                            );\n                            convertedDirectPermissions = (permissionRecords as any[]).map((p: any) => p.name);\n                        } catch (error) {\n                            console.error('Error converting permission IDs to names:', error);\n                            convertedDirectPermissions = [];\n                        }\n                    }\n                } else {\n                    // Permissions are already stored as names\n                    convertedDirectPermissions = directPermissions;\n                }\n            }\n            \n            // Combine all permissions and remove duplicates\n            const allPermissions = [...rolePermissions, ...convertedDirectPermissions];\n            const permissions = Array.from(new Set(allPermissions));\n            \n            // Cache permissions for future checks\n            await cacheService.set(permissionsCacheKey, permissions, CACHE_CONFIG.TTL.USER_PERMISSIONS);\n            return checkPermission(permissions, permission);\n        }\n    } catch (error) {\n        console.error('Error checking permissions:', error);\n    }\n\n    return false;\n};\n\n/**\n * Get user details from a decoded token payload with caching\n */\nexport const getUserFromDecodedPayload = async (payload: TokenPayload | null) => {\n    console.log('getUserFromDecodedPayload received payload:', payload);\n    process.stderr.write(`DEBUG: getUserFromDecodedPayload called with payload: ${JSON.stringify(payload)}\\n`);\n\n    if (!payload) {\n        console.error('Invalid token payload provided to getUserFromDecodedPayload');\n        process.stderr.write('DEBUG: Invalid payload or missing sub, returning null\\n');\n        return null;\n    }\n\n    if (!payload.sub) {\n        console.error('Token payload missing user ID (sub claim)');\n        process.stderr.write('DEBUG: Invalid payload or missing sub, returning null\\n');\n        return null;\n    }\n\n    const userId = payload.sub;\n    process.stderr.write(`DEBUG: About to call cacheService.generateKey with userId: ${userId}\\n`);\n    const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId });\n    process.stderr.write(`DEBUG: Generated cache key: ${cacheKey}\\n`);\n\n    try {\n        // Try to get user from cache first\n        const cachedUser = await cacheService.get(cacheKey);\n        if (cachedUser) {\n            console.log('User found in cache:', userId);\n            return cachedUser;\n        }\n\n        console.log('Looking up user with ID:', userId);\n        console.time('prisma.user.findFirst for auth'); // Start timer\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: {\n                    id: String(userId),\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: {\n                                select: { name: true }\n                            }\n                        }\n                    }\n                }\n            }),\n            null,\n            'Failed to find user by ID for authentication'\n        ) as any;\n        console.timeEnd('prisma.user.findFirst for auth'); // End timer\n\n        if (!user) {\n            console.error('User not found for ID:', userId);\n            return null;\n        }\n\n        // Combine role permissions and direct user permissions\n        const rolePermissions = user.role?.permissions?.map((p: any) => p.name) || [];\n        const directPermissions = user.permissions || [];\n        \n        // Convert permission IDs to names if needed\n        let convertedDirectPermissions: string[] = [];\n        if (Array.isArray(directPermissions) && directPermissions.length > 0) {\n            // Check if permissions are stored as IDs (numbers) or names (strings)\n            const firstPermission = directPermissions[0];\n            if (typeof firstPermission === 'number' || (typeof firstPermission === 'string' && !isNaN(parseInt(firstPermission)))) {\n                // Permissions are stored as IDs, need to convert to names\n                const permissionIds = directPermissions\n                    .map((id: any) => parseInt(id.toString()))\n                    .filter((id: number) => !isNaN(id));\n                \n                if (permissionIds.length > 0) {\n                    try {\n                        const permissionRecords = await safeQuery(\n                            () => prisma.permission.findMany({\n                                where: {\n                                    id: {\n                                        in: permissionIds\n                                    }\n                                },\n                                select: { name: true }\n                            }),\n                            [],\n                            'Failed to find permissions by IDs'\n                        );\n                        convertedDirectPermissions = (permissionRecords as any[]).map((p: any) => p.name);\n                    } catch (error) {\n                        console.error('Error converting permission IDs to names:', error);\n                        convertedDirectPermissions = [];\n                    }\n                }\n            } else {\n                // Permissions are already stored as names\n                convertedDirectPermissions = directPermissions;\n            }\n        }\n        \n        // Combine all permissions and remove duplicates\n        const allPermissions = [...rolePermissions, ...convertedDirectPermissions];\n        const permissions = Array.from(new Set(allPermissions));\n\n        const userWithPermissions = {\n            ...user,\n            roleName: user.role?.name || user.roleName || 'Admin',\n            permissions: permissions\n        };\n\n        // Cache the user session\n        await cacheService.set(cacheKey, userWithPermissions, CACHE_CONFIG.TTL.USER_SESSION);\n\n        console.log('User found and cached:', user.id, user.name);\n        return userWithPermissions;\n    } catch (error) {\n        console.error('Error getting user from decoded payload:', error);\n        return null;\n    }\n};\n\n/**\n * Get user details from token (Legacy - consider phasing out or refactoring)\n * This function now calls verifyToken and then getUserFromDecodedPayload.\n */\nexport const getUserFromToken = async (token: string) => {\n    const payload = await verifyToken(token);\n    return getUserFromDecodedPayload(payload);\n};"],
      names: ["authenticateUser", "generateToken", "getUserFromDecodedPayload", "getUserFromToken", "hasPermission", "parseTimeStringToSeconds", "verifyToken", "JWT_SECRET", "process", "env", "JWT_EXPIRES_IN", "JWT_ACCESS_TOKEN_EXPIRES_IN", "timeStr", "lastChar", "slice", "num", "parseInt", "isNaN", "email", "password", "console", "time", "user", "safeQuery", "prisma", "findFirst", "where", "isActive", "select", "id", "name", "roleId", "roleName", "shopId", "permissions", "role", "include", "timeEnd", "success", "message", "isPasswordValid", "bcrypt", "compare", "directPermissions", "rolePermissions", "Array", "isArray", "permissionNames", "filter", "p", "permissionIds", "map", "length", "fetchedPermissions", "permission", "findMany", "in", "allPermissions", "from", "Set", "log", "token", "sub", "username", "userSession", "fullName", "cacheKey", "cacheService", "generateKey", "CACHE_CONFIG", "KEYS", "USER_SESSION", "userId", "set", "TTL", "error", "payload", "jwt", "sign", "expiresIn", "trim", "Error", "decoded", "verify", "tokenKey", "TOKEN_VALIDATION", "substring", "cachedResult", "get", "TokenExpiredError", "expiredAt", "JsonWebTokenError", "tokenPayload", "checkPermission", "permissionsCacheKey", "USER_PERMISSIONS", "cachedPermissions", "String", "convertedDirectPermissions", "firstPermission", "toString", "permissionRecords", "stderr", "write", "JSON", "stringify", "cachedUser", "userWithPermissions"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "728c50ccf5f7806aa2ebe1901d9e0ccaec89652e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_y22h5fuwr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_y22h5fuwr();
cov_y22h5fuwr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[0]++;
  cov_y22h5fuwr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_y22h5fuwr().s[3]++;
_export(exports, {
  authenticateUser: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[1]++;
    cov_y22h5fuwr().s[4]++;
    return authenticateUser;
  },
  generateToken: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[2]++;
    cov_y22h5fuwr().s[5]++;
    return generateToken;
  },
  getUserFromDecodedPayload: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[3]++;
    cov_y22h5fuwr().s[6]++;
    return getUserFromDecodedPayload;
  },
  getUserFromToken: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[4]++;
    cov_y22h5fuwr().s[7]++;
    return getUserFromToken;
  },
  hasPermission: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[5]++;
    cov_y22h5fuwr().s[8]++;
    return hasPermission;
  },
  parseTimeStringToSeconds: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[6]++;
    cov_y22h5fuwr().s[9]++;
    return parseTimeStringToSeconds;
  },
  verifyToken: function () {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[7]++;
    cov_y22h5fuwr().s[10]++;
    return verifyToken;
  }
});
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_y22h5fuwr().s[11]++, _interop_require_wildcard(require("bcryptjs")));
const _jsonwebtoken =
/* istanbul ignore next */
(/*#__PURE__*/cov_y22h5fuwr().s[12]++, _interop_require_wildcard(require("jsonwebtoken")));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_y22h5fuwr().s[13]++, _interop_require_wildcard(require("../lib/prisma")));
const _cache =
/* istanbul ignore next */
(cov_y22h5fuwr().s[14]++, require("../lib/cache"));
const _permissions =
/* istanbul ignore next */
(cov_y22h5fuwr().s[15]++, require("../lib/utils/permissions"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[8]++;
  cov_y22h5fuwr().s[16]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[0][0]++;
    cov_y22h5fuwr().s[17]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[18]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[19]++, new WeakMap());
  /* istanbul ignore next */
  cov_y22h5fuwr().s[20]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_y22h5fuwr().f[9]++;
    cov_y22h5fuwr().s[21]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[10]++;
  cov_y22h5fuwr().s[22]++;
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[2][0]++;
    cov_y22h5fuwr().s[23]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[2][1]++;
  }
  cov_y22h5fuwr().s[24]++;
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[4][0]++;
    cov_y22h5fuwr().s[25]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[26]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[27]++;
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[6][0]++;
    cov_y22h5fuwr().s[28]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[29]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[30]++,
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[31]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[33]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[11][1]++, null));
      /* istanbul ignore next */
      cov_y22h5fuwr().s[34]++;
      if (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[12][0]++;
        cov_y22h5fuwr().s[35]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[12][1]++;
        cov_y22h5fuwr().s[36]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_y22h5fuwr().s[37]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_y22h5fuwr().s[38]++;
  if (cache) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[14][0]++;
    cov_y22h5fuwr().s[39]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[14][1]++;
  }
  cov_y22h5fuwr().s[40]++;
  return newObj;
}
// Secret key for JWT - should be moved to environment variables in production
const JWT_SECRET =
/* istanbul ignore next */
(cov_y22h5fuwr().s[41]++,
/* istanbul ignore next */
(cov_y22h5fuwr().b[15][0]++, process.env.JWT_SECRET) ||
/* istanbul ignore next */
(cov_y22h5fuwr().b[15][1]++, "your-secret-key"));
// Changed token expiration to 12h (from 24h) for better security
const JWT_EXPIRES_IN =
/* istanbul ignore next */
(cov_y22h5fuwr().s[42]++,
/* istanbul ignore next */
(cov_y22h5fuwr().b[16][0]++, process.env.JWT_ACCESS_TOKEN_EXPIRES_IN) ||
/* istanbul ignore next */
(cov_y22h5fuwr().b[16][1]++, "12h"));
/* istanbul ignore next */
cov_y22h5fuwr().s[43]++;
const parseTimeStringToSeconds = timeStr => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[11]++;
  cov_y22h5fuwr().s[44]++;
  if (!timeStr) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[17][0]++;
    cov_y22h5fuwr().s[45]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[17][1]++;
  }
  const lastChar =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[46]++, timeStr.slice(-1));
  const num =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[47]++, parseInt(timeStr.slice(0, -1)));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[48]++;
  if (isNaN(num)) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[18][0]++;
    cov_y22h5fuwr().s[49]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[18][1]++;
  }
  cov_y22h5fuwr().s[50]++;
  switch (lastChar) {
    case "s":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[19][0]++;
      cov_y22h5fuwr().s[51]++;
      return num;
    case "m":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[19][1]++;
      cov_y22h5fuwr().s[52]++;
      return num * 60;
    case "h":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[19][2]++;
      cov_y22h5fuwr().s[53]++;
      return num * 60 * 60;
    case "d":
      /* istanbul ignore next */
      cov_y22h5fuwr().b[19][3]++;
      cov_y22h5fuwr().s[54]++;
      return num * 60 * 60 * 24;
    default:
      /* istanbul ignore next */
      cov_y22h5fuwr().b[19][4]++;
      cov_y22h5fuwr().s[55]++;
      if (!isNaN(parseInt(timeStr))) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[20][0]++;
        cov_y22h5fuwr().s[56]++;
        return parseInt(timeStr);
      } else
      /* istanbul ignore next */
      {
        cov_y22h5fuwr().b[20][1]++;
      }
      cov_y22h5fuwr().s[57]++;
      return 0;
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[58]++;
const authenticateUser = async (email, password) => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[12]++;
  cov_y22h5fuwr().s[59]++;
  try {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[60]++;
    console.time("user authentication query");
    // Optimized single query using the new composite index with retry logic
    const user =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[61]++, await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_y22h5fuwr().f[13]++;
      cov_y22h5fuwr().s[62]++;
      return _prisma.default.user.findFirst({
        where: {
          email: email,
          isActive: true
        },
        select: {
          id: true,
          name: true,
          email: true,
          password: true,
          roleId: true,
          roleName: true,
          shopId: true,
          permissions: true,
          role: {
            include: {
              permissions: {
                select: {
                  name: true
                }
              }
            }
          }
        }
      });
    }, null, "Failed to find user during authentication"));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[63]++;
    console.timeEnd("user authentication query");
    // If user not found
    /* istanbul ignore next */
    cov_y22h5fuwr().s[64]++;
    if (!user) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[21][0]++;
      cov_y22h5fuwr().s[65]++;
      return {
        success: false,
        message: "Invalid email or password"
      };
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[21][1]++;
    }
    // Verify password
    const isPasswordValid =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[66]++, await _bcryptjs.compare(password, user.password));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[67]++;
    if (!isPasswordValid) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[22][0]++;
      cov_y22h5fuwr().s[68]++;
      return {
        success: false,
        message: "Invalid email or password"
      };
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[22][1]++;
    }
    // Get permissions from both the user's direct permissions and their role
    let directPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[69]++, []);
    let rolePermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[70]++, []);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[71]++;
    if (
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[24][0]++, user.permissions) &&
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[24][1]++, Array.isArray(user.permissions))) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[23][0]++;
      const permissionNames =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[72]++, user.permissions.filter(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[14]++;
        cov_y22h5fuwr().s[73]++;
        return isNaN(parseInt(p, 10));
      }));
      const permissionIds =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[74]++, user.permissions.filter(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[15]++;
        cov_y22h5fuwr().s[75]++;
        return !isNaN(parseInt(p, 10));
      }).map(id => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[16]++;
        cov_y22h5fuwr().s[76]++;
        return parseInt(id, 10);
      }));
      /* istanbul ignore next */
      cov_y22h5fuwr().s[77]++;
      if (permissionIds.length > 0) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[25][0]++;
        const fetchedPermissions =
        /* istanbul ignore next */
        (cov_y22h5fuwr().s[78]++, await _prisma.default.permission.findMany({
          where: {
            id: {
              in: permissionIds
            }
          },
          select: {
            name: true
          }
        }));
        /* istanbul ignore next */
        cov_y22h5fuwr().s[79]++;
        directPermissions = [...permissionNames, ...fetchedPermissions.map(p => {
          /* istanbul ignore next */
          cov_y22h5fuwr().f[17]++;
          cov_y22h5fuwr().s[80]++;
          return p.name;
        })];
      } else {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[25][1]++;
        cov_y22h5fuwr().s[81]++;
        directPermissions = permissionNames;
      }
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[23][1]++;
    }
    cov_y22h5fuwr().s[82]++;
    if (user.role?.permissions) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[26][0]++;
      cov_y22h5fuwr().s[83]++;
      rolePermissions = user.role.permissions.map(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[18]++;
        cov_y22h5fuwr().s[84]++;
        return p.name;
      });
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[26][1]++;
    }
    // Merge and deduplicate permissions
    const allPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[85]++, Array.from(new Set([...directPermissions, ...rolePermissions])));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[86]++;
    console.log("Final user permissions being returned:", allPermissions);
    // Generate JWT token
    const token =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[87]++, generateToken({
      sub: user.id,
      username: user.name,
      email: user.email,
      roleId: user.roleId,
      roleName:
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[27][0]++, user.roleName) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[27][1]++, user.role?.name) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[27][2]++, null),
      shopId: user.shopId,
      permissions: allPermissions
    }));
    const userSession =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[88]++, {
      id: user.id,
      username: user.name,
      fullName: user.name,
      email: user.email,
      roleId: user.roleId,
      roleName:
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[28][0]++, user.roleName) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[28][1]++, user.role?.name) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[28][2]++, null),
      shopId: user.shopId,
      permissions: allPermissions,
      role: user.role
    });
    // Cache user session for faster subsequent requests
    const cacheKey =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[89]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_SESSION, {
      userId: user.id
    }));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[90]++;
    await _cache.cacheService.set(cacheKey, userSession, _cache.CACHE_CONFIG.TTL.USER_SESSION);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[91]++;
    return {
      success: true,
      token,
      user: {
        id: user.id,
        username: user.name,
        fullName: user.name,
        email: user.email,
        roleId: user.roleId,
        roleName:
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[29][0]++, user.roleName) ||
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[29][1]++, user.role?.name) ||
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[29][2]++, null),
        shopId: user.shopId,
        permissions: allPermissions
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[92]++;
    console.error("Authentication error:", error);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[93]++;
    return {
      success: false,
      message: "Authentication failed"
    };
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[94]++;
const generateToken = payload => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[19]++;
  cov_y22h5fuwr().s[95]++;
  return _jsonwebtoken.sign(payload, JWT_SECRET, {
    expiresIn: JWT_EXPIRES_IN
  });
};
/* istanbul ignore next */
cov_y22h5fuwr().s[96]++;
const verifyToken = async token => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[20]++;
  cov_y22h5fuwr().s[97]++;
  // Validate token input
  if (
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[31][0]++, !token) ||
  /* istanbul ignore next */
  (cov_y22h5fuwr().b[31][1]++, token.trim() === "")) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[30][0]++;
    cov_y22h5fuwr().s[98]++;
    throw new Error("jwt must be provided");
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[30][1]++;
  }
  cov_y22h5fuwr().s[99]++;
  try {
    // Verify token first
    const decoded =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[100]++, _jsonwebtoken.verify(token, JWT_SECRET));
    // Only generate cache key for valid tokens (ensure token is long enough for substring)
    /* istanbul ignore next */
    cov_y22h5fuwr().s[101]++;
    if (token.length >= 20) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[32][0]++;
      const tokenKey =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[102]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.TOKEN_VALIDATION, {
        token: token.substring(0, 20)
      }));
      // Check cache first for token validation result
      const cachedResult =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[103]++, await _cache.cacheService.get(tokenKey));
      /* istanbul ignore next */
      cov_y22h5fuwr().s[104]++;
      if (cachedResult) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[33][0]++;
        cov_y22h5fuwr().s[105]++;
        return cachedResult;
      } else
      /* istanbul ignore next */
      {
        cov_y22h5fuwr().b[33][1]++;
      }
      // Cache the valid token payload (shorter TTL for security)
      cov_y22h5fuwr().s[106]++;
      await _cache.cacheService.set(tokenKey, decoded, _cache.CACHE_CONFIG.TTL.TOKEN_VALIDATION);
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[32][1]++;
    }
    cov_y22h5fuwr().s[107]++;
    return decoded;
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[108]++;
    // Log the error here if desired
    if (error instanceof _jsonwebtoken.TokenExpiredError) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[34][0]++;
      cov_y22h5fuwr().s[109]++;
      console.error("Token expired during verification:", error.expiredAt);
    } else {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[34][1]++;
      cov_y22h5fuwr().s[110]++;
      if (error instanceof _jsonwebtoken.JsonWebTokenError) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[35][0]++;
        cov_y22h5fuwr().s[111]++;
        console.error("Invalid token during verification:", error.message);
      } else {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[35][1]++;
        cov_y22h5fuwr().s[112]++;
        console.error("Unknown token verification error:", error);
      }
    }
    /* istanbul ignore next */
    cov_y22h5fuwr().s[113]++;
    throw error; // Re-throw the error
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[114]++;
const hasPermission = async (tokenPayload, permission) => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[21]++;
  cov_y22h5fuwr().s[115]++;
  // Use the imported permission checking utility
  // Quick check from token payload first
  if (tokenPayload.permissions) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[36][0]++;
    cov_y22h5fuwr().s[116]++;
    if ((0, _permissions.hasPermission)(tokenPayload.permissions, permission)) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[37][0]++;
      cov_y22h5fuwr().s[117]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[37][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[36][1]++;
  }
  // If not in token, check cached user permissions
  const permissionsCacheKey =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[118]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_PERMISSIONS, {
    userId: tokenPayload.sub
  }));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[119]++;
  try {
    const cachedPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[120]++, await _cache.cacheService.get(permissionsCacheKey));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[121]++;
    if (cachedPermissions) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[38][0]++;
      cov_y22h5fuwr().s[122]++;
      return (0, _permissions.hasPermission)(cachedPermissions, permission);
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[38][1]++;
    }
    // Fallback to database query if not cached
    const user =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[123]++, await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_y22h5fuwr().f[22]++;
      cov_y22h5fuwr().s[124]++;
      return _prisma.default.user.findFirst({
        where: {
          id: String(tokenPayload.sub),
          isActive: true
        },
        include: {
          role: {
            include: {
              permissions: {
                select: {
                  name: true
                }
              }
            }
          }
        }
      });
    }, null, "Failed to find user for permission check"));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[125]++;
    if (user) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[39][0]++;
      // Combine role permissions and direct user permissions
      const rolePermissions =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[126]++,
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[40][0]++, user.role?.permissions?.map(p => {
        /* istanbul ignore next */
        cov_y22h5fuwr().f[23]++;
        cov_y22h5fuwr().s[127]++;
        return p.name;
      })) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[40][1]++, []));
      const directPermissions =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[128]++,
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[41][0]++, user.permissions) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[41][1]++, []));
      // Convert permission IDs to names if needed
      let convertedDirectPermissions =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[129]++, []);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[130]++;
      if (directPermissions.length > 0) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[42][0]++;
        const firstPermission =
        /* istanbul ignore next */
        (cov_y22h5fuwr().s[131]++, directPermissions[0]);
        /* istanbul ignore next */
        cov_y22h5fuwr().s[132]++;
        if (
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[44][0]++, typeof firstPermission === "number") ||
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[44][1]++, typeof firstPermission === "string") &&
        /* istanbul ignore next */
        (cov_y22h5fuwr().b[44][2]++, !isNaN(parseInt(firstPermission)))) {
          /* istanbul ignore next */
          cov_y22h5fuwr().b[43][0]++;
          // Permissions are stored as IDs, need to convert to names
          const permissionIds =
          /* istanbul ignore next */
          (cov_y22h5fuwr().s[133]++, directPermissions.map(id => {
            /* istanbul ignore next */
            cov_y22h5fuwr().f[24]++;
            cov_y22h5fuwr().s[134]++;
            return parseInt(id.toString());
          }).filter(id => {
            /* istanbul ignore next */
            cov_y22h5fuwr().f[25]++;
            cov_y22h5fuwr().s[135]++;
            return !isNaN(id);
          }));
          /* istanbul ignore next */
          cov_y22h5fuwr().s[136]++;
          if (permissionIds.length > 0) {
            /* istanbul ignore next */
            cov_y22h5fuwr().b[45][0]++;
            cov_y22h5fuwr().s[137]++;
            try {
              const permissionRecords =
              /* istanbul ignore next */
              (cov_y22h5fuwr().s[138]++, await (0, _prisma.safeQuery)(() => {
                /* istanbul ignore next */
                cov_y22h5fuwr().f[26]++;
                cov_y22h5fuwr().s[139]++;
                return _prisma.default.permission.findMany({
                  where: {
                    id: {
                      in: permissionIds
                    }
                  },
                  select: {
                    name: true
                  }
                });
              }, [], "Failed to find permissions by IDs"));
              /* istanbul ignore next */
              cov_y22h5fuwr().s[140]++;
              convertedDirectPermissions = permissionRecords.map(p => {
                /* istanbul ignore next */
                cov_y22h5fuwr().f[27]++;
                cov_y22h5fuwr().s[141]++;
                return p.name;
              });
            } catch (error) {
              /* istanbul ignore next */
              cov_y22h5fuwr().s[142]++;
              console.error("Error converting permission IDs to names:", error);
              /* istanbul ignore next */
              cov_y22h5fuwr().s[143]++;
              convertedDirectPermissions = [];
            }
          } else
          /* istanbul ignore next */
          {
            cov_y22h5fuwr().b[45][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_y22h5fuwr().b[43][1]++;
          cov_y22h5fuwr().s[144]++;
          // Permissions are already stored as names
          convertedDirectPermissions = directPermissions;
        }
      } else
      /* istanbul ignore next */
      {
        cov_y22h5fuwr().b[42][1]++;
      }
      // Combine all permissions and remove duplicates
      const allPermissions =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[145]++, [...rolePermissions, ...convertedDirectPermissions]);
      const permissions =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[146]++, Array.from(new Set(allPermissions)));
      // Cache permissions for future checks
      /* istanbul ignore next */
      cov_y22h5fuwr().s[147]++;
      await _cache.cacheService.set(permissionsCacheKey, permissions, _cache.CACHE_CONFIG.TTL.USER_PERMISSIONS);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[148]++;
      return (0, _permissions.hasPermission)(permissions, permission);
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[39][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[149]++;
    console.error("Error checking permissions:", error);
  }
  /* istanbul ignore next */
  cov_y22h5fuwr().s[150]++;
  return false;
};
/* istanbul ignore next */
cov_y22h5fuwr().s[151]++;
const getUserFromDecodedPayload = async payload => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[28]++;
  cov_y22h5fuwr().s[152]++;
  console.log("getUserFromDecodedPayload received payload:", payload);
  /* istanbul ignore next */
  cov_y22h5fuwr().s[153]++;
  process.stderr.write(`DEBUG: getUserFromDecodedPayload called with payload: ${JSON.stringify(payload)}\n`);
  /* istanbul ignore next */
  cov_y22h5fuwr().s[154]++;
  if (!payload) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[46][0]++;
    cov_y22h5fuwr().s[155]++;
    console.error("Invalid token payload provided to getUserFromDecodedPayload");
    /* istanbul ignore next */
    cov_y22h5fuwr().s[156]++;
    process.stderr.write("DEBUG: Invalid payload or missing sub, returning null\n");
    /* istanbul ignore next */
    cov_y22h5fuwr().s[157]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[46][1]++;
  }
  cov_y22h5fuwr().s[158]++;
  if (!payload.sub) {
    /* istanbul ignore next */
    cov_y22h5fuwr().b[47][0]++;
    cov_y22h5fuwr().s[159]++;
    console.error("Token payload missing user ID (sub claim)");
    /* istanbul ignore next */
    cov_y22h5fuwr().s[160]++;
    process.stderr.write("DEBUG: Invalid payload or missing sub, returning null\n");
    /* istanbul ignore next */
    cov_y22h5fuwr().s[161]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_y22h5fuwr().b[47][1]++;
  }
  const userId =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[162]++, payload.sub);
  /* istanbul ignore next */
  cov_y22h5fuwr().s[163]++;
  process.stderr.write(`DEBUG: About to call cacheService.generateKey with userId: ${userId}\n`);
  const cacheKey =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[164]++, _cache.cacheService.generateKey(_cache.CACHE_CONFIG.KEYS.USER_SESSION, {
    userId
  }));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[165]++;
  process.stderr.write(`DEBUG: Generated cache key: ${cacheKey}\n`);
  /* istanbul ignore next */
  cov_y22h5fuwr().s[166]++;
  try {
    // Try to get user from cache first
    const cachedUser =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[167]++, await _cache.cacheService.get(cacheKey));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[168]++;
    if (cachedUser) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[48][0]++;
      cov_y22h5fuwr().s[169]++;
      console.log("User found in cache:", userId);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[170]++;
      return cachedUser;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[48][1]++;
    }
    cov_y22h5fuwr().s[171]++;
    console.log("Looking up user with ID:", userId);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[172]++;
    console.time("prisma.user.findFirst for auth"); // Start timer
    const user =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[173]++, await (0, _prisma.safeQuery)(() => {
      /* istanbul ignore next */
      cov_y22h5fuwr().f[29]++;
      cov_y22h5fuwr().s[174]++;
      return _prisma.default.user.findFirst({
        where: {
          id: String(userId),
          isActive: true
        },
        include: {
          role: {
            include: {
              permissions: {
                select: {
                  name: true
                }
              }
            }
          }
        }
      });
    }, null, "Failed to find user by ID for authentication"));
    /* istanbul ignore next */
    cov_y22h5fuwr().s[175]++;
    console.timeEnd("prisma.user.findFirst for auth"); // End timer
    /* istanbul ignore next */
    cov_y22h5fuwr().s[176]++;
    if (!user) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[49][0]++;
      cov_y22h5fuwr().s[177]++;
      console.error("User not found for ID:", userId);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[178]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[49][1]++;
    }
    // Combine role permissions and direct user permissions
    const rolePermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[179]++,
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[50][0]++, user.role?.permissions?.map(p => {
      /* istanbul ignore next */
      cov_y22h5fuwr().f[30]++;
      cov_y22h5fuwr().s[180]++;
      return p.name;
    })) ||
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[50][1]++, []));
    const directPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[181]++,
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[51][0]++, user.permissions) ||
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[51][1]++, []));
    // Convert permission IDs to names if needed
    let convertedDirectPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[182]++, []);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[183]++;
    if (
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[53][0]++, Array.isArray(directPermissions)) &&
    /* istanbul ignore next */
    (cov_y22h5fuwr().b[53][1]++, directPermissions.length > 0)) {
      /* istanbul ignore next */
      cov_y22h5fuwr().b[52][0]++;
      // Check if permissions are stored as IDs (numbers) or names (strings)
      const firstPermission =
      /* istanbul ignore next */
      (cov_y22h5fuwr().s[184]++, directPermissions[0]);
      /* istanbul ignore next */
      cov_y22h5fuwr().s[185]++;
      if (
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[55][0]++, typeof firstPermission === "number") ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[55][1]++, typeof firstPermission === "string") &&
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[55][2]++, !isNaN(parseInt(firstPermission)))) {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[54][0]++;
        // Permissions are stored as IDs, need to convert to names
        const permissionIds =
        /* istanbul ignore next */
        (cov_y22h5fuwr().s[186]++, directPermissions.map(id => {
          /* istanbul ignore next */
          cov_y22h5fuwr().f[31]++;
          cov_y22h5fuwr().s[187]++;
          return parseInt(id.toString());
        }).filter(id => {
          /* istanbul ignore next */
          cov_y22h5fuwr().f[32]++;
          cov_y22h5fuwr().s[188]++;
          return !isNaN(id);
        }));
        /* istanbul ignore next */
        cov_y22h5fuwr().s[189]++;
        if (permissionIds.length > 0) {
          /* istanbul ignore next */
          cov_y22h5fuwr().b[56][0]++;
          cov_y22h5fuwr().s[190]++;
          try {
            const permissionRecords =
            /* istanbul ignore next */
            (cov_y22h5fuwr().s[191]++, await (0, _prisma.safeQuery)(() => {
              /* istanbul ignore next */
              cov_y22h5fuwr().f[33]++;
              cov_y22h5fuwr().s[192]++;
              return _prisma.default.permission.findMany({
                where: {
                  id: {
                    in: permissionIds
                  }
                },
                select: {
                  name: true
                }
              });
            }, [], "Failed to find permissions by IDs"));
            /* istanbul ignore next */
            cov_y22h5fuwr().s[193]++;
            convertedDirectPermissions = permissionRecords.map(p => {
              /* istanbul ignore next */
              cov_y22h5fuwr().f[34]++;
              cov_y22h5fuwr().s[194]++;
              return p.name;
            });
          } catch (error) {
            /* istanbul ignore next */
            cov_y22h5fuwr().s[195]++;
            console.error("Error converting permission IDs to names:", error);
            /* istanbul ignore next */
            cov_y22h5fuwr().s[196]++;
            convertedDirectPermissions = [];
          }
        } else
        /* istanbul ignore next */
        {
          cov_y22h5fuwr().b[56][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_y22h5fuwr().b[54][1]++;
        cov_y22h5fuwr().s[197]++;
        // Permissions are already stored as names
        convertedDirectPermissions = directPermissions;
      }
    } else
    /* istanbul ignore next */
    {
      cov_y22h5fuwr().b[52][1]++;
    }
    // Combine all permissions and remove duplicates
    const allPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[198]++, [...rolePermissions, ...convertedDirectPermissions]);
    const permissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[199]++, Array.from(new Set(allPermissions)));
    const userWithPermissions =
    /* istanbul ignore next */
    (cov_y22h5fuwr().s[200]++, {
      ...user,
      roleName:
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[57][0]++, user.role?.name) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[57][1]++, user.roleName) ||
      /* istanbul ignore next */
      (cov_y22h5fuwr().b[57][2]++, "Admin"),
      permissions: permissions
    });
    // Cache the user session
    /* istanbul ignore next */
    cov_y22h5fuwr().s[201]++;
    await _cache.cacheService.set(cacheKey, userWithPermissions, _cache.CACHE_CONFIG.TTL.USER_SESSION);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[202]++;
    console.log("User found and cached:", user.id, user.name);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[203]++;
    return userWithPermissions;
  } catch (error) {
    /* istanbul ignore next */
    cov_y22h5fuwr().s[204]++;
    console.error("Error getting user from decoded payload:", error);
    /* istanbul ignore next */
    cov_y22h5fuwr().s[205]++;
    return null;
  }
};
/* istanbul ignore next */
cov_y22h5fuwr().s[206]++;
const getUserFromToken = async token => {
  /* istanbul ignore next */
  cov_y22h5fuwr().f[35]++;
  const payload =
  /* istanbul ignore next */
  (cov_y22h5fuwr().s[207]++, await verifyToken(token));
  /* istanbul ignore next */
  cov_y22h5fuwr().s[208]++;
  return getUserFromDecodedPayload(payload);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,