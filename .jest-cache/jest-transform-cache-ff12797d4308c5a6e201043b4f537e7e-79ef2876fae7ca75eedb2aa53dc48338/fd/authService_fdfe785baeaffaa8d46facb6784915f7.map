{"version":3,"names":["authenticateUser","cov_y22h5fuwr","f","s","generateToken","getUserFromDecodedPayload","getUserFromToken","hasPermission","parseTimeStringToSeconds","verifyToken","JWT_SECRET","b","process","env","JWT_EXPIRES_IN","JWT_ACCESS_TOKEN_EXPIRES_IN","timeStr","lastChar","slice","num","parseInt","isNaN","email","password","console","time","user","_prisma","safeQuery","default","findFirst","where","isActive","select","id","name","roleId","roleName","shopId","permissions","role","include","timeEnd","success","message","isPasswordValid","_bcryptjs","compare","directPermissions","rolePermissions","Array","isArray","permissionNames","filter","p","permissionIds","map","length","fetchedPermissions","permission","findMany","in","allPermissions","from","Set","log","token","sub","username","userSession","fullName","cacheKey","_cache","cacheService","generateKey","CACHE_CONFIG","KEYS","USER_SESSION","userId","set","TTL","error","payload","_jsonwebtoken","sign","expiresIn","trim","Error","decoded","verify","tokenKey","TOKEN_VALIDATION","substring","cachedResult","get","TokenExpiredError","expiredAt","JsonWebTokenError","tokenPayload","_permissions","permissionsCacheKey","USER_PERMISSIONS","cachedPermissions","String","convertedDirectPermissions","firstPermission","toString","permissionRecords","stderr","write","JSON","stringify","cachedUser","userWithPermissions"],"sources":["/Users/sachin/Documents/md-sports-/src/services/authService.ts"],"sourcesContent":["import * as bcrypt from 'bcryptjs';\nimport * as jwt from 'jsonwebtoken';\nimport prisma, { safeQuery } from '@/lib/prisma';\nimport { cacheService, CACHE_CONFIG } from '../lib/cache';\nimport { hasPermission as checkPermission } from '../lib/utils/permissions';\n\n// Secret key for JWT - should be moved to environment variables in production\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n// Changed token expiration to 12h (from 24h) for better security\nconst JWT_EXPIRES_IN = process.env.JWT_ACCESS_TOKEN_EXPIRES_IN || '12h';\n\n/**\n * Parses a time string like \"15m\", \"2h\", \"1d\" into seconds.\n * @param timeStr The time string.\n * @returns The number of seconds, or 0 if parsing fails.\n */\nexport const parseTimeStringToSeconds = (timeStr: string): number => {\n    if (!timeStr) return 0;\n    const lastChar = timeStr.slice(-1);\n    const num = parseInt(timeStr.slice(0, -1));\n\n    if (isNaN(num)) return 0;\n\n    switch (lastChar) {\n        case 's': return num;\n        case 'm': return num * 60;\n        case 'h': return num * 60 * 60;\n        case 'd': return num * 60 * 60 * 24;\n        default: // If no unit, assume seconds if it's just a number string\n            if (!isNaN(parseInt(timeStr))) return parseInt(timeStr);\n            return 0;\n    }\n};\n\ninterface TokenPayload {\n    sub: number; // User ID as 'sub' claim\n    username: string;\n    email: string;\n    roleId: number;\n    roleName: string | null;\n    shopId?: number | null;\n    permissions?: string[];\n}\n\n/**\n * Authenticate a user with email and password (optimized with single query)\n */\nexport const authenticateUser = async (email: string, password: string) => {\n    try {\n        console.time('user authentication query');\n        // Optimized single query using the new composite index with retry logic\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: {\n                    email: email,\n                    isActive: true\n                },\n                select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    password: true,\n                    roleId: true,\n                    roleName: true,\n                    shopId: true,\n                    permissions: true,\n                    role: {\n                        include: {\n                            permissions: {\n                                select: { name: true }\n                            }\n                        }\n                    }\n                }\n            }),\n            null,\n            'Failed to find user during authentication'\n        ) as any;\n        console.timeEnd('user authentication query');\n\n        // If user not found\n        if (!user) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Verify password\n        const isPasswordValid = await bcrypt.compare(password, user.password);\n        if (!isPasswordValid) {\n            return {\n                success: false,\n                message: 'Invalid email or password'\n            };\n        }\n\n        // Get permissions from both the user's direct permissions and their role\n        let directPermissions: string[] = [];\n        let rolePermissions: string[] = [];\n\n        if (user.permissions && Array.isArray(user.permissions)) {\n            const permissionNames = user.permissions.filter((p: string) => isNaN(parseInt(p, 10)));\n            const permissionIds = user.permissions.filter((p: string) => !isNaN(parseInt(p, 10))).map((id: string) => parseInt(id, 10));\n\n            if (permissionIds.length > 0) {\n                const fetchedPermissions = await prisma.permission.findMany({\n                    where: { id: { in: permissionIds } },\n                    select: { name: true }\n                });\n                directPermissions = [...permissionNames, ...fetchedPermissions.map(p => p.name)];\n            } else {\n                directPermissions = permissionNames;\n            }\n        }\n\n        if (user.role?.permissions) {\n            rolePermissions = user.role.permissions.map((p: { name: string }) => p.name);\n        }\n\n        // Merge and deduplicate permissions\n        const allPermissions = Array.from(new Set([...directPermissions, ...rolePermissions]));\n\n        console.log('Final user permissions being returned:', allPermissions);\n        \n        // Generate JWT token\n        const token = generateToken({\n            sub: user.id,\n            username: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.roleName || user.role?.name || null,\n            shopId: user.shopId,\n            permissions: allPermissions,\n        });\n\n        const userSession = {\n            id: user.id,\n            username: user.name,\n            fullName: user.name,\n            email: user.email,\n            roleId: user.roleId,\n            roleName: user.roleName || user.role?.name || null,\n            shopId: user.shopId,\n            permissions: allPermissions,\n            role: user.role\n        };\n\n        // Cache user session for faster subsequent requests\n        const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId: user.id });\n        await cacheService.set(cacheKey, userSession, CACHE_CONFIG.TTL.USER_SESSION);\n\n        return {\n            success: true,\n            token,\n            user: {\n                id: user.id,\n                username: user.name,\n                fullName: user.name,\n                email: user.email,\n                roleId: user.roleId,\n                roleName: user.roleName || user.role?.name || null,\n                shopId: user.shopId,\n                permissions: allPermissions,\n            }\n        };\n    } catch (error) {\n        console.error('Authentication error:', error);\n        return {\n            success: false,\n            message: 'Authentication failed'\n        };\n    }\n};\n\n/**\n * Generate a JWT token\n */\nexport const generateToken = (payload: TokenPayload) => {\n    return jwt.sign(payload, JWT_SECRET as string, { expiresIn: JWT_EXPIRES_IN as any });\n};\n\n/**\n * Verify a JWT token with caching\n */\nexport const verifyToken = async (token: string) => {\n    // Validate token input\n    if (!token || token.trim() === '') {\n        throw new Error('jwt must be provided');\n    }\n\n    try {\n        // Verify token first\n        const decoded = jwt.verify(token, JWT_SECRET) as unknown as TokenPayload;\n\n        // Only generate cache key for valid tokens (ensure token is long enough for substring)\n        if (token.length >= 20) {\n            const tokenKey = cacheService.generateKey(CACHE_CONFIG.KEYS.TOKEN_VALIDATION, { token: token.substring(0, 20) });\n            \n            // Check cache first for token validation result\n            const cachedResult = await cacheService.get(tokenKey);\n            if (cachedResult) {\n                return cachedResult as TokenPayload;\n            }\n\n            // Cache the valid token payload (shorter TTL for security)\n            await cacheService.set(tokenKey, decoded, CACHE_CONFIG.TTL.TOKEN_VALIDATION);\n        }\n\n        return decoded;\n    } catch (error) {\n        // Log the error here if desired\n        if (error instanceof jwt.TokenExpiredError) {\n            console.error('Token expired during verification:', error.expiredAt);\n        } else if (error instanceof jwt.JsonWebTokenError) {\n            console.error('Invalid token during verification:', error.message);\n        } else {\n            console.error('Unknown token verification error:', error);\n        }\n        throw error; // Re-throw the error\n    }\n};\n\n/**\n * Check if a token has a specific permission with caching\n */\nexport const hasPermission = async (tokenPayload: TokenPayload, permission: string) => {\n    // Use the imported permission checking utility\n    \n    // Quick check from token payload first\n    if (tokenPayload.permissions) {\n        if (checkPermission(tokenPayload.permissions, permission)) {\n            return true;\n        }\n    }\n\n    // If not in token, check cached user permissions\n    const permissionsCacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_PERMISSIONS, { userId: tokenPayload.sub });\n\n    try {\n        const cachedPermissions = await cacheService.get(permissionsCacheKey);\n        if (cachedPermissions) {\n            return checkPermission(cachedPermissions, permission);\n        }\n\n        // Fallback to database query if not cached\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: { id: String(tokenPayload.sub), isActive: true },\n                include: {\n                    role: {\n                        include: {\n                            permissions: { select: { name: true } }\n                        }\n                    }\n                }\n            }),\n            null,\n            'Failed to find user for permission check'\n        ) as any;\n\n        if (user) {\n            // Combine role permissions and direct user permissions\n            const rolePermissions = user.role?.permissions?.map((p: any) => p.name) || [];\n            const directPermissions = user.permissions || [];\n            \n            // Convert permission IDs to names if needed\n            let convertedDirectPermissions: string[] = [];\n            if (directPermissions.length > 0) {\n                const firstPermission = directPermissions[0];\n                if (typeof firstPermission === 'number' || (typeof firstPermission === 'string' && !isNaN(parseInt(firstPermission)))) {\n                    // Permissions are stored as IDs, need to convert to names\n                    const permissionIds = directPermissions\n                        .map((id: any) => parseInt(id.toString()))\n                        .filter((id: number) => !isNaN(id));\n                    \n                    if (permissionIds.length > 0) {\n                        try {\n                            const permissionRecords = await safeQuery(\n                                () => prisma.permission.findMany({\n                                    where: {\n                                        id: {\n                                            in: permissionIds\n                                        }\n                                    },\n                                    select: { name: true }\n                                }),\n                                [],\n                                'Failed to find permissions by IDs'\n                            );\n                            convertedDirectPermissions = (permissionRecords as any[]).map((p: any) => p.name);\n                        } catch (error) {\n                            console.error('Error converting permission IDs to names:', error);\n                            convertedDirectPermissions = [];\n                        }\n                    }\n                } else {\n                    // Permissions are already stored as names\n                    convertedDirectPermissions = directPermissions;\n                }\n            }\n            \n            // Combine all permissions and remove duplicates\n            const allPermissions = [...rolePermissions, ...convertedDirectPermissions];\n            const permissions = Array.from(new Set(allPermissions));\n            \n            // Cache permissions for future checks\n            await cacheService.set(permissionsCacheKey, permissions, CACHE_CONFIG.TTL.USER_PERMISSIONS);\n            return checkPermission(permissions, permission);\n        }\n    } catch (error) {\n        console.error('Error checking permissions:', error);\n    }\n\n    return false;\n};\n\n/**\n * Get user details from a decoded token payload with caching\n */\nexport const getUserFromDecodedPayload = async (payload: TokenPayload | null) => {\n    console.log('getUserFromDecodedPayload received payload:', payload);\n    process.stderr.write(`DEBUG: getUserFromDecodedPayload called with payload: ${JSON.stringify(payload)}\\n`);\n\n    if (!payload) {\n        console.error('Invalid token payload provided to getUserFromDecodedPayload');\n        process.stderr.write('DEBUG: Invalid payload or missing sub, returning null\\n');\n        return null;\n    }\n\n    if (!payload.sub) {\n        console.error('Token payload missing user ID (sub claim)');\n        process.stderr.write('DEBUG: Invalid payload or missing sub, returning null\\n');\n        return null;\n    }\n\n    const userId = payload.sub;\n    process.stderr.write(`DEBUG: About to call cacheService.generateKey with userId: ${userId}\\n`);\n    const cacheKey = cacheService.generateKey(CACHE_CONFIG.KEYS.USER_SESSION, { userId });\n    process.stderr.write(`DEBUG: Generated cache key: ${cacheKey}\\n`);\n\n    try {\n        // Try to get user from cache first\n        const cachedUser = await cacheService.get(cacheKey);\n        if (cachedUser) {\n            console.log('User found in cache:', userId);\n            return cachedUser;\n        }\n\n        console.log('Looking up user with ID:', userId);\n        console.time('prisma.user.findFirst for auth'); // Start timer\n        const user = await safeQuery(\n            () => prisma.user.findFirst({\n                where: {\n                    id: String(userId),\n                    isActive: true\n                },\n                include: {\n                    role: {\n                        include: {\n                            permissions: {\n                                select: { name: true }\n                            }\n                        }\n                    }\n                }\n            }),\n            null,\n            'Failed to find user by ID for authentication'\n        ) as any;\n        console.timeEnd('prisma.user.findFirst for auth'); // End timer\n\n        if (!user) {\n            console.error('User not found for ID:', userId);\n            return null;\n        }\n\n        // Combine role permissions and direct user permissions\n        const rolePermissions = user.role?.permissions?.map((p: any) => p.name) || [];\n        const directPermissions = user.permissions || [];\n        \n        // Convert permission IDs to names if needed\n        let convertedDirectPermissions: string[] = [];\n        if (Array.isArray(directPermissions) && directPermissions.length > 0) {\n            // Check if permissions are stored as IDs (numbers) or names (strings)\n            const firstPermission = directPermissions[0];\n            if (typeof firstPermission === 'number' || (typeof firstPermission === 'string' && !isNaN(parseInt(firstPermission)))) {\n                // Permissions are stored as IDs, need to convert to names\n                const permissionIds = directPermissions\n                    .map((id: any) => parseInt(id.toString()))\n                    .filter((id: number) => !isNaN(id));\n                \n                if (permissionIds.length > 0) {\n                    try {\n                        const permissionRecords = await safeQuery(\n                            () => prisma.permission.findMany({\n                                where: {\n                                    id: {\n                                        in: permissionIds\n                                    }\n                                },\n                                select: { name: true }\n                            }),\n                            [],\n                            'Failed to find permissions by IDs'\n                        );\n                        convertedDirectPermissions = (permissionRecords as any[]).map((p: any) => p.name);\n                    } catch (error) {\n                        console.error('Error converting permission IDs to names:', error);\n                        convertedDirectPermissions = [];\n                    }\n                }\n            } else {\n                // Permissions are already stored as names\n                convertedDirectPermissions = directPermissions;\n            }\n        }\n        \n        // Combine all permissions and remove duplicates\n        const allPermissions = [...rolePermissions, ...convertedDirectPermissions];\n        const permissions = Array.from(new Set(allPermissions));\n\n        const userWithPermissions = {\n            ...user,\n            roleName: user.role?.name || user.roleName || 'Admin',\n            permissions: permissions\n        };\n\n        // Cache the user session\n        await cacheService.set(cacheKey, userWithPermissions, CACHE_CONFIG.TTL.USER_SESSION);\n\n        console.log('User found and cached:', user.id, user.name);\n        return userWithPermissions;\n    } catch (error) {\n        console.error('Error getting user from decoded payload:', error);\n        return null;\n    }\n};\n\n/**\n * Get user details from token (Legacy - consider phasing out or refactoring)\n * This function now calls verifyToken and then getUserFromDecodedPayload.\n */\nexport const getUserFromToken = async (token: string) => {\n    const payload = await verifyToken(token);\n    return getUserFromDecodedPayload(payload);\n};"],"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","ignoreList":[]}