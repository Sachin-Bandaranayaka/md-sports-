{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/userCreation.test.tsx"],"sourcesContent":["import { jest } from '@jest/globals';\nimport '@testing-library/jest-dom';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { createMocks } from 'node-mocks-http';\n// Removed bcrypt and crypto imports since we're focusing on form logic only\n\n// Mock dependencies\nconst mockPrisma = {\n  user: {\n    create: jest.fn(),\n    findUnique: jest.fn(),\n  },\n  shop: {\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n  },\n  permission: {\n    upsert: jest.fn(),\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n  },\n  role: {\n    upsert: jest.fn(),\n  },\n};\n\nconst mockRouter = {\n  push: jest.fn(),\n  replace: jest.fn(),\n  back: jest.fn(),\n};\n\nconst mockUseAuth = {\n  user: {\n    id: 1,\n    name: 'Admin User',\n    email: 'admin@test.com',\n    permissions: ['user:manage', 'admin:all'],\n  },\n  isAuthenticated: true,\n  hasPermission: jest.fn().mockReturnValue(true),\n};\n\n// Mock modules\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\njest.mock('next/navigation', () => ({\n  useRouter: () => mockRouter,\n  useParams: () => ({ id: '1' }),\n}));\n\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => mockUseAuth,\n}));\n\n// Removed bcrypt and crypto mocks since we're focusing on form logic only\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Mock component for testing form logic\nconst MockUserCreationForm = ({ onSubmit }: { onSubmit: (data: any) => void }) => {\n  const [formData, setFormData] = React.useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    shop: '',\n    permissions: [] as string[],\n    allowedAccounts: [] as string[],\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handlePermissionChange = (permissionId: string) => {\n    setFormData(prev => ({\n      ...prev,\n      permissions: prev.permissions.includes(permissionId)\n        ? prev.permissions.filter(id => id !== permissionId)\n        : [...prev.permissions, permissionId]\n    }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} data-testid=\"user-creation-form\">\n      <input\n        data-testid=\"name-input\"\n        name=\"name\"\n        value={formData.name}\n        onChange={handleChange}\n        placeholder=\"Full Name\"\n      />\n      <input\n        data-testid=\"email-input\"\n        name=\"email\"\n        type=\"email\"\n        value={formData.email}\n        onChange={handleChange}\n        placeholder=\"Email\"\n      />\n      <input\n        data-testid=\"password-input\"\n        name=\"password\"\n        type=\"password\"\n        value={formData.password}\n        onChange={handleChange}\n        placeholder=\"Password\"\n      />\n      <input\n        data-testid=\"confirm-password-input\"\n        name=\"confirmPassword\"\n        type=\"password\"\n        value={formData.confirmPassword}\n        onChange={handleChange}\n        placeholder=\"Confirm Password\"\n      />\n      <select\n        data-testid=\"shop-select\"\n        name=\"shop\"\n        value={formData.shop}\n        onChange={handleChange}\n      >\n        <option value=\"\">Select Shop</option>\n        <option value=\"shop-1\">Main Store</option>\n        <option value=\"shop-2\">Warehouse</option>\n      </select>\n      <div data-testid=\"permissions-section\">\n        <label>\n          <input\n            type=\"checkbox\"\n            data-testid=\"permission-admin-all\"\n            onChange={() => handlePermissionChange('admin:all')}\n          />\n          Admin All\n        </label>\n        <label>\n          <input\n            type=\"checkbox\"\n            data-testid=\"permission-shop-staff\"\n            onChange={() => handlePermissionChange('shop:assigned_only')}\n          />\n          Shop Staff\n        </label>\n      </div>\n      <button type=\"submit\" data-testid=\"submit-button\">\n        Create User\n      </button>\n    </form>\n  );\n};\n\ndescribe('User Creation Process', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (global.fetch as jest.Mock).mockClear();\n  });\n\n  describe('User Creation Form', () => {\n    test('should render all form fields correctly', () => {\n      const mockOnSubmit = jest.fn();\n      render(<MockUserCreationForm onSubmit={mockOnSubmit} />);\n\n      expect(screen.getByTestId('user-creation-form')).toBeInTheDocument();\n      expect(screen.getByTestId('name-input')).toBeInTheDocument();\n      expect(screen.getByTestId('email-input')).toBeInTheDocument();\n      expect(screen.getByTestId('password-input')).toBeInTheDocument();\n      expect(screen.getByTestId('confirm-password-input')).toBeInTheDocument();\n      expect(screen.getByTestId('shop-select')).toBeInTheDocument();\n      expect(screen.getByTestId('permissions-section')).toBeInTheDocument();\n      expect(screen.getByTestId('submit-button')).toBeInTheDocument();\n    });\n\n    test('should handle form input changes', async () => {\n      const mockOnSubmit = jest.fn();\n      const user = userEvent.setup();\n      render(<MockUserCreationForm onSubmit={mockOnSubmit} />);\n\n      await user.type(screen.getByTestId('name-input'), 'John Doe');\n      await user.type(screen.getByTestId('email-input'), 'john@example.com');\n      await user.type(screen.getByTestId('password-input'), 'password123');\n      await user.type(screen.getByTestId('confirm-password-input'), 'password123');\n      await user.selectOptions(screen.getByTestId('shop-select'), 'shop-1');\n\n      expect(screen.getByTestId('name-input')).toHaveValue('John Doe');\n      expect(screen.getByTestId('email-input')).toHaveValue('john@example.com');\n      expect(screen.getByTestId('password-input')).toHaveValue('password123');\n      expect(screen.getByTestId('confirm-password-input')).toHaveValue('password123');\n      expect(screen.getByTestId('shop-select')).toHaveValue('shop-1');\n    });\n\n    test('should handle permission selection', async () => {\n      const mockOnSubmit = jest.fn();\n      const user = userEvent.setup();\n      render(<MockUserCreationForm onSubmit={mockOnSubmit} />);\n\n      await user.click(screen.getByTestId('permission-admin-all'));\n      await user.click(screen.getByTestId('permission-shop-staff'));\n\n      expect(screen.getByTestId('permission-admin-all')).toBeChecked();\n      expect(screen.getByTestId('permission-shop-staff')).toBeChecked();\n    });\n\n    test('should submit form with correct data', async () => {\n      const mockOnSubmit = jest.fn();\n      const user = userEvent.setup();\n      render(<MockUserCreationForm onSubmit={mockOnSubmit} />);\n\n      await user.type(screen.getByTestId('name-input'), 'John Doe');\n      await user.type(screen.getByTestId('email-input'), 'john@example.com');\n      await user.type(screen.getByTestId('password-input'), 'password123');\n      await user.type(screen.getByTestId('confirm-password-input'), 'password123');\n      await user.selectOptions(screen.getByTestId('shop-select'), 'shop-1');\n      await user.click(screen.getByTestId('permission-admin-all'));\n      await user.click(screen.getByTestId('submit-button'));\n\n      expect(mockOnSubmit).toHaveBeenCalledWith({\n        name: 'John Doe',\n        email: 'john@example.com',\n        password: 'password123',\n        confirmPassword: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n        allowedAccounts: [],\n      });\n    });\n  });\n\n  describe('Form Validation Logic', () => {\n    test('should validate required fields', () => {\n      const validateUserData = (data: any) => {\n        const errors: string[] = [];\n        \n        if (!data.name) errors.push('Name is required');\n        if (!data.email) errors.push('Email is required');\n        if (!data.password) errors.push('Password is required');\n        if (!data.shop) errors.push('Shop assignment is required');\n        if (!data.permissions || data.permissions.length === 0) {\n          errors.push('At least one permission is required');\n        }\n        \n        return errors;\n      };\n\n      const invalidData = {\n        name: '',\n        email: '',\n        password: '',\n        shop: '',\n        permissions: [],\n      };\n\n      const errors = validateUserData(invalidData);\n      expect(errors).toContain('Name is required');\n      expect(errors).toContain('Email is required');\n      expect(errors).toContain('Password is required');\n      expect(errors).toContain('Shop assignment is required');\n      expect(errors).toContain('At least one permission is required');\n    });\n\n    test('should validate password requirements', () => {\n      const validatePassword = (password: string) => {\n        const errors: string[] = [];\n        \n        if (password.length < 8) {\n          errors.push('Password must be at least 8 characters');\n        }\n        \n        return errors;\n      };\n\n      expect(validatePassword('123')).toContain('Password must be at least 8 characters');\n      expect(validatePassword('password123')).toHaveLength(0);\n    });\n\n    test('should validate password confirmation', () => {\n      const validatePasswordConfirmation = (password: string, confirmPassword: string) => {\n        return password === confirmPassword;\n      };\n\n      expect(validatePasswordConfirmation('password123', 'password123')).toBe(true);\n      expect(validatePasswordConfirmation('password123', 'different')).toBe(false);\n    });\n\n    test('should validate email format', () => {\n      const validateEmail = (email: string) => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n      };\n\n      expect(validateEmail('valid@example.com')).toBe(true);\n      expect(validateEmail('invalid-email')).toBe(false);\n      expect(validateEmail('invalid@')).toBe(false);\n    });\n  });\n\n  describe('API Integration', () => {\n    test('should call user creation API with correct data', async () => {\n      const mockResponse = {\n        success: true,\n        message: 'User created successfully',\n        data: {\n          id: 'user-123',\n          name: 'John Doe',\n          email: 'john@example.com',\n        },\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const userData = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n        allowedAccounts: [],\n      };\n\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer dev-token',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      const result = await response.json();\n\n      expect(global.fetch).toHaveBeenCalledWith('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer dev-token',\n        },\n        body: JSON.stringify(userData),\n      });\n      expect(result.success).toBe(true);\n      expect(result.data.name).toBe('John Doe');\n    });\n\n    test('should handle API errors gracefully', async () => {\n      const mockErrorResponse = {\n        success: false,\n        message: 'Email already exists',\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => mockErrorResponse,\n      });\n\n      const userData = {\n        name: 'John Doe',\n        email: 'existing@example.com',\n        password: 'password123',\n        shop: 'shop-1',\n        permissions: ['admin:all'],\n      };\n\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer dev-token',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      const result = await response.json();\n\n      expect(result.success).toBe(false);\n      expect(result.message).toBe('Email already exists');\n    });\n  });\n\n  // API endpoint tests are covered in integration tests\n});"],"names":["mockPrisma","user","create","jest","fn","findUnique","shop","findMany","permission","upsert","role","mockRouter","push","replace","back","mockUseAuth","id","name","email","permissions","isAuthenticated","hasPermission","mockReturnValue","mock","__esModule","default","useRouter","useParams","useAuth","global","fetch","MockUserCreationForm","onSubmit","formData","setFormData","React","useState","password","confirmPassword","allowedAccounts","handleSubmit","e","preventDefault","handleChange","value","target","prev","handlePermissionChange","permissionId","includes","filter","form","data-testid","input","onChange","placeholder","type","select","option","div","label","button","describe","beforeEach","clearAllMocks","mockClear","test","mockOnSubmit","render","expect","screen","getByTestId","toBeInTheDocument","userEvent","setup","selectOptions","toHaveValue","click","toBeChecked","toHaveBeenCalledWith","validateUserData","data","errors","length","invalidData","toContain","validatePassword","toHaveLength","validatePasswordConfirmation","toBe","validateEmail","emailRegex","mockResponse","success","message","mockResolvedValueOnce","ok","json","userData","response","method","headers","body","JSON","stringify","result","mockErrorResponse","status"],"mappings":"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"}