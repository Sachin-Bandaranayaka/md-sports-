{"version":3,"names":["cov_rofndncct","actualCoverage","s","pg","require","console","log","version","client","Client","host","port","database","user","password","ssl","connect","then","f","query","result","rows","current_time","end","catch","err","error","process","exit"],"sources":["/Users/sachin/Documents/md-sports-/src/scripts/check-pg.js"],"sourcesContent":["// Simple script to check if pg is installed correctly\ntry {\n    const pg = require('pg');\n    console.log('PG module loaded successfully');\n    console.log('PG version:', pg.version);\n    \n    // Try to create a client with proper credentials\n    // Note: Replace with actual credentials if needed\n    const client = new pg.Client({\n        host: 'localhost',\n        port: 5432,\n        database: 'mssport',\n        user: 'postgres',  // Replace with your actual database user\n        password: 'postgres',  // Replace with your actual database password\n        ssl: false\n    });\n    \n    console.log('PG client created successfully');\n    \n    // Try to connect\n    client.connect()\n        .then(() => {\n            console.log('Connected to PostgreSQL successfully');\n            return client.query('SELECT NOW() as current_time');\n        })\n        .then(result => {\n            console.log('Query executed successfully');\n            console.log('Current time:', result.rows[0].current_time);\n            client.end();\n        })\n        .catch(err => {\n            console.error('Error connecting to PostgreSQL:', err);\n            process.exit(1);\n        });\n} catch (error) {\n    console.error('Error loading pg module:', error);\n    process.exit(1);\n} "],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeI;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;AAdJ,IAAI;EACA,MAAMC,EAAA;EAAA;EAAA,CAAAH,aAAA,GAAAE,CAAA,OAAKE,OAAA,CAAQ;EAAA;EAAAJ,aAAA,GAAAE,CAAA;EACnBG,OAAA,CAAQC,GAAG,CAAC;EAAA;EAAAN,aAAA,GAAAE,CAAA;EACZG,OAAA,CAAQC,GAAG,CAAC,eAAeH,EAAA,CAAGI,OAAO;EAErC;EACA;EACA,MAAMC,MAAA;EAAA;EAAA,CAAAR,aAAA,GAAAE,CAAA,OAAS,IAAIC,EAAA,CAAGM,MAAM,CAAC;IACzBC,IAAA,EAAM;IACNC,IAAA,EAAM;IACNC,QAAA,EAAU;IACVC,IAAA,EAAM;IACNC,QAAA,EAAU;IACVC,GAAA,EAAK;EACT;EAAA;EAAAf,aAAA,GAAAE,CAAA;EAEAG,OAAA,CAAQC,GAAG,CAAC;EAEZ;EAAA;EAAAN,aAAA,GAAAE,CAAA;EACAM,MAAA,CAAOQ,OAAO,GACTC,IAAI,CAAC;IAAA;IAAAjB,aAAA,GAAAkB,CAAA;IAAAlB,aAAA,GAAAE,CAAA;IACFG,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAAN,aAAA,GAAAE,CAAA;IACZ,OAAOM,MAAA,CAAOW,KAAK,CAAC;EACxB,GACCF,IAAI,CAACG,MAAA;IAAA;IAAApB,aAAA,GAAAkB,CAAA;IAAAlB,aAAA,GAAAE,CAAA;IACFG,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAAN,aAAA,GAAAE,CAAA;IACZG,OAAA,CAAQC,GAAG,CAAC,iBAAiBc,MAAA,CAAOC,IAAI,CAAC,EAAE,CAACC,YAAY;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IACxDM,MAAA,CAAOe,GAAG;EACd,GACCC,KAAK,CAACC,GAAA;IAAA;IAAAzB,aAAA,GAAAkB,CAAA;IAAAlB,aAAA,GAAAE,CAAA;IACHG,OAAA,CAAQqB,KAAK,CAAC,mCAAmCD,GAAA;IAAA;IAAAzB,aAAA,GAAAE,CAAA;IACjDyB,OAAA,CAAQC,IAAI,CAAC;EACjB;AACR,EAAE,OAAOF,KAAA,EAAO;EAAA;EAAA1B,aAAA,GAAAE,CAAA;EACZG,OAAA,CAAQqB,KAAK,CAAC,4BAA4BA,KAAA;EAAA;EAAA1B,aAAA,GAAAE,CAAA;EAC1CyB,OAAA,CAAQC,IAAI,CAAC;AACjB","ignoreList":[]}