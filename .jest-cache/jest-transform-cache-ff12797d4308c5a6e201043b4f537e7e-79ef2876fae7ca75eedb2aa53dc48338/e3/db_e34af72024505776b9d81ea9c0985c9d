7f78ef1961b75effcf78b0294c8fde98
"use strict";

/* istanbul ignore next */
function cov_jyxvsl9nf() {
  var path = "/Users/sachin/Documents/md-sports-/src/utils/db.ts";
  var hash = "09b79c8d9de2abde96a1ab5053ad53de2ae24619";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/utils/db.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 25
        }
      },
      "4": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 31,
          column: 1
        }
      },
      "5": {
        start: {
          line: 33,
          column: 13
        },
        end: {
          line: 33,
          column: 37
        }
      },
      "6": {
        start: {
          line: 35,
          column: 17
        },
        end: {
          line: 35,
          column: 18
        }
      },
      "7": {
        start: {
          line: 36,
          column: 21
        },
        end: {
          line: 36,
          column: 22
        }
      },
      "8": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 22
        }
      },
      "9": {
        start: {
          line: 39,
          column: 14
        },
        end: {
          line: 87,
          column: 1
        }
      },
      "10": {
        start: {
          line: 40,
          column: 18
        },
        end: {
          line: 40,
          column: 28
        }
      },
      "11": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 32
        }
      },
      "12": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "13": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 43
        }
      },
      "14": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "15": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "16": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 55
        }
      },
      "17": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "18": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 29
        }
      },
      "19": {
        start: {
          line: 55,
          column: 25
        },
        end: {
          line: 55,
          column: 43
        }
      },
      "20": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 35
        }
      },
      "21": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "22": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "23": {
        start: {
          line: 60,
          column: 34
        },
        end: {
          line: 64,
          column: 17
        }
      },
      "24": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 44
        }
      },
      "25": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 69
        }
      },
      "26": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 70,
          column: 17
        }
      },
      "27": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 40
        }
      },
      "28": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "29": {
        start: {
          line: 73,
          column: 32
        },
        end: {
          line: 73,
          column: 59
        }
      },
      "30": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 99
        }
      },
      "31": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 19
        }
      },
      "32": {
        start: {
          line: 79,
          column: 25
        },
        end: {
          line: 79,
          column: 43
        }
      },
      "33": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "34": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 20
        }
      },
      "35": {
        start: {
          line: 89,
          column: 19
        },
        end: {
          line: 106,
          column: 1
        }
      },
      "36": {
        start: {
          line: 90,
          column: 19
        },
        end: {
          line: 90,
          column: 39
        }
      },
      "37": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 22
        }
      },
      "38": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "39": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 36
        }
      },
      "40": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "41": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 59
        }
      },
      "42": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 33
        }
      },
      "43": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 37
        }
      },
      "44": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 23
        }
      },
      "45": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 39
        }
      },
      "46": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 20
        }
      },
      "47": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 25
        }
      },
      "48": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 115,
          column: 1
        }
      },
      "49": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "50": {
        start: {
          line: 110,
          column: 23
        },
        end: {
          line: 110,
          column: 62
        }
      },
      "51": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 40
        }
      },
      "52": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 21
        }
      },
      "53": {
        start: {
          line: 117,
          column: 17
        },
        end: {
          line: 128,
          column: 6
        }
      },
      "54": {
        start: {
          line: 117,
          column: 22
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "55": {
        start: {
          line: 130,
          column: 17
        },
        end: {
          line: 132,
          column: 1
        }
      },
      "56": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 131,
          column: 21
        }
      },
      "57": {
        start: {
          line: 134,
          column: 11
        },
        end: {
          line: 141,
          column: 1
        }
      },
      "58": {
        start: {
          line: 142,
          column: 17
        },
        end: {
          line: 142,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 39,
            column: 14
          },
          end: {
            line: 39,
            column: 15
          }
        },
        loc: {
          start: {
            line: 39,
            column: 36
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 39
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 89,
            column: 20
          }
        },
        loc: {
          start: {
            line: 89,
            column: 36
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 89
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 108,
            column: 20
          },
          end: {
            line: 108,
            column: 21
          }
        },
        loc: {
          start: {
            line: 108,
            column: 30
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 108
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 117,
            column: 17
          },
          end: {
            line: 117,
            column: 18
          }
        },
        loc: {
          start: {
            line: 117,
            column: 22
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 117
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 130,
            column: 17
          },
          end: {
            line: 130,
            column: 18
          }
        },
        loc: {
          start: {
            line: 130,
            column: 27
          },
          end: {
            line: 132,
            column: 1
          }
        },
        line: 130
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 17,
            column: 13
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 49
          },
          end: {
            line: 17,
            column: 5
          }
        }, {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 13
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 51,
            column: 13
          }
        }],
        line: 47
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 22
          }
        }, {
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 47,
            column: 43
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 83,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 83,
            column: 34
          }
        }, {
          start: {
            line: 83,
            column: 38
          },
          end: {
            line: 83,
            column: 39
          }
        }],
        line: 83
      },
      "8": {
        loc: {
          start: {
            line: 119,
            column: 26
          },
          end: {
            line: 119,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 43
          },
          end: {
            line: 119,
            column: 70
          }
        }, {
          start: {
            line: 119,
            column: 73
          },
          end: {
            line: 119,
            column: 74
          }
        }],
        line: 119
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/utils/db.ts"],
      sourcesContent: ["import { Pool, QueryResult, PoolConfig } from 'pg';\n\n// Optimized connection pool configuration for millisecond performance\nconst poolConfig: PoolConfig = {\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'production'\n        ? { rejectUnauthorized: false }\n        : false,\n    \n    // Connection pool optimization for high performance\n    max: 20,                    // Maximum number of clients in the pool\n    min: 2,                     // Minimum number of clients in the pool\n    idleTimeoutMillis: 30000,   // Close idle clients after 30 seconds\n    connectionTimeoutMillis: 2000, // Return error after 2 seconds if can't connect\n    allowExitOnIdle: true,      // Allow the pool to exit when all clients are idle\n    \n    // Statement timeout for fast queries\n    statement_timeout: 10000,   // 10 second timeout for statements\n    query_timeout: 5000,        // 5 second timeout for queries\n    \n    // Application name for monitoring\n    application_name: 'mssports_app',\n    \n    // Additional performance options\n    options: '-c default_transaction_isolation=read_committed -c statement_timeout=10000'\n};\n\n// Create optimized connection pool\nconst pool = new Pool(poolConfig);\n\n// Performance monitoring\nlet queryCount = 0;\nlet totalQueryTime = 0;\nconst slowQueries: Array<{ query: string; duration: number; timestamp: Date }> = [];\n\n// Enhanced query method with performance monitoring\nconst query = async (text: string, params?: any[]): Promise<QueryResult> => {\n    const start = Date.now();\n    const queryId = ++queryCount;\n    \n    try {\n        // Use a prepared statement for better performance\n        const client = await pool.connect();\n        let res: QueryResult;\n        \n        try {\n            if (params && params.length > 0) {\n                res = await client.query(text, params);\n            } else {\n                res = await client.query(text);\n            }\n        } finally {\n            client.release();\n        }\n        \n        const duration = Date.now() - start;\n        totalQueryTime += duration;\n        \n        // Log performance metrics\n        if (process.env.NODE_ENV !== 'production') {\n            if (duration > 50) { // Log queries slower than 50ms\n                const slowQuery = { query: text.substring(0, 100), duration, timestamp: new Date() };\n                slowQueries.push(slowQuery);\n                console.log(`\uD83D\uDC0C Slow query #${queryId}:`, slowQuery);\n                \n                // Keep only last 10 slow queries\n                if (slowQueries.length > 10) {\n                    slowQueries.shift();\n                }\n            }\n            \n            if (queryId % 100 === 0) { // Log stats every 100 queries\n                const avgTime = totalQueryTime / queryCount;\n                console.log(`\uD83D\uDCCA Query stats: ${queryCount} queries, avg: ${avgTime.toFixed(2)}ms`);\n            }\n        }\n        \n        return res;\n    } catch (error: any) {\n        const duration = Date.now() - start;\n        console.error(`\u274C Query #${queryId} failed after ${duration}ms:`, {\n            error: error.message,\n            query: text.substring(0, 100),\n            params: params?.length || 0\n        });\n        throw error;\n    }\n};\n\n// Optimized batch query method\nconst batchQuery = async (queries: Array<{ text: string; params?: any[] }>): Promise<QueryResult[]> => {\n    const client = await pool.connect();\n    const results: QueryResult[] = [];\n    \n    try {\n        await client.query('BEGIN');\n        \n        for (const { text, params } of queries) {\n            const result = await client.query(text, params);\n            results.push(result);\n        }\n        \n        await client.query('COMMIT');\n        return results;\n    } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n    } finally {\n        client.release();\n    }\n};\n\n// Connection health check\nconst healthCheck = async (): Promise<boolean> => {\n    try {\n        const result = await query('SELECT 1 as health_check');\n        return result.rows.length === 1;\n    } catch {\n        return false;\n    }\n};\n\n// Get performance statistics\nconst getStats = () => ({\n    totalQueries: queryCount,\n    averageQueryTime: queryCount > 0 ? totalQueryTime / queryCount : 0,\n    slowQueries: [...slowQueries],\n    poolStats: {\n        totalCount: pool.totalCount,\n        idleCount: pool.idleCount,\n        waitingCount: pool.waitingCount\n    }\n});\n\n// Graceful shutdown\nconst shutdown = async (): Promise<void> => {\n    await pool.end();\n};\n\n// Export the enhanced database interface\nconst db = {\n    query,\n    batchQuery,\n    healthCheck,\n    getStats,\n    shutdown,\n    pool\n};\n\nexport default db; "],
      names: ["poolConfig", "connectionString", "process", "env", "DATABASE_URL", "ssl", "NODE_ENV", "rejectUnauthorized", "max", "min", "idleTimeoutMillis", "connectionTimeoutMillis", "allowExitOnIdle", "statement_timeout", "query_timeout", "application_name", "options", "pool", "Pool", "queryCount", "totalQueryTime", "slowQueries", "query", "text", "params", "start", "Date", "now", "queryId", "client", "connect", "res", "length", "release", "duration", "slowQuery", "substring", "timestamp", "push", "console", "log", "shift", "avgTime", "toFixed", "error", "message", "batchQuery", "queries", "results", "result", "healthCheck", "rows", "getStats", "totalQueries", "averageQueryTime", "poolStats", "totalCount", "idleCount", "waitingCount", "shutdown", "end", "db"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "09b79c8d9de2abde96a1ab5053ad53de2ae24619"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jyxvsl9nf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jyxvsl9nf();
cov_jyxvsl9nf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_jyxvsl9nf().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_jyxvsl9nf().f[0]++;
    cov_jyxvsl9nf().s[2]++;
    return _default;
  }
});
const _pg =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[3]++, require("pg"));
// Optimized connection pool configuration for millisecond performance
const poolConfig =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[4]++, {
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === "production" ?
  /* istanbul ignore next */
  (cov_jyxvsl9nf().b[0][0]++, {
    rejectUnauthorized: false
  }) :
  /* istanbul ignore next */
  (cov_jyxvsl9nf().b[0][1]++, false),
  // Connection pool optimization for high performance
  max: 20,
  min: 2,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
  allowExitOnIdle: true,
  // Statement timeout for fast queries
  statement_timeout: 10000,
  query_timeout: 5000,
  // Application name for monitoring
  application_name: "mssports_app",
  // Additional performance options
  options: "-c default_transaction_isolation=read_committed -c statement_timeout=10000"
});
// Create optimized connection pool
const pool =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[5]++, new _pg.Pool(poolConfig));
// Performance monitoring
let queryCount =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[6]++, 0);
let totalQueryTime =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[7]++, 0);
const slowQueries =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[8]++, []);
// Enhanced query method with performance monitoring
/* istanbul ignore next */
cov_jyxvsl9nf().s[9]++;
const query = async (text, params) => {
  /* istanbul ignore next */
  cov_jyxvsl9nf().f[1]++;
  const start =
  /* istanbul ignore next */
  (cov_jyxvsl9nf().s[10]++, Date.now());
  const queryId =
  /* istanbul ignore next */
  (cov_jyxvsl9nf().s[11]++, ++queryCount);
  /* istanbul ignore next */
  cov_jyxvsl9nf().s[12]++;
  try {
    // Use a prepared statement for better performance
    const client =
    /* istanbul ignore next */
    (cov_jyxvsl9nf().s[13]++, await pool.connect());
    let res;
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[14]++;
    try {
      /* istanbul ignore next */
      cov_jyxvsl9nf().s[15]++;
      if (
      /* istanbul ignore next */
      (cov_jyxvsl9nf().b[2][0]++, params) &&
      /* istanbul ignore next */
      (cov_jyxvsl9nf().b[2][1]++, params.length > 0)) {
        /* istanbul ignore next */
        cov_jyxvsl9nf().b[1][0]++;
        cov_jyxvsl9nf().s[16]++;
        res = await client.query(text, params);
      } else {
        /* istanbul ignore next */
        cov_jyxvsl9nf().b[1][1]++;
        cov_jyxvsl9nf().s[17]++;
        res = await client.query(text);
      }
    } finally {
      /* istanbul ignore next */
      cov_jyxvsl9nf().s[18]++;
      client.release();
    }
    const duration =
    /* istanbul ignore next */
    (cov_jyxvsl9nf().s[19]++, Date.now() - start);
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[20]++;
    totalQueryTime += duration;
    // Log performance metrics
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[21]++;
    if (process.env.NODE_ENV !== "production") {
      /* istanbul ignore next */
      cov_jyxvsl9nf().b[3][0]++;
      cov_jyxvsl9nf().s[22]++;
      if (duration > 50) {
        /* istanbul ignore next */
        cov_jyxvsl9nf().b[4][0]++;
        const slowQuery =
        /* istanbul ignore next */
        (cov_jyxvsl9nf().s[23]++, {
          query: text.substring(0, 100),
          duration,
          timestamp: new Date()
        });
        /* istanbul ignore next */
        cov_jyxvsl9nf().s[24]++;
        slowQueries.push(slowQuery);
        /* istanbul ignore next */
        cov_jyxvsl9nf().s[25]++;
        console.log(`🐌 Slow query #${queryId}:`, slowQuery);
        // Keep only last 10 slow queries
        /* istanbul ignore next */
        cov_jyxvsl9nf().s[26]++;
        if (slowQueries.length > 10) {
          /* istanbul ignore next */
          cov_jyxvsl9nf().b[5][0]++;
          cov_jyxvsl9nf().s[27]++;
          slowQueries.shift();
        } else
        /* istanbul ignore next */
        {
          cov_jyxvsl9nf().b[5][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_jyxvsl9nf().b[4][1]++;
      }
      cov_jyxvsl9nf().s[28]++;
      if (queryId % 100 === 0) {
        /* istanbul ignore next */
        cov_jyxvsl9nf().b[6][0]++;
        const avgTime =
        /* istanbul ignore next */
        (cov_jyxvsl9nf().s[29]++, totalQueryTime / queryCount);
        /* istanbul ignore next */
        cov_jyxvsl9nf().s[30]++;
        console.log(`📊 Query stats: ${queryCount} queries, avg: ${avgTime.toFixed(2)}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_jyxvsl9nf().b[6][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_jyxvsl9nf().b[3][1]++;
    }
    cov_jyxvsl9nf().s[31]++;
    return res;
  } catch (error) {
    const duration =
    /* istanbul ignore next */
    (cov_jyxvsl9nf().s[32]++, Date.now() - start);
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[33]++;
    console.error(`❌ Query #${queryId} failed after ${duration}ms:`, {
      error: error.message,
      query: text.substring(0, 100),
      params:
      /* istanbul ignore next */
      (cov_jyxvsl9nf().b[7][0]++, params?.length) ||
      /* istanbul ignore next */
      (cov_jyxvsl9nf().b[7][1]++, 0)
    });
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[34]++;
    throw error;
  }
};
// Optimized batch query method
/* istanbul ignore next */
cov_jyxvsl9nf().s[35]++;
const batchQuery = async queries => {
  /* istanbul ignore next */
  cov_jyxvsl9nf().f[2]++;
  const client =
  /* istanbul ignore next */
  (cov_jyxvsl9nf().s[36]++, await pool.connect());
  const results =
  /* istanbul ignore next */
  (cov_jyxvsl9nf().s[37]++, []);
  /* istanbul ignore next */
  cov_jyxvsl9nf().s[38]++;
  try {
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[39]++;
    await client.query("BEGIN");
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[40]++;
    for (const {
      text,
      params
    } of queries) {
      const result =
      /* istanbul ignore next */
      (cov_jyxvsl9nf().s[41]++, await client.query(text, params));
      /* istanbul ignore next */
      cov_jyxvsl9nf().s[42]++;
      results.push(result);
    }
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[43]++;
    await client.query("COMMIT");
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[44]++;
    return results;
  } catch (error) {
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[45]++;
    await client.query("ROLLBACK");
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[46]++;
    throw error;
  } finally {
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[47]++;
    client.release();
  }
};
// Connection health check
/* istanbul ignore next */
cov_jyxvsl9nf().s[48]++;
const healthCheck = async () => {
  /* istanbul ignore next */
  cov_jyxvsl9nf().f[3]++;
  cov_jyxvsl9nf().s[49]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_jyxvsl9nf().s[50]++, await query("SELECT 1 as health_check"));
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[51]++;
    return result.rows.length === 1;
  } catch {
    /* istanbul ignore next */
    cov_jyxvsl9nf().s[52]++;
    return false;
  }
};
// Get performance statistics
/* istanbul ignore next */
cov_jyxvsl9nf().s[53]++;
const getStats = () => {
  /* istanbul ignore next */
  cov_jyxvsl9nf().f[4]++;
  cov_jyxvsl9nf().s[54]++;
  return {
    totalQueries: queryCount,
    averageQueryTime: queryCount > 0 ?
    /* istanbul ignore next */
    (cov_jyxvsl9nf().b[8][0]++, totalQueryTime / queryCount) :
    /* istanbul ignore next */
    (cov_jyxvsl9nf().b[8][1]++, 0),
    slowQueries: [...slowQueries],
    poolStats: {
      totalCount: pool.totalCount,
      idleCount: pool.idleCount,
      waitingCount: pool.waitingCount
    }
  };
};
// Graceful shutdown
/* istanbul ignore next */
cov_jyxvsl9nf().s[55]++;
const shutdown = async () => {
  /* istanbul ignore next */
  cov_jyxvsl9nf().f[5]++;
  cov_jyxvsl9nf().s[56]++;
  await pool.end();
};
// Export the enhanced database interface
const db =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[57]++, {
  query,
  batchQuery,
  healthCheck,
  getStats,
  shutdown,
  pool
});
const _default =
/* istanbul ignore next */
(cov_jyxvsl9nf().s[58]++, db);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfanl4dnNsOW5mIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiX2RlZmF1bHQiLCJwb29sQ29uZmlnIiwiY29ubmVjdGlvblN0cmluZyIsInByb2Nlc3MiLCJlbnYiLCJEQVRBQkFTRV9VUkwiLCJzc2wiLCJOT0RFX0VOViIsImIiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJtYXgiLCJtaW4iLCJpZGxlVGltZW91dE1pbGxpcyIsImNvbm5lY3Rpb25UaW1lb3V0TWlsbGlzIiwiYWxsb3dFeGl0T25JZGxlIiwic3RhdGVtZW50X3RpbWVvdXQiLCJxdWVyeV90aW1lb3V0IiwiYXBwbGljYXRpb25fbmFtZSIsIm9wdGlvbnMiLCJwb29sIiwiX3BnIiwiUG9vbCIsInF1ZXJ5Q291bnQiLCJ0b3RhbFF1ZXJ5VGltZSIsInNsb3dRdWVyaWVzIiwicXVlcnkiLCJ0ZXh0IiwicGFyYW1zIiwiZiIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsInF1ZXJ5SWQiLCJjbGllbnQiLCJjb25uZWN0IiwicmVzIiwibGVuZ3RoIiwicmVsZWFzZSIsImR1cmF0aW9uIiwic2xvd1F1ZXJ5Iiwic3Vic3RyaW5nIiwidGltZXN0YW1wIiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJzaGlmdCIsImF2Z1RpbWUiLCJ0b0ZpeGVkIiwiZXJyb3IiLCJtZXNzYWdlIiwiYmF0Y2hRdWVyeSIsInF1ZXJpZXMiLCJyZXN1bHRzIiwicmVzdWx0IiwiaGVhbHRoQ2hlY2siLCJyb3dzIiwiZ2V0U3RhdHMiLCJ0b3RhbFF1ZXJpZXMiLCJhdmVyYWdlUXVlcnlUaW1lIiwicG9vbFN0YXRzIiwidG90YWxDb3VudCIsImlkbGVDb3VudCIsIndhaXRpbmdDb3VudCIsInNodXRkb3duIiwiZW5kIiwiZGIiXSwic291cmNlcyI6WyIvVXNlcnMvc2FjaGluL0RvY3VtZW50cy9tZC1zcG9ydHMtL3NyYy91dGlscy9kYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb29sLCBRdWVyeVJlc3VsdCwgUG9vbENvbmZpZyB9IGZyb20gJ3BnJztcblxuLy8gT3B0aW1pemVkIGNvbm5lY3Rpb24gcG9vbCBjb25maWd1cmF0aW9uIGZvciBtaWxsaXNlY29uZCBwZXJmb3JtYW5jZVxuY29uc3QgcG9vbENvbmZpZzogUG9vbENvbmZpZyA9IHtcbiAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXG4gICAgc3NsOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgID8geyByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlIH1cbiAgICAgICAgOiBmYWxzZSxcbiAgICBcbiAgICAvLyBDb25uZWN0aW9uIHBvb2wgb3B0aW1pemF0aW9uIGZvciBoaWdoIHBlcmZvcm1hbmNlXG4gICAgbWF4OiAyMCwgICAgICAgICAgICAgICAgICAgIC8vIE1heGltdW0gbnVtYmVyIG9mIGNsaWVudHMgaW4gdGhlIHBvb2xcbiAgICBtaW46IDIsICAgICAgICAgICAgICAgICAgICAgLy8gTWluaW11bSBudW1iZXIgb2YgY2xpZW50cyBpbiB0aGUgcG9vbFxuICAgIGlkbGVUaW1lb3V0TWlsbGlzOiAzMDAwMCwgICAvLyBDbG9zZSBpZGxlIGNsaWVudHMgYWZ0ZXIgMzAgc2Vjb25kc1xuICAgIGNvbm5lY3Rpb25UaW1lb3V0TWlsbGlzOiAyMDAwLCAvLyBSZXR1cm4gZXJyb3IgYWZ0ZXIgMiBzZWNvbmRzIGlmIGNhbid0IGNvbm5lY3RcbiAgICBhbGxvd0V4aXRPbklkbGU6IHRydWUsICAgICAgLy8gQWxsb3cgdGhlIHBvb2wgdG8gZXhpdCB3aGVuIGFsbCBjbGllbnRzIGFyZSBpZGxlXG4gICAgXG4gICAgLy8gU3RhdGVtZW50IHRpbWVvdXQgZm9yIGZhc3QgcXVlcmllc1xuICAgIHN0YXRlbWVudF90aW1lb3V0OiAxMDAwMCwgICAvLyAxMCBzZWNvbmQgdGltZW91dCBmb3Igc3RhdGVtZW50c1xuICAgIHF1ZXJ5X3RpbWVvdXQ6IDUwMDAsICAgICAgICAvLyA1IHNlY29uZCB0aW1lb3V0IGZvciBxdWVyaWVzXG4gICAgXG4gICAgLy8gQXBwbGljYXRpb24gbmFtZSBmb3IgbW9uaXRvcmluZ1xuICAgIGFwcGxpY2F0aW9uX25hbWU6ICdtc3Nwb3J0c19hcHAnLFxuICAgIFxuICAgIC8vIEFkZGl0aW9uYWwgcGVyZm9ybWFuY2Ugb3B0aW9uc1xuICAgIG9wdGlvbnM6ICctYyBkZWZhdWx0X3RyYW5zYWN0aW9uX2lzb2xhdGlvbj1yZWFkX2NvbW1pdHRlZCAtYyBzdGF0ZW1lbnRfdGltZW91dD0xMDAwMCdcbn07XG5cbi8vIENyZWF0ZSBvcHRpbWl6ZWQgY29ubmVjdGlvbiBwb29sXG5jb25zdCBwb29sID0gbmV3IFBvb2wocG9vbENvbmZpZyk7XG5cbi8vIFBlcmZvcm1hbmNlIG1vbml0b3JpbmdcbmxldCBxdWVyeUNvdW50ID0gMDtcbmxldCB0b3RhbFF1ZXJ5VGltZSA9IDA7XG5jb25zdCBzbG93UXVlcmllczogQXJyYXk8eyBxdWVyeTogc3RyaW5nOyBkdXJhdGlvbjogbnVtYmVyOyB0aW1lc3RhbXA6IERhdGUgfT4gPSBbXTtcblxuLy8gRW5oYW5jZWQgcXVlcnkgbWV0aG9kIHdpdGggcGVyZm9ybWFuY2UgbW9uaXRvcmluZ1xuY29uc3QgcXVlcnkgPSBhc3luYyAodGV4dDogc3RyaW5nLCBwYXJhbXM/OiBhbnlbXSk6IFByb21pc2U8UXVlcnlSZXN1bHQ+ID0+IHtcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgY29uc3QgcXVlcnlJZCA9ICsrcXVlcnlDb3VudDtcbiAgICBcbiAgICB0cnkge1xuICAgICAgICAvLyBVc2UgYSBwcmVwYXJlZCBzdGF0ZW1lbnQgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCBwb29sLmNvbm5lY3QoKTtcbiAgICAgICAgbGV0IHJlczogUXVlcnlSZXN1bHQ7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJlcyA9IGF3YWl0IGNsaWVudC5xdWVyeSh0ZXh0LCBwYXJhbXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMgPSBhd2FpdCBjbGllbnQucXVlcnkodGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBjbGllbnQucmVsZWFzZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydDtcbiAgICAgICAgdG90YWxRdWVyeVRpbWUgKz0gZHVyYXRpb247XG4gICAgICAgIFxuICAgICAgICAvLyBMb2cgcGVyZm9ybWFuY2UgbWV0cmljc1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKGR1cmF0aW9uID4gNTApIHsgLy8gTG9nIHF1ZXJpZXMgc2xvd2VyIHRoYW4gNTBtc1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsb3dRdWVyeSA9IHsgcXVlcnk6IHRleHQuc3Vic3RyaW5nKDAsIDEwMCksIGR1cmF0aW9uLCB0aW1lc3RhbXA6IG5ldyBEYXRlKCkgfTtcbiAgICAgICAgICAgICAgICBzbG93UXVlcmllcy5wdXNoKHNsb3dRdWVyeSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYPCfkIwgU2xvdyBxdWVyeSAjJHtxdWVyeUlkfTpgLCBzbG93UXVlcnkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEtlZXAgb25seSBsYXN0IDEwIHNsb3cgcXVlcmllc1xuICAgICAgICAgICAgICAgIGlmIChzbG93UXVlcmllcy5sZW5ndGggPiAxMCkge1xuICAgICAgICAgICAgICAgICAgICBzbG93UXVlcmllcy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHF1ZXJ5SWQgJSAxMDAgPT09IDApIHsgLy8gTG9nIHN0YXRzIGV2ZXJ5IDEwMCBxdWVyaWVzXG4gICAgICAgICAgICAgICAgY29uc3QgYXZnVGltZSA9IHRvdGFsUXVlcnlUaW1lIC8gcXVlcnlDb3VudDtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TiiBRdWVyeSBzdGF0czogJHtxdWVyeUNvdW50fSBxdWVyaWVzLCBhdmc6ICR7YXZnVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydDtcbiAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIFF1ZXJ5ICMke3F1ZXJ5SWR9IGZhaWxlZCBhZnRlciAke2R1cmF0aW9ufW1zOmAsIHtcbiAgICAgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgcXVlcnk6IHRleHQuc3Vic3RyaW5nKDAsIDEwMCksXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtcz8ubGVuZ3RoIHx8IDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn07XG5cbi8vIE9wdGltaXplZCBiYXRjaCBxdWVyeSBtZXRob2RcbmNvbnN0IGJhdGNoUXVlcnkgPSBhc3luYyAocXVlcmllczogQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IHBhcmFtcz86IGFueVtdIH0+KTogUHJvbWlzZTxRdWVyeVJlc3VsdFtdPiA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gYXdhaXQgcG9vbC5jb25uZWN0KCk7XG4gICAgY29uc3QgcmVzdWx0czogUXVlcnlSZXN1bHRbXSA9IFtdO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQkVHSU4nKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgeyB0ZXh0LCBwYXJhbXMgfSBvZiBxdWVyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQucXVlcnkodGV4dCwgcGFyYW1zKTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0NPTU1JVCcpO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ1JPTExCQUNLJyk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIGNsaWVudC5yZWxlYXNlKCk7XG4gICAgfVxufTtcblxuLy8gQ29ubmVjdGlvbiBoZWFsdGggY2hlY2tcbmNvbnN0IGhlYWx0aENoZWNrID0gYXN5bmMgKCk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5KCdTRUxFQ1QgMSBhcyBoZWFsdGhfY2hlY2snKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5yb3dzLmxlbmd0aCA9PT0gMTtcbiAgICB9IGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbi8vIEdldCBwZXJmb3JtYW5jZSBzdGF0aXN0aWNzXG5jb25zdCBnZXRTdGF0cyA9ICgpID0+ICh7XG4gICAgdG90YWxRdWVyaWVzOiBxdWVyeUNvdW50LFxuICAgIGF2ZXJhZ2VRdWVyeVRpbWU6IHF1ZXJ5Q291bnQgPiAwID8gdG90YWxRdWVyeVRpbWUgLyBxdWVyeUNvdW50IDogMCxcbiAgICBzbG93UXVlcmllczogWy4uLnNsb3dRdWVyaWVzXSxcbiAgICBwb29sU3RhdHM6IHtcbiAgICAgICAgdG90YWxDb3VudDogcG9vbC50b3RhbENvdW50LFxuICAgICAgICBpZGxlQ291bnQ6IHBvb2wuaWRsZUNvdW50LFxuICAgICAgICB3YWl0aW5nQ291bnQ6IHBvb2wud2FpdGluZ0NvdW50XG4gICAgfVxufSk7XG5cbi8vIEdyYWNlZnVsIHNodXRkb3duXG5jb25zdCBzaHV0ZG93biA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBhd2FpdCBwb29sLmVuZCgpO1xufTtcblxuLy8gRXhwb3J0IHRoZSBlbmhhbmNlZCBkYXRhYmFzZSBpbnRlcmZhY2VcbmNvbnN0IGRiID0ge1xuICAgIHF1ZXJ5LFxuICAgIGJhdGNoUXVlcnksXG4gICAgaGVhbHRoQ2hlY2ssXG4gICAgZ2V0U3RhdHMsXG4gICAgc2h1dGRvd24sXG4gICAgcG9vbFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZGI7ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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