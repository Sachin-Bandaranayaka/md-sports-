{"version":3,"names":["cov_jyxvsl9nf","actualCoverage","s","_default","poolConfig","connectionString","process","env","DATABASE_URL","ssl","NODE_ENV","b","rejectUnauthorized","max","min","idleTimeoutMillis","connectionTimeoutMillis","allowExitOnIdle","statement_timeout","query_timeout","application_name","options","pool","_pg","Pool","queryCount","totalQueryTime","slowQueries","query","text","params","f","start","Date","now","queryId","client","connect","res","length","release","duration","slowQuery","substring","timestamp","push","console","log","shift","avgTime","toFixed","error","message","batchQuery","queries","results","result","healthCheck","rows","getStats","totalQueries","averageQueryTime","poolStats","totalCount","idleCount","waitingCount","shutdown","end","db"],"sources":["/Users/sachin/Documents/md-sports-/src/utils/db.ts"],"sourcesContent":["import { Pool, QueryResult, PoolConfig } from 'pg';\n\n// Optimized connection pool configuration for millisecond performance\nconst poolConfig: PoolConfig = {\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'production'\n        ? { rejectUnauthorized: false }\n        : false,\n    \n    // Connection pool optimization for high performance\n    max: 20,                    // Maximum number of clients in the pool\n    min: 2,                     // Minimum number of clients in the pool\n    idleTimeoutMillis: 30000,   // Close idle clients after 30 seconds\n    connectionTimeoutMillis: 2000, // Return error after 2 seconds if can't connect\n    allowExitOnIdle: true,      // Allow the pool to exit when all clients are idle\n    \n    // Statement timeout for fast queries\n    statement_timeout: 10000,   // 10 second timeout for statements\n    query_timeout: 5000,        // 5 second timeout for queries\n    \n    // Application name for monitoring\n    application_name: 'mssports_app',\n    \n    // Additional performance options\n    options: '-c default_transaction_isolation=read_committed -c statement_timeout=10000'\n};\n\n// Create optimized connection pool\nconst pool = new Pool(poolConfig);\n\n// Performance monitoring\nlet queryCount = 0;\nlet totalQueryTime = 0;\nconst slowQueries: Array<{ query: string; duration: number; timestamp: Date }> = [];\n\n// Enhanced query method with performance monitoring\nconst query = async (text: string, params?: any[]): Promise<QueryResult> => {\n    const start = Date.now();\n    const queryId = ++queryCount;\n    \n    try {\n        // Use a prepared statement for better performance\n        const client = await pool.connect();\n        let res: QueryResult;\n        \n        try {\n            if (params && params.length > 0) {\n                res = await client.query(text, params);\n            } else {\n                res = await client.query(text);\n            }\n        } finally {\n            client.release();\n        }\n        \n        const duration = Date.now() - start;\n        totalQueryTime += duration;\n        \n        // Log performance metrics\n        if (process.env.NODE_ENV !== 'production') {\n            if (duration > 50) { // Log queries slower than 50ms\n                const slowQuery = { query: text.substring(0, 100), duration, timestamp: new Date() };\n                slowQueries.push(slowQuery);\n                console.log(`üêå Slow query #${queryId}:`, slowQuery);\n                \n                // Keep only last 10 slow queries\n                if (slowQueries.length > 10) {\n                    slowQueries.shift();\n                }\n            }\n            \n            if (queryId % 100 === 0) { // Log stats every 100 queries\n                const avgTime = totalQueryTime / queryCount;\n                console.log(`üìä Query stats: ${queryCount} queries, avg: ${avgTime.toFixed(2)}ms`);\n            }\n        }\n        \n        return res;\n    } catch (error: any) {\n        const duration = Date.now() - start;\n        console.error(`‚ùå Query #${queryId} failed after ${duration}ms:`, {\n            error: error.message,\n            query: text.substring(0, 100),\n            params: params?.length || 0\n        });\n        throw error;\n    }\n};\n\n// Optimized batch query method\nconst batchQuery = async (queries: Array<{ text: string; params?: any[] }>): Promise<QueryResult[]> => {\n    const client = await pool.connect();\n    const results: QueryResult[] = [];\n    \n    try {\n        await client.query('BEGIN');\n        \n        for (const { text, params } of queries) {\n            const result = await client.query(text, params);\n            results.push(result);\n        }\n        \n        await client.query('COMMIT');\n        return results;\n    } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n    } finally {\n        client.release();\n    }\n};\n\n// Connection health check\nconst healthCheck = async (): Promise<boolean> => {\n    try {\n        const result = await query('SELECT 1 as health_check');\n        return result.rows.length === 1;\n    } catch {\n        return false;\n    }\n};\n\n// Get performance statistics\nconst getStats = () => ({\n    totalQueries: queryCount,\n    averageQueryTime: queryCount > 0 ? totalQueryTime / queryCount : 0,\n    slowQueries: [...slowQueries],\n    poolStats: {\n        totalCount: pool.totalCount,\n        idleCount: pool.idleCount,\n        waitingCount: pool.waitingCount\n    }\n});\n\n// Graceful shutdown\nconst shutdown = async (): Promise<void> => {\n    await pool.end();\n};\n\n// Export the enhanced database interface\nconst db = {\n    query,\n    batchQuery,\n    healthCheck,\n    getStats,\n    shutdown,\n    pool\n};\n\nexport default db; "],"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","ignoreList":[]}