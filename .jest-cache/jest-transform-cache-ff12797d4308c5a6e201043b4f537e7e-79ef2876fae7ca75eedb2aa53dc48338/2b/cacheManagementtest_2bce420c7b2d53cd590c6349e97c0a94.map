{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/cacheManagement.test.ts"],"sourcesContent":["import { Redis } from 'ioredis';\n\n// Mock cache service\nconst mockCacheService = {\n  get: jest.fn(),\n  set: jest.fn(),\n  delete: jest.fn(),\n  deletePattern: jest.fn(),\n  clear: jest.fn(),\n};\n\n// Mock Redis\nconst mockRedis = {\n  get: jest.fn(),\n  set: jest.fn(),\n  setex: jest.fn(),\n  del: jest.fn(),\n  keys: jest.fn(),\n  flushall: jest.fn(),\n  ping: jest.fn(),\n  quit: jest.fn(),\n  on: jest.fn(),\n  connect: jest.fn(),\n  disconnect: jest.fn(),\n};\n\n// Mock ioredis\njest.mock('ioredis', () => {\n  return {\n    Redis: jest.fn().mockImplementation(() => mockRedis),\n  };\n});\n\n// Mock the inventory cache service\nconst mockInventoryCache = {\n  get: jest.fn(),\n  set: jest.fn(),\n  invalidateInventoryData: jest.fn(),\n  generateKey: jest.fn(),\n  warmPopularInventoryData: jest.fn(),\n  trackFilterUsage: jest.fn(),\n  getMetrics: jest.fn(),\n};\n\njest.mock('@/lib/inventoryCache', () => ({\n  inventoryCacheService: mockInventoryCache,\n}));\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n  warn: jest.spyOn(console, 'warn').mockImplementation(() => {}),\n};\n\ndescribe('Cache Management Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.log.mockClear();\n    consoleSpy.error.mockClear();\n    consoleSpy.warn.mockClear();\n  });\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore();\n    consoleSpy.error.mockRestore();\n    consoleSpy.warn.mockRestore();\n  });\n\n  describe('Basic Cache Operations', () => {\n    describe('Memory Cache', () => {\n      it('should store and retrieve data from memory cache', async () => {\n        const testData = { id: 1, name: 'Test Data' };\n        const cacheKey = 'test:key:1';\n\n        // Mock memory cache behavior\n        const memoryCache = new Map();\n        memoryCache.set(cacheKey, JSON.stringify(testData));\n\n        // Simulate cache set\n        mockCacheService.set.mockResolvedValue(undefined);\n        await mockCacheService.set(cacheKey, testData, 300);\n        \n        // Simulate cache get\n        mockCacheService.get.mockResolvedValue(testData);\n        const result = await mockCacheService.get(cacheKey);\n\n        expect(result).toEqual(testData);\n      });\n\n      it('should handle cache expiration', async () => {\n        const testData = { id: 1, name: 'Expiring Data' };\n        const cacheKey = 'test:expiring:1';\n        const ttl = 1; // 1 second\n\n        mockCacheService.set.mockResolvedValue(undefined);\n        await mockCacheService.set(cacheKey, testData, ttl);\n\n        // Simulate time passing and cache expiration\n        mockCacheService.get.mockResolvedValue(null);\n        const result = await mockCacheService.get(cacheKey);\n        expect(result).toBeNull();\n      });\n\n      it('should handle cache miss gracefully', async () => {\n        mockCacheService.get.mockResolvedValue(null);\n        const result = await mockCacheService.get('non:existent:key');\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('Redis Cache', () => {\n      it('should store data in Redis when available', async () => {\n        const testData = { id: 1, name: 'Redis Test' };\n        const cacheKey = 'redis:test:1';\n        const ttl = 300;\n\n        mockRedis.setex.mockResolvedValue('OK');\n\n        mockCacheService.set.mockResolvedValue(undefined);\n        await mockCacheService.set(cacheKey, testData, ttl);\n\n        expect(mockRedis.setex).toHaveBeenCalledWith(\n          cacheKey,\n          ttl,\n          JSON.stringify(testData)\n        );\n      });\n\n      it('should retrieve data from Redis', async () => {\n        const testData = { id: 1, name: 'Redis Test' };\n        const cacheKey = 'redis:test:1';\n\n        mockRedis.get.mockResolvedValue(JSON.stringify(testData));\n\n        mockCacheService.get.mockResolvedValue(testData);\n        const result = await mockCacheService.get(cacheKey);\n\n        expect(mockRedis.get).toHaveBeenCalledWith(cacheKey);\n        expect(result).toEqual(testData);\n      });\n\n      it('should handle Redis connection errors gracefully', async () => {\n        const testData = { id: 1, name: 'Error Test' };\n        const cacheKey = 'redis:error:1';\n\n        mockRedis.setex.mockRejectedValue(new Error('Redis connection failed'));\n\n        // Should not throw error, should fallback to memory cache\n        mockCacheService.set.mockResolvedValue(undefined);\n        await expect(mockCacheService.set(cacheKey, testData, 300)).resolves.not.toThrow();\n        expect(consoleSpy.error).toHaveBeenCalledWith(\n          'Redis cache error:',\n          expect.any(Error)\n        );\n      });\n\n      it('should handle Redis get errors gracefully', async () => {\n        const cacheKey = 'redis:error:get';\n\n        mockRedis.get.mockRejectedValue(new Error('Redis get failed'));\n\n        mockCacheService.get.mockResolvedValue(null);\n        const result = await mockCacheService.get(cacheKey);\n\n        expect(result).toBeNull();\n        expect(consoleSpy.error).toHaveBeenCalledWith(\n          'Redis cache error:',\n          expect.any(Error)\n        );\n      });\n    });\n\n    describe('Cache Invalidation', () => {\n      it('should delete specific cache keys', async () => {\n        const cacheKey = 'test:delete:1';\n\n        mockRedis.del.mockResolvedValue(1);\n\n        mockCacheService.delete.mockResolvedValue(undefined);\n        await mockCacheService.delete(cacheKey);\n\n        expect(mockRedis.del).toHaveBeenCalledWith(cacheKey);\n      });\n\n      it('should delete multiple cache keys by pattern', async () => {\n        const pattern = 'test:pattern:*';\n        const matchingKeys = ['test:pattern:1', 'test:pattern:2', 'test:pattern:3'];\n\n        mockRedis.keys.mockResolvedValue(matchingKeys);\n        mockRedis.del.mockResolvedValue(matchingKeys.length);\n\n        mockCacheService.deletePattern.mockResolvedValue(undefined);\n        await mockCacheService.deletePattern(pattern);\n\n        expect(mockRedis.keys).toHaveBeenCalledWith(pattern);\n        expect(mockRedis.del).toHaveBeenCalledWith(...matchingKeys);\n      });\n\n      it('should handle pattern deletion with no matches', async () => {\n        const pattern = 'test:nomatch:*';\n\n        mockRedis.keys.mockResolvedValue([]);\n\n        mockCacheService.deletePattern.mockResolvedValue(undefined);\n        await mockCacheService.deletePattern(pattern);\n\n        expect(mockRedis.keys).toHaveBeenCalledWith(pattern);\n        expect(mockRedis.del).not.toHaveBeenCalled();\n      });\n\n      it('should clear all cache data', async () => {\n        mockRedis.flushall.mockResolvedValue('OK');\n\n        mockCacheService.clear.mockResolvedValue(undefined);\n        await mockCacheService.clear();\n\n        expect(mockRedis.flushall).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Inventory Cache Service', () => {\n    const mockInventoryData = {\n      items: [\n        { id: 1, productId: 1, shopId: 'shop1', quantity: 100 },\n        { id: 2, productId: 2, shopId: 'shop1', quantity: 50 },\n      ],\n      total: 2,\n      page: 1,\n      limit: 20,\n    };\n\n    const mockFilters = {\n      shopId: 'shop1',\n      page: 1,\n      limit: 20,\n      status: 'In Stock',\n    };\n\n    describe('Cache Key Generation', () => {\n      it('should generate consistent cache keys', () => {\n        const baseKey = 'inventory:summary';\n        const expectedKey = 'inventory:summary:shop:shop1:status:In Stock:page:1:limit:20';\n\n        mockInventoryCache.generateKey.mockReturnValue(expectedKey);\n\n        const result = mockInventoryCache.generateKey(baseKey, mockFilters);\n\n        expect(result).toBe(expectedKey);\n        expect(mockInventoryCache.generateKey).toHaveBeenCalledWith(baseKey, mockFilters);\n      });\n\n      it('should handle filters with special characters', () => {\n        const filtersWithSpecialChars = {\n          ...mockFilters,\n          search: 'test product & more',\n        };\n        const expectedKey = 'inventory:summary:shop:shop1:status:In Stock:search:test%20product%20%26%20more:page:1:limit:20';\n\n        mockInventoryCache.generateKey.mockReturnValue(expectedKey);\n\n        const result = mockInventoryCache.generateKey('inventory:summary', filtersWithSpecialChars);\n\n        expect(result).toBe(expectedKey);\n      });\n    });\n\n    describe('Cache Storage and Retrieval', () => {\n      it('should store inventory data with TTL', async () => {\n        const cacheKey = 'inventory:summary:shop1';\n        const ttl = 300;\n\n        mockInventoryCache.set.mockResolvedValue(undefined);\n\n        await mockInventoryCache.set(cacheKey, mockInventoryData, ttl);\n\n        expect(mockInventoryCache.set).toHaveBeenCalledWith(cacheKey, mockInventoryData, ttl);\n      });\n\n      it('should retrieve cached inventory data', async () => {\n        const cacheKey = 'inventory:summary:shop1';\n\n        mockInventoryCache.get.mockResolvedValue(mockInventoryData);\n\n        const result = await mockInventoryCache.get(cacheKey);\n\n        expect(mockInventoryCache.get).toHaveBeenCalledWith(cacheKey);\n        expect(result).toEqual(mockInventoryData);\n      });\n\n      it('should return null for cache miss', async () => {\n        const cacheKey = 'inventory:summary:nonexistent';\n\n        mockInventoryCache.get.mockResolvedValue(null);\n\n        const result = await mockInventoryCache.get(cacheKey);\n\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('Cache Invalidation Strategies', () => {\n      it('should invalidate inventory data by product', async () => {\n        const productId = 1;\n\n        mockInventoryCache.invalidateInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.invalidateInventoryData(productId);\n\n        expect(mockInventoryCache.invalidateInventoryData).toHaveBeenCalledWith(productId);\n      });\n\n      it('should invalidate inventory data by shop', async () => {\n        const shopId = 'shop1';\n\n        mockInventoryCache.invalidateInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.invalidateInventoryData(undefined, shopId);\n\n        expect(mockInventoryCache.invalidateInventoryData).toHaveBeenCalledWith(undefined, shopId);\n      });\n\n      it('should invalidate inventory data by category', async () => {\n        const categoryId = 5;\n\n        mockInventoryCache.invalidateInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.invalidateInventoryData(undefined, undefined, categoryId);\n\n        expect(mockInventoryCache.invalidateInventoryData).toHaveBeenCalledWith(undefined, undefined, categoryId);\n      });\n\n      it('should invalidate all inventory data', async () => {\n        mockInventoryCache.invalidateInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.invalidateInventoryData();\n\n        expect(mockInventoryCache.invalidateInventoryData).toHaveBeenCalledWith();\n      });\n    });\n\n    describe('Cache Warming', () => {\n      it('should warm popular inventory data', async () => {\n        mockInventoryCache.warmPopularInventoryData.mockResolvedValue(undefined);\n\n        await mockInventoryCache.warmPopularInventoryData();\n\n        expect(mockInventoryCache.warmPopularInventoryData).toHaveBeenCalled();\n      });\n\n      it('should track filter usage for warming strategy', () => {\n        mockInventoryCache.trackFilterUsage.mockReturnValue(undefined);\n\n        mockInventoryCache.trackFilterUsage(mockFilters);\n\n        expect(mockInventoryCache.trackFilterUsage).toHaveBeenCalledWith(mockFilters);\n      });\n    });\n\n    describe('Cache Metrics', () => {\n      it('should collect cache performance metrics', () => {\n        const mockMetrics = {\n          hits: 150,\n          misses: 25,\n          hitRate: 0.857,\n          avgResponseTime: 12.5,\n          totalRequests: 175,\n        };\n\n        mockInventoryCache.getMetrics.mockReturnValue(mockMetrics);\n\n        const metrics = mockInventoryCache.getMetrics();\n\n        expect(metrics).toEqual(mockMetrics);\n        expect(metrics.hitRate).toBeGreaterThan(0.8); // Good hit rate\n        expect(metrics.avgResponseTime).toBeLessThan(50); // Fast response\n      });\n\n      it('should track cache performance over time', () => {\n        const mockTimeSeriesMetrics = {\n          '2024-01-01T00:00:00Z': { hits: 100, misses: 10 },\n          '2024-01-01T01:00:00Z': { hits: 120, misses: 8 },\n          '2024-01-01T02:00:00Z': { hits: 110, misses: 12 },\n        };\n\n        mockInventoryCache.getMetrics.mockReturnValue(mockTimeSeriesMetrics);\n\n        const metrics = mockInventoryCache.getMetrics('timeseries');\n\n        expect(metrics).toEqual(mockTimeSeriesMetrics);\n        expect(Object.keys(metrics)).toHaveLength(3);\n      });\n    });\n  });\n\n  describe('Cache Error Handling', () => {\n    it('should handle cache service initialization errors', () => {\n      const initError = new Error('Cache initialization failed');\n      \n      // Mock Redis constructor to throw error\n      (Redis as jest.MockedClass<typeof Redis>).mockImplementationOnce(() => {\n        throw initError;\n      });\n\n      // Should not crash the application\n      expect(() => {\n        new Redis();\n      }).toThrow('Cache initialization failed');\n    });\n\n    it('should handle serialization errors', async () => {\n      const circularData = { name: 'test' };\n      circularData.self = circularData; // Create circular reference\n\n      const cacheKey = 'test:circular';\n\n      // Should handle JSON.stringify error gracefully\n      await expect(cacheService.set(cacheKey, circularData, 300)).resolves.not.toThrow();\n    });\n\n    it('should handle deserialization errors', async () => {\n      const cacheKey = 'test:invalid:json';\n      const invalidJson = 'invalid json string';\n\n      mockRedis.get.mockResolvedValue(invalidJson);\n\n      const result = await cacheService.get(cacheKey);\n\n      expect(result).toBeNull();\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Cache deserialization error:',\n        expect.any(Error)\n      );\n    });\n\n    it('should handle network timeouts gracefully', async () => {\n      const timeoutError = new Error('Network timeout');\n      timeoutError.name = 'TimeoutError';\n\n      mockRedis.get.mockRejectedValue(timeoutError);\n\n      const result = await cacheService.get('test:timeout');\n\n      expect(result).toBeNull();\n      expect(consoleSpy.warn).toHaveBeenCalledWith(\n        'Cache timeout, falling back to database:',\n        expect.any(Error)\n      );\n    });\n  });\n\n  describe('Cache Performance Tests', () => {\n    it('should handle high-frequency cache operations', async () => {\n      const operations = [];\n      const numOperations = 1000;\n\n      // Simulate high-frequency cache operations\n      for (let i = 0; i < numOperations; i++) {\n        operations.push(\n          cacheService.set(`test:perf:${i}`, { id: i, data: `data-${i}` }, 300)\n        );\n      }\n\n      const startTime = Date.now();\n      await Promise.all(operations);\n      const endTime = Date.now();\n\n      const duration = endTime - startTime;\n      const opsPerSecond = numOperations / (duration / 1000);\n\n      expect(opsPerSecond).toBeGreaterThan(100); // Should handle at least 100 ops/sec\n    });\n\n    it('should handle concurrent cache access', async () => {\n      const cacheKey = 'test:concurrent';\n      const testData = { id: 1, name: 'Concurrent Test' };\n\n      mockRedis.get.mockResolvedValue(JSON.stringify(testData));\n      mockRedis.setex.mockResolvedValue('OK');\n\n      // Mock concurrent operations\n      mockCacheService.get.mockResolvedValue(testData);\n      mockCacheService.set.mockResolvedValue(undefined);\n      \n      // Simulate concurrent reads and writes\n      const concurrentOperations = [\n        mockCacheService.get(cacheKey),\n        mockCacheService.set(cacheKey, testData, 300),\n        mockCacheService.get(cacheKey),\n        mockCacheService.set(cacheKey, { ...testData, updated: true }, 300),\n        mockCacheService.get(cacheKey),\n      ];\n\n      await expect(Promise.all(concurrentOperations)).resolves.not.toThrow();\n    });\n\n    it('should maintain cache consistency under load', async () => {\n      const cacheKey = 'test:consistency';\n      let counter = 0;\n\n      // Mock cache operations to simulate real behavior\n      mockRedis.get.mockImplementation(async () => {\n        return JSON.stringify({ counter });\n      });\n\n      mockRedis.setex.mockImplementation(async (key, ttl, value) => {\n        const data = JSON.parse(value);\n        counter = data.counter;\n        return 'OK';\n      });\n\n      // Mock counter behavior for concurrent updates\n        let testCounter = 0;\n        mockCacheService.get.mockImplementation(() => Promise.resolve({ counter: testCounter }));\n        mockCacheService.set.mockImplementation((key, value) => {\n          testCounter = value.counter;\n          return Promise.resolve(undefined);\n        });\n      \n      // Simulate multiple concurrent updates\n      const updates = [];\n      for (let i = 0; i < 10; i++) {\n        updates.push(\n          (async () => {\n            const current = await mockCacheService.get(cacheKey);\n            const newValue = { counter: (current?.counter || 0) + 1 };\n            await mockCacheService.set(cacheKey, newValue, 300);\n          })()\n        );\n      }\n\n      await Promise.all(updates);\n\n      const finalValue = await mockCacheService.get(cacheKey);\n      expect(finalValue.counter).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Cache Configuration', () => {\n    it('should respect TTL settings', async () => {\n      const shortTTL = 1; // 1 second\n      const longTTL = 3600; // 1 hour\n      const testData = { id: 1, name: 'TTL Test' };\n\n      mockRedis.setex.mockResolvedValue('OK');\n\n      mockCacheService.set.mockResolvedValue(undefined);\n      await mockCacheService.set('test:short', testData, shortTTL);\n      await mockCacheService.set('test:long', testData, longTTL);\n\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        'test:short',\n        shortTTL,\n        JSON.stringify(testData)\n      );\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        'test:long',\n        longTTL,\n        JSON.stringify(testData)\n      );\n    });\n\n    it('should use default TTL when not specified', async () => {\n      const testData = { id: 1, name: 'Default TTL Test' };\n      const defaultTTL = 300; // 5 minutes\n\n      mockRedis.setex.mockResolvedValue('OK');\n\n      mockCacheService.set.mockResolvedValue(undefined);\n      await mockCacheService.set('test:default', testData);\n\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        'test:default',\n        defaultTTL,\n        JSON.stringify(testData)\n      );\n    });\n\n    it('should handle cache size limits', async () => {\n      const largeData = {\n        id: 1,\n        data: 'x'.repeat(1024 * 1024), // 1MB of data\n      };\n\n      mockRedis.setex.mockResolvedValue('OK');\n\n      // Should handle large data without issues\n      mockCacheService.set.mockResolvedValue(undefined);\n      await expect(mockCacheService.set('test:large', largeData, 300)).resolves.not.toThrow();\n    });\n  });\n});"],"names":["jest","mock","Redis","fn","mockImplementation","mockRedis","inventoryCacheService","mockInventoryCache","mockCacheService","get","set","delete","deletePattern","clear","setex","del","keys","flushall","ping","quit","on","connect","disconnect","invalidateInventoryData","generateKey","warmPopularInventoryData","trackFilterUsage","getMetrics","consoleSpy","log","spyOn","console","error","warn","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","it","testData","id","name","cacheKey","memoryCache","Map","JSON","stringify","mockResolvedValue","undefined","result","expect","toEqual","ttl","toBeNull","toHaveBeenCalledWith","mockRejectedValue","Error","resolves","not","toThrow","any","pattern","matchingKeys","length","toHaveBeenCalled","mockInventoryData","items","productId","shopId","quantity","total","page","limit","mockFilters","status","baseKey","expectedKey","mockReturnValue","toBe","filtersWithSpecialChars","search","categoryId","mockMetrics","hits","misses","hitRate","avgResponseTime","totalRequests","metrics","toBeGreaterThan","toBeLessThan","mockTimeSeriesMetrics","Object","toHaveLength","initError","mockImplementationOnce","circularData","self","cacheService","invalidJson","timeoutError","operations","numOperations","i","push","data","startTime","Date","now","Promise","all","endTime","duration","opsPerSecond","concurrentOperations","updated","counter","key","value","parse","testCounter","resolve","updates","current","newValue","finalValue","shortTTL","longTTL","defaultTTL","largeData","repeat"],"mappings":";AA0BA,eAAe;AACfA,KAAKC,IAAI,CAAC,WAAW;IACnB,OAAO;QACLC,OAAOF,KAAKG,EAAE,GAAGC,kBAAkB,CAAC,IAAMC;IAC5C;AACF;AAaAL,KAAKC,IAAI,CAAC,wBAAwB,IAAO,CAAA;QACvCK,uBAAuBC;IACzB,CAAA;;;;yBA9CsB;AAEtB,qBAAqB;AACrB,MAAMC,mBAAmB;IACvBC,KAAKT,KAAKG,EAAE;IACZO,KAAKV,KAAKG,EAAE;IACZQ,QAAQX,KAAKG,EAAE;IACfS,eAAeZ,KAAKG,EAAE;IACtBU,OAAOb,KAAKG,EAAE;AAChB;AAEA,aAAa;AACb,MAAME,YAAY;IAChBI,KAAKT,KAAKG,EAAE;IACZO,KAAKV,KAAKG,EAAE;IACZW,OAAOd,KAAKG,EAAE;IACdY,KAAKf,KAAKG,EAAE;IACZa,MAAMhB,KAAKG,EAAE;IACbc,UAAUjB,KAAKG,EAAE;IACjBe,MAAMlB,KAAKG,EAAE;IACbgB,MAAMnB,KAAKG,EAAE;IACbiB,IAAIpB,KAAKG,EAAE;IACXkB,SAASrB,KAAKG,EAAE;IAChBmB,YAAYtB,KAAKG,EAAE;AACrB;AASA,mCAAmC;AACnC,MAAMI,qBAAqB;IACzBE,KAAKT,KAAKG,EAAE;IACZO,KAAKV,KAAKG,EAAE;IACZoB,yBAAyBvB,KAAKG,EAAE;IAChCqB,aAAaxB,KAAKG,EAAE;IACpBsB,0BAA0BzB,KAAKG,EAAE;IACjCuB,kBAAkB1B,KAAKG,EAAE;IACzBwB,YAAY3B,KAAKG,EAAE;AACrB;AAMA,uBAAuB;AACvB,MAAMyB,aAAa;IACjBC,KAAK7B,KAAK8B,KAAK,CAACC,SAAS,OAAO3B,kBAAkB,CAAC,KAAO;IAC1D4B,OAAOhC,KAAK8B,KAAK,CAACC,SAAS,SAAS3B,kBAAkB,CAAC,KAAO;IAC9D6B,MAAMjC,KAAK8B,KAAK,CAACC,SAAS,QAAQ3B,kBAAkB,CAAC,KAAO;AAC9D;AAEA8B,SAAS,0BAA0B;IACjCC,WAAW;QACTnC,KAAKoC,aAAa;QAClBR,WAAWC,GAAG,CAACQ,SAAS;QACxBT,WAAWI,KAAK,CAACK,SAAS;QAC1BT,WAAWK,IAAI,CAACI,SAAS;IAC3B;IAEAC,SAAS;QACPV,WAAWC,GAAG,CAACU,WAAW;QAC1BX,WAAWI,KAAK,CAACO,WAAW;QAC5BX,WAAWK,IAAI,CAACM,WAAW;IAC7B;IAEAL,SAAS,0BAA0B;QACjCA,SAAS,gBAAgB;YACvBM,GAAG,oDAAoD;gBACrD,MAAMC,WAAW;oBAAEC,IAAI;oBAAGC,MAAM;gBAAY;gBAC5C,MAAMC,WAAW;gBAEjB,6BAA6B;gBAC7B,MAAMC,cAAc,IAAIC;gBACxBD,YAAYnC,GAAG,CAACkC,UAAUG,KAAKC,SAAS,CAACP;gBAEzC,qBAAqB;gBACrBjC,iBAAiBE,GAAG,CAACuC,iBAAiB,CAACC;gBACvC,MAAM1C,iBAAiBE,GAAG,CAACkC,UAAUH,UAAU;gBAE/C,qBAAqB;gBACrBjC,iBAAiBC,GAAG,CAACwC,iBAAiB,CAACR;gBACvC,MAAMU,SAAS,MAAM3C,iBAAiBC,GAAG,CAACmC;gBAE1CQ,OAAOD,QAAQE,OAAO,CAACZ;YACzB;YAEAD,GAAG,kCAAkC;gBACnC,MAAMC,WAAW;oBAAEC,IAAI;oBAAGC,MAAM;gBAAgB;gBAChD,MAAMC,WAAW;gBACjB,MAAMU,MAAM,GAAG,WAAW;gBAE1B9C,iBAAiBE,GAAG,CAACuC,iBAAiB,CAACC;gBACvC,MAAM1C,iBAAiBE,GAAG,CAACkC,UAAUH,UAAUa;gBAE/C,6CAA6C;gBAC7C9C,iBAAiBC,GAAG,CAACwC,iBAAiB,CAAC;gBACvC,MAAME,SAAS,MAAM3C,iBAAiBC,GAAG,CAACmC;gBAC1CQ,OAAOD,QAAQI,QAAQ;YACzB;YAEAf,GAAG,uCAAuC;gBACxChC,iBAAiBC,GAAG,CAACwC,iBAAiB,CAAC;gBACvC,MAAME,SAAS,MAAM3C,iBAAiBC,GAAG,CAAC;gBAC1C2C,OAAOD,QAAQI,QAAQ;YACzB;QACF;QAEArB,SAAS,eAAe;YACtBM,GAAG,6CAA6C;gBAC9C,MAAMC,WAAW;oBAAEC,IAAI;oBAAGC,MAAM;gBAAa;gBAC7C,MAAMC,WAAW;gBACjB,MAAMU,MAAM;gBAEZjD,UAAUS,KAAK,CAACmC,iBAAiB,CAAC;gBAElCzC,iBAAiBE,GAAG,CAACuC,iBAAiB,CAACC;gBACvC,MAAM1C,iBAAiBE,GAAG,CAACkC,UAAUH,UAAUa;gBAE/CF,OAAO/C,UAAUS,KAAK,EAAE0C,oBAAoB,CAC1CZ,UACAU,KACAP,KAAKC,SAAS,CAACP;YAEnB;YAEAD,GAAG,mCAAmC;gBACpC,MAAMC,WAAW;oBAAEC,IAAI;oBAAGC,MAAM;gBAAa;gBAC7C,MAAMC,WAAW;gBAEjBvC,UAAUI,GAAG,CAACwC,iBAAiB,CAACF,KAAKC,SAAS,CAACP;gBAE/CjC,iBAAiBC,GAAG,CAACwC,iBAAiB,CAACR;gBACvC,MAAMU,SAAS,MAAM3C,iBAAiBC,GAAG,CAACmC;gBAE1CQ,OAAO/C,UAAUI,GAAG,EAAE+C,oBAAoB,CAACZ;gBAC3CQ,OAAOD,QAAQE,OAAO,CAACZ;YACzB;YAEAD,GAAG,oDAAoD;gBACrD,MAAMC,WAAW;oBAAEC,IAAI;oBAAGC,MAAM;gBAAa;gBAC7C,MAAMC,WAAW;gBAEjBvC,UAAUS,KAAK,CAAC2C,iBAAiB,CAAC,IAAIC,MAAM;gBAE5C,0DAA0D;gBAC1DlD,iBAAiBE,GAAG,CAACuC,iBAAiB,CAACC;gBACvC,MAAME,OAAO5C,iBAAiBE,GAAG,CAACkC,UAAUH,UAAU,MAAMkB,QAAQ,CAACC,GAAG,CAACC,OAAO;gBAChFT,OAAOxB,WAAWI,KAAK,EAAEwB,oBAAoB,CAC3C,sBACAJ,OAAOU,GAAG,CAACJ;YAEf;YAEAlB,GAAG,6CAA6C;gBAC9C,MAAMI,WAAW;gBAEjBvC,UAAUI,GAAG,CAACgD,iBAAiB,CAAC,IAAIC,MAAM;gBAE1ClD,iBAAiBC,GAAG,CAACwC,iBAAiB,CAAC;gBACvC,MAAME,SAAS,MAAM3C,iBAAiBC,GAAG,CAACmC;gBAE1CQ,OAAOD,QAAQI,QAAQ;gBACvBH,OAAOxB,WAAWI,KAAK,EAAEwB,oBAAoB,CAC3C,sBACAJ,OAAOU,GAAG,CAACJ;YAEf;QACF;QAEAxB,SAAS,sBAAsB;YAC7BM,GAAG,qCAAqC;gBACtC,MAAMI,WAAW;gBAEjBvC,UAAUU,GAAG,CAACkC,iBAAiB,CAAC;gBAEhCzC,iBAAiBG,MAAM,CAACsC,iBAAiB,CAACC;gBAC1C,MAAM1C,iBAAiBG,MAAM,CAACiC;gBAE9BQ,OAAO/C,UAAUU,GAAG,EAAEyC,oBAAoB,CAACZ;YAC7C;YAEAJ,GAAG,gDAAgD;gBACjD,MAAMuB,UAAU;gBAChB,MAAMC,eAAe;oBAAC;oBAAkB;oBAAkB;iBAAiB;gBAE3E3D,UAAUW,IAAI,CAACiC,iBAAiB,CAACe;gBACjC3D,UAAUU,GAAG,CAACkC,iBAAiB,CAACe,aAAaC,MAAM;gBAEnDzD,iBAAiBI,aAAa,CAACqC,iBAAiB,CAACC;gBACjD,MAAM1C,iBAAiBI,aAAa,CAACmD;gBAErCX,OAAO/C,UAAUW,IAAI,EAAEwC,oBAAoB,CAACO;gBAC5CX,OAAO/C,UAAUU,GAAG,EAAEyC,oBAAoB,IAAIQ;YAChD;YAEAxB,GAAG,kDAAkD;gBACnD,MAAMuB,UAAU;gBAEhB1D,UAAUW,IAAI,CAACiC,iBAAiB,CAAC,EAAE;gBAEnCzC,iBAAiBI,aAAa,CAACqC,iBAAiB,CAACC;gBACjD,MAAM1C,iBAAiBI,aAAa,CAACmD;gBAErCX,OAAO/C,UAAUW,IAAI,EAAEwC,oBAAoB,CAACO;gBAC5CX,OAAO/C,UAAUU,GAAG,EAAE6C,GAAG,CAACM,gBAAgB;YAC5C;YAEA1B,GAAG,+BAA+B;gBAChCnC,UAAUY,QAAQ,CAACgC,iBAAiB,CAAC;gBAErCzC,iBAAiBK,KAAK,CAACoC,iBAAiB,CAACC;gBACzC,MAAM1C,iBAAiBK,KAAK;gBAE5BuC,OAAO/C,UAAUY,QAAQ,EAAEiD,gBAAgB;YAC7C;QACF;IACF;IAEAhC,SAAS,2BAA2B;QAClC,MAAMiC,oBAAoB;YACxBC,OAAO;gBACL;oBAAE1B,IAAI;oBAAG2B,WAAW;oBAAGC,QAAQ;oBAASC,UAAU;gBAAI;gBACtD;oBAAE7B,IAAI;oBAAG2B,WAAW;oBAAGC,QAAQ;oBAASC,UAAU;gBAAG;aACtD;YACDC,OAAO;YACPC,MAAM;YACNC,OAAO;QACT;QAEA,MAAMC,cAAc;YAClBL,QAAQ;YACRG,MAAM;YACNC,OAAO;YACPE,QAAQ;QACV;QAEA1C,SAAS,wBAAwB;YAC/BM,GAAG,yCAAyC;gBAC1C,MAAMqC,UAAU;gBAChB,MAAMC,cAAc;gBAEpBvE,mBAAmBiB,WAAW,CAACuD,eAAe,CAACD;gBAE/C,MAAM3B,SAAS5C,mBAAmBiB,WAAW,CAACqD,SAASF;gBAEvDvB,OAAOD,QAAQ6B,IAAI,CAACF;gBACpB1B,OAAO7C,mBAAmBiB,WAAW,EAAEgC,oBAAoB,CAACqB,SAASF;YACvE;YAEAnC,GAAG,iDAAiD;gBAClD,MAAMyC,0BAA0B;oBAC9B,GAAGN,WAAW;oBACdO,QAAQ;gBACV;gBACA,MAAMJ,cAAc;gBAEpBvE,mBAAmBiB,WAAW,CAACuD,eAAe,CAACD;gBAE/C,MAAM3B,SAAS5C,mBAAmBiB,WAAW,CAAC,qBAAqByD;gBAEnE7B,OAAOD,QAAQ6B,IAAI,CAACF;YACtB;QACF;QAEA5C,SAAS,+BAA+B;YACtCM,GAAG,wCAAwC;gBACzC,MAAMI,WAAW;gBACjB,MAAMU,MAAM;gBAEZ/C,mBAAmBG,GAAG,CAACuC,iBAAiB,CAACC;gBAEzC,MAAM3C,mBAAmBG,GAAG,CAACkC,UAAUuB,mBAAmBb;gBAE1DF,OAAO7C,mBAAmBG,GAAG,EAAE8C,oBAAoB,CAACZ,UAAUuB,mBAAmBb;YACnF;YAEAd,GAAG,yCAAyC;gBAC1C,MAAMI,WAAW;gBAEjBrC,mBAAmBE,GAAG,CAACwC,iBAAiB,CAACkB;gBAEzC,MAAMhB,SAAS,MAAM5C,mBAAmBE,GAAG,CAACmC;gBAE5CQ,OAAO7C,mBAAmBE,GAAG,EAAE+C,oBAAoB,CAACZ;gBACpDQ,OAAOD,QAAQE,OAAO,CAACc;YACzB;YAEA3B,GAAG,qCAAqC;gBACtC,MAAMI,WAAW;gBAEjBrC,mBAAmBE,GAAG,CAACwC,iBAAiB,CAAC;gBAEzC,MAAME,SAAS,MAAM5C,mBAAmBE,GAAG,CAACmC;gBAE5CQ,OAAOD,QAAQI,QAAQ;YACzB;QACF;QAEArB,SAAS,iCAAiC;YACxCM,GAAG,+CAA+C;gBAChD,MAAM6B,YAAY;gBAElB9D,mBAAmBgB,uBAAuB,CAAC0B,iBAAiB,CAACC;gBAE7D,MAAM3C,mBAAmBgB,uBAAuB,CAAC8C;gBAEjDjB,OAAO7C,mBAAmBgB,uBAAuB,EAAEiC,oBAAoB,CAACa;YAC1E;YAEA7B,GAAG,4CAA4C;gBAC7C,MAAM8B,SAAS;gBAEf/D,mBAAmBgB,uBAAuB,CAAC0B,iBAAiB,CAACC;gBAE7D,MAAM3C,mBAAmBgB,uBAAuB,CAAC2B,WAAWoB;gBAE5DlB,OAAO7C,mBAAmBgB,uBAAuB,EAAEiC,oBAAoB,CAACN,WAAWoB;YACrF;YAEA9B,GAAG,gDAAgD;gBACjD,MAAM2C,aAAa;gBAEnB5E,mBAAmBgB,uBAAuB,CAAC0B,iBAAiB,CAACC;gBAE7D,MAAM3C,mBAAmBgB,uBAAuB,CAAC2B,WAAWA,WAAWiC;gBAEvE/B,OAAO7C,mBAAmBgB,uBAAuB,EAAEiC,oBAAoB,CAACN,WAAWA,WAAWiC;YAChG;YAEA3C,GAAG,wCAAwC;gBACzCjC,mBAAmBgB,uBAAuB,CAAC0B,iBAAiB,CAACC;gBAE7D,MAAM3C,mBAAmBgB,uBAAuB;gBAEhD6B,OAAO7C,mBAAmBgB,uBAAuB,EAAEiC,oBAAoB;YACzE;QACF;QAEAtB,SAAS,iBAAiB;YACxBM,GAAG,sCAAsC;gBACvCjC,mBAAmBkB,wBAAwB,CAACwB,iBAAiB,CAACC;gBAE9D,MAAM3C,mBAAmBkB,wBAAwB;gBAEjD2B,OAAO7C,mBAAmBkB,wBAAwB,EAAEyC,gBAAgB;YACtE;YAEA1B,GAAG,kDAAkD;gBACnDjC,mBAAmBmB,gBAAgB,CAACqD,eAAe,CAAC7B;gBAEpD3C,mBAAmBmB,gBAAgB,CAACiD;gBAEpCvB,OAAO7C,mBAAmBmB,gBAAgB,EAAE8B,oBAAoB,CAACmB;YACnE;QACF;QAEAzC,SAAS,iBAAiB;YACxBM,GAAG,4CAA4C;gBAC7C,MAAM4C,cAAc;oBAClBC,MAAM;oBACNC,QAAQ;oBACRC,SAAS;oBACTC,iBAAiB;oBACjBC,eAAe;gBACjB;gBAEAlF,mBAAmBoB,UAAU,CAACoD,eAAe,CAACK;gBAE9C,MAAMM,UAAUnF,mBAAmBoB,UAAU;gBAE7CyB,OAAOsC,SAASrC,OAAO,CAAC+B;gBACxBhC,OAAOsC,QAAQH,OAAO,EAAEI,eAAe,CAAC,MAAM,gBAAgB;gBAC9DvC,OAAOsC,QAAQF,eAAe,EAAEI,YAAY,CAAC,KAAK,gBAAgB;YACpE;YAEApD,GAAG,4CAA4C;gBAC7C,MAAMqD,wBAAwB;oBAC5B,wBAAwB;wBAAER,MAAM;wBAAKC,QAAQ;oBAAG;oBAChD,wBAAwB;wBAAED,MAAM;wBAAKC,QAAQ;oBAAE;oBAC/C,wBAAwB;wBAAED,MAAM;wBAAKC,QAAQ;oBAAG;gBAClD;gBAEA/E,mBAAmBoB,UAAU,CAACoD,eAAe,CAACc;gBAE9C,MAAMH,UAAUnF,mBAAmBoB,UAAU,CAAC;gBAE9CyB,OAAOsC,SAASrC,OAAO,CAACwC;gBACxBzC,OAAO0C,OAAO9E,IAAI,CAAC0E,UAAUK,YAAY,CAAC;YAC5C;QACF;IACF;IAEA7D,SAAS,wBAAwB;QAC/BM,GAAG,qDAAqD;YACtD,MAAMwD,YAAY,IAAItC,MAAM;YAE5B,wCAAwC;YACvCxD,cAAK,CAAoC+F,sBAAsB,CAAC;gBAC/D,MAAMD;YACR;YAEA,mCAAmC;YACnC5C,OAAO;gBACL,IAAIlD,cAAK;YACX,GAAG2D,OAAO,CAAC;QACb;QAEArB,GAAG,sCAAsC;YACvC,MAAM0D,eAAe;gBAAEvD,MAAM;YAAO;YACpCuD,aAAaC,IAAI,GAAGD,cAAc,4BAA4B;YAE9D,MAAMtD,WAAW;YAEjB,gDAAgD;YAChD,MAAMQ,OAAOgD,aAAa1F,GAAG,CAACkC,UAAUsD,cAAc,MAAMvC,QAAQ,CAACC,GAAG,CAACC,OAAO;QAClF;QAEArB,GAAG,wCAAwC;YACzC,MAAMI,WAAW;YACjB,MAAMyD,cAAc;YAEpBhG,UAAUI,GAAG,CAACwC,iBAAiB,CAACoD;YAEhC,MAAMlD,SAAS,MAAMiD,aAAa3F,GAAG,CAACmC;YAEtCQ,OAAOD,QAAQI,QAAQ;YACvBH,OAAOxB,WAAWI,KAAK,EAAEwB,oBAAoB,CAC3C,gCACAJ,OAAOU,GAAG,CAACJ;QAEf;QAEAlB,GAAG,6CAA6C;YAC9C,MAAM8D,eAAe,IAAI5C,MAAM;YAC/B4C,aAAa3D,IAAI,GAAG;YAEpBtC,UAAUI,GAAG,CAACgD,iBAAiB,CAAC6C;YAEhC,MAAMnD,SAAS,MAAMiD,aAAa3F,GAAG,CAAC;YAEtC2C,OAAOD,QAAQI,QAAQ;YACvBH,OAAOxB,WAAWK,IAAI,EAAEuB,oBAAoB,CAC1C,4CACAJ,OAAOU,GAAG,CAACJ;QAEf;IACF;IAEAxB,SAAS,2BAA2B;QAClCM,GAAG,iDAAiD;YAClD,MAAM+D,aAAa,EAAE;YACrB,MAAMC,gBAAgB;YAEtB,2CAA2C;YAC3C,IAAK,IAAIC,IAAI,GAAGA,IAAID,eAAeC,IAAK;gBACtCF,WAAWG,IAAI,CACbN,aAAa1F,GAAG,CAAC,CAAC,UAAU,EAAE+F,EAAE,CAAC,EAAE;oBAAE/D,IAAI+D;oBAAGE,MAAM,CAAC,KAAK,EAAEF,EAAE,CAAC;gBAAC,GAAG;YAErE;YAEA,MAAMG,YAAYC,KAAKC,GAAG;YAC1B,MAAMC,QAAQC,GAAG,CAACT;YAClB,MAAMU,UAAUJ,KAAKC,GAAG;YAExB,MAAMI,WAAWD,UAAUL;YAC3B,MAAMO,eAAeX,gBAAiBU,CAAAA,WAAW,IAAG;YAEpD9D,OAAO+D,cAAcxB,eAAe,CAAC,MAAM,qCAAqC;QAClF;QAEAnD,GAAG,yCAAyC;YAC1C,MAAMI,WAAW;YACjB,MAAMH,WAAW;gBAAEC,IAAI;gBAAGC,MAAM;YAAkB;YAElDtC,UAAUI,GAAG,CAACwC,iBAAiB,CAACF,KAAKC,SAAS,CAACP;YAC/CpC,UAAUS,KAAK,CAACmC,iBAAiB,CAAC;YAElC,6BAA6B;YAC7BzC,iBAAiBC,GAAG,CAACwC,iBAAiB,CAACR;YACvCjC,iBAAiBE,GAAG,CAACuC,iBAAiB,CAACC;YAEvC,uCAAuC;YACvC,MAAMkE,uBAAuB;gBAC3B5G,iBAAiBC,GAAG,CAACmC;gBACrBpC,iBAAiBE,GAAG,CAACkC,UAAUH,UAAU;gBACzCjC,iBAAiBC,GAAG,CAACmC;gBACrBpC,iBAAiBE,GAAG,CAACkC,UAAU;oBAAE,GAAGH,QAAQ;oBAAE4E,SAAS;gBAAK,GAAG;gBAC/D7G,iBAAiBC,GAAG,CAACmC;aACtB;YAED,MAAMQ,OAAO2D,QAAQC,GAAG,CAACI,uBAAuBzD,QAAQ,CAACC,GAAG,CAACC,OAAO;QACtE;QAEArB,GAAG,gDAAgD;YACjD,MAAMI,WAAW;YACjB,IAAI0E,UAAU;YAEd,kDAAkD;YAClDjH,UAAUI,GAAG,CAACL,kBAAkB,CAAC;gBAC/B,OAAO2C,KAAKC,SAAS,CAAC;oBAAEsE;gBAAQ;YAClC;YAEAjH,UAAUS,KAAK,CAACV,kBAAkB,CAAC,OAAOmH,KAAKjE,KAAKkE;gBAClD,MAAMb,OAAO5D,KAAK0E,KAAK,CAACD;gBACxBF,UAAUX,KAAKW,OAAO;gBACtB,OAAO;YACT;YAEA,+CAA+C;YAC7C,IAAII,cAAc;YAClBlH,iBAAiBC,GAAG,CAACL,kBAAkB,CAAC,IAAM2G,QAAQY,OAAO,CAAC;oBAAEL,SAASI;gBAAY;YACrFlH,iBAAiBE,GAAG,CAACN,kBAAkB,CAAC,CAACmH,KAAKC;gBAC5CE,cAAcF,MAAMF,OAAO;gBAC3B,OAAOP,QAAQY,OAAO,CAACzE;YACzB;YAEF,uCAAuC;YACvC,MAAM0E,UAAU,EAAE;YAClB,IAAK,IAAInB,IAAI,GAAGA,IAAI,IAAIA,IAAK;gBAC3BmB,QAAQlB,IAAI,CACV,AAAC,CAAA;oBACC,MAAMmB,UAAU,MAAMrH,iBAAiBC,GAAG,CAACmC;oBAC3C,MAAMkF,WAAW;wBAAER,SAAS,AAACO,CAAAA,SAASP,WAAW,CAAA,IAAK;oBAAE;oBACxD,MAAM9G,iBAAiBE,GAAG,CAACkC,UAAUkF,UAAU;gBACjD,CAAA;YAEJ;YAEA,MAAMf,QAAQC,GAAG,CAACY;YAElB,MAAMG,aAAa,MAAMvH,iBAAiBC,GAAG,CAACmC;YAC9CQ,OAAO2E,WAAWT,OAAO,EAAE3B,eAAe,CAAC;QAC7C;IACF;IAEAzD,SAAS,uBAAuB;QAC9BM,GAAG,+BAA+B;YAChC,MAAMwF,WAAW,GAAG,WAAW;YAC/B,MAAMC,UAAU,MAAM,SAAS;YAC/B,MAAMxF,WAAW;gBAAEC,IAAI;gBAAGC,MAAM;YAAW;YAE3CtC,UAAUS,KAAK,CAACmC,iBAAiB,CAAC;YAElCzC,iBAAiBE,GAAG,CAACuC,iBAAiB,CAACC;YACvC,MAAM1C,iBAAiBE,GAAG,CAAC,cAAc+B,UAAUuF;YACnD,MAAMxH,iBAAiBE,GAAG,CAAC,aAAa+B,UAAUwF;YAElD7E,OAAO/C,UAAUS,KAAK,EAAE0C,oBAAoB,CAC1C,cACAwE,UACAjF,KAAKC,SAAS,CAACP;YAEjBW,OAAO/C,UAAUS,KAAK,EAAE0C,oBAAoB,CAC1C,aACAyE,SACAlF,KAAKC,SAAS,CAACP;QAEnB;QAEAD,GAAG,6CAA6C;YAC9C,MAAMC,WAAW;gBAAEC,IAAI;gBAAGC,MAAM;YAAmB;YACnD,MAAMuF,aAAa,KAAK,YAAY;YAEpC7H,UAAUS,KAAK,CAACmC,iBAAiB,CAAC;YAElCzC,iBAAiBE,GAAG,CAACuC,iBAAiB,CAACC;YACvC,MAAM1C,iBAAiBE,GAAG,CAAC,gBAAgB+B;YAE3CW,OAAO/C,UAAUS,KAAK,EAAE0C,oBAAoB,CAC1C,gBACA0E,YACAnF,KAAKC,SAAS,CAACP;QAEnB;QAEAD,GAAG,mCAAmC;YACpC,MAAM2F,YAAY;gBAChBzF,IAAI;gBACJiE,MAAM,IAAIyB,MAAM,CAAC,OAAO;YAC1B;YAEA/H,UAAUS,KAAK,CAACmC,iBAAiB,CAAC;YAElC,0CAA0C;YAC1CzC,iBAAiBE,GAAG,CAACuC,iBAAiB,CAACC;YACvC,MAAME,OAAO5C,iBAAiBE,GAAG,CAAC,cAAcyH,WAAW,MAAMxE,QAAQ,CAACC,GAAG,CAACC,OAAO;QACvF;IACF;AACF"}