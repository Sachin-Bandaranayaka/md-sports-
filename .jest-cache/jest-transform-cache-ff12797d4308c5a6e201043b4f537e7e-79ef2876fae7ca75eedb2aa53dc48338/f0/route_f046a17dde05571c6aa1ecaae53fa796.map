{"version":3,"names":["GET","cov_kcwhvrt63","f","s","fetchShopsData","fetchShopsDataFiltered","startDate","endDate","startOfPeriod","endOfPeriod","b","Date","setHours","now","getFullYear","getMonth","shopsWithInventory","_prisma","safeQuery","where","shopId","id","prisma","shop","findMany","include","InventoryItem","select","quantity","length","success","data","shopIds","map","salesByShop","invoice","groupBy","by","in","createdAt","gte","lte","_sum","total","salesMap","Map","Array","isArray","forEach","sale","set","totalStock","reduce","sum","item","name","sales","get","stock","shopId1","periodDays","startOfMonth","endOfMonth","monthlySalesByShop","shopsToDisplay","filter","_shopMiddleware","ShopAccessControl","withShopAccess","request","context","authResult","_auth","validateTokenPermission","isValid","_server","NextResponse","json","error","message","status","cacheKey","isFiltered","cachedData","_cache","cacheService","console","log","meta","shopFiltered","fromCache","shopsResult","responseData","Error"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/dashboard/shops/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma, safeQuery } from '@/lib/prisma';\nimport { cacheService } from '@/lib/cache';\nimport { ShopAccessControl } from '@/lib/utils/shopMiddleware';\nimport { validateTokenPermission } from '@/lib/auth';\n\n// Default fallback data for shops (can be removed if not needed after refactor)\n// const defaultShopsData = [\n//     { name: 'Colombo Shop', sales: 125000, stock: 450 },\n//     { name: 'Kandy Shop', sales: 98500, stock: 320 },\n//     { name: 'Galle Shop', sales: 75200, stock: 280 },\n//     { name: 'Jaffna Shop', sales: 62800, stock: 210 }\n// ];\n\n// Filtered version of fetchShopsData with date range support\nexport async function fetchShopsDataFiltered(startDate?: string | null, endDate?: string | null) {\n    // Build date filter\n    let startOfPeriod: Date;\n    let endOfPeriod: Date;\n\n    if (startDate && endDate) {\n        startOfPeriod = new Date(startDate);\n        endOfPeriod = new Date(endDate);\n        endOfPeriod.setHours(23, 59, 59, 999);\n    } else {\n        // Default to current month if no dates provided\n        const now = new Date();\n        startOfPeriod = new Date(now.getFullYear(), now.getMonth(), 1);\n        endOfPeriod = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n    }\n\n    // 1. Fetch shops and their inventory with optional shop filtering\n    const shopsWithInventory = await safeQuery(\n        () => {\n            const where = shopId ? { id: shopId } : {};\n            return prisma.shop.findMany({\n                where,\n                include: {\n                    InventoryItem: {\n                        select: { quantity: true } // Only select quantity for stock calculation\n                    }\n                }\n            });\n        },\n        [],\n        'Failed to fetch shops data'\n    );\n\n    if (!shopsWithInventory || shopsWithInventory.length === 0) {\n        return { success: true, data: [] };\n    }\n\n    // 2. Fetch aggregated sales data for all relevant shops in the specified period\n    const shopIds = shopsWithInventory.map(s => s.id);\n    const salesByShop = await safeQuery(\n        () => prisma.invoice.groupBy({\n            by: ['shopId'],\n            where: {\n                shopId: { in: shopIds },\n                createdAt: {\n                    gte: startOfPeriod,\n                    lte: endOfPeriod\n                }\n            },\n            _sum: {\n                total: true\n            }\n        }),\n        [],\n        'Failed to fetch aggregated sales data for shops'\n    );\n\n    // Create a map for easy lookup of sales by shopId\n    const salesMap = new Map();\n    if (Array.isArray(salesByShop)) {\n        salesByShop.forEach(sale => {\n            if (sale.shopId !== null) {\n                salesMap.set(sale.shopId, sale._sum.total || 0);\n            }\n        });\n    }\n\n    // 3. Combine shop data with their sales and stock\n    const data = shopsWithInventory.map(shop => {\n        const totalStock = shop.InventoryItem.reduce(\n            (sum, item) => sum + item.quantity,\n            0\n        );\n        return {\n            name: shop.name,\n            sales: salesMap.get(shop.id) || 0,\n            stock: totalStock\n        };\n    });\n\n    return {\n        success: true,\n        data: data\n    };\n}\n\nexport async function fetchShopsData(shopId?: string | null, periodDays?: number, startDate?: Date, endDate?: Date) {\n    // Get current month's start and end dates\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n\n    // 1. Fetch shops and their inventory with optional shop filtering\n    const shopsWithInventory = await safeQuery(\n        () => {\n            const where = shopId ? { id: shopId } : {};\n            return prisma.shop.findMany({\n                where,\n                include: {\n                    InventoryItem: {\n                        select: { quantity: true } // Only select quantity for stock calculation\n                    }\n                }\n            });\n        },\n        [],\n        'Failed to fetch shops data'\n    );\n\n    if (!shopsWithInventory || shopsWithInventory.length === 0) {\n        return { success: true, data: [] };\n    }\n\n    // 2. Fetch aggregated sales data for all relevant shops in the current month\n    const shopIds = shopsWithInventory.map(s => s.id);\n    const monthlySalesByShop = await safeQuery(\n        () => prisma.invoice.groupBy({\n            by: ['shopId'],\n            where: {\n                shopId: { in: shopIds }, // Filter by the shops we care about\n                createdAt: {\n                    gte: startOfMonth,\n                    lte: endOfMonth\n                },\n                // Optionally, filter by invoice status if only e.g. 'Paid' invoices count as sales\n                // status: 'Paid' \n            },\n            _sum: {\n                total: true\n            }\n        }),\n        [],\n        'Failed to fetch aggregated sales data for shops'\n    );\n\n    // Create a map for easy lookup of sales by shopId\n    const salesMap = new Map();\n    if (Array.isArray(monthlySalesByShop)) {\n        monthlySalesByShop.forEach(sale => {\n            if (sale.shopId !== null) { // Ensure shopId is not null before setting\n                salesMap.set(sale.shopId, sale._sum.total || 0);\n            }\n        });\n    }\n\n    // 3. Combine shop data with their sales and stock\n    const data = shopsWithInventory.map(shop => {\n        const totalStock = shop.InventoryItem.reduce(\n            (sum, item) => sum + item.quantity,\n            0\n        );\n        return {\n            name: shop.name,\n            sales: salesMap.get(shop.id) || 0, // Get sales from the map, default to 0\n            stock: totalStock\n        };\n    });\n\n    // Filter out shops with no inventory (if still desired, or adjust logic)\n    const shopsToDisplay = data.filter(shop => shop.stock > 0 || shop.sales > 0); // show if stock or sales\n\n    return {\n        success: true,\n        data: shopsToDisplay\n    };\n}\n\n// GET: Fetch shop performance data\nexport const GET = ShopAccessControl.withShopAccess(async (request: NextRequest, context) => {\n    try {\n        // Validate token and permissions\n        const authResult = await validateTokenPermission(request, 'view_dashboard');\n        if (!authResult.isValid) {\n            return NextResponse.json({ error: authResult.message }, { status: 401 });\n        }\n\n        // Check cache first with shop context\n        const cacheKey = `dashboard:shops:${context.isFiltered ? context.shopId : 'all'}`;\n        const cachedData = await cacheService.get(cacheKey);\n\n        if (cachedData) {\n            console.log('âœ… Shops data served from cache');\n            return NextResponse.json({\n                ...cachedData,\n                meta: {\n                    shopFiltered: context.isFiltered,\n                    shopId: context.shopId,\n                    fromCache: true\n                }\n            });\n        }\n\n        console.log('ðŸ”„ Fetching fresh shops data with shop context:', {\n            shopId: context.shopId,\n            isFiltered: context.isFiltered\n        });\n        const shopsResult = await fetchShopsData(context.isFiltered ? context.shopId : null);\n\n        // Add metadata to response\n        const responseData = {\n            ...shopsResult,\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId,\n                fromCache: false\n            }\n        };\n\n        // Cache for 5 minutes (shop data changes less frequently)\n        await cacheService.set(cacheKey, responseData, 300);\n        console.log('ðŸ’¾ Shops data cached for 5 minutes');\n\n        return NextResponse.json(responseData);\n    } catch (error) {\n        console.error('Error fetching shop performance data:', error);\n        return NextResponse.json({\n            success: false, // Signal error more clearly\n            data: [],\n            message: error instanceof Error ? error.message : 'Unknown error',\n            meta: {\n                shopFiltered: context.isFiltered,\n                shopId: context.shopId\n            }\n        }, { status: 500 });\n    }\n});"],"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","ignoreList":[]}