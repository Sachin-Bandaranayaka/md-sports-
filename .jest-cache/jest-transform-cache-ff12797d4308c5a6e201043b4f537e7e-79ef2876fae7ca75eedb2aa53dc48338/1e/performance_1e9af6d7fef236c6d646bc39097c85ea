8cc38096684511c993af6c795ac3be9e
/**
 * Performance monitoring utility for tracking function execution times
 * and identifying performance bottlenecks
 */ // Node.js compatible performance timing
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PerformanceMonitor: function() {
        return PerformanceMonitor;
    },
    endTimer: function() {
        return endTimer;
    },
    measureAsync: function() {
        return measureAsync;
    },
    measureSync: function() {
        return measureSync;
    },
    performance: function() {
        return performance;
    },
    performanceMonitor: function() {
        return performanceMonitor;
    },
    startTimer: function() {
        return startTimer;
    }
});
const getPerformanceNow = ()=>{
    if (typeof performance !== "undefined" && performance.now) {
        // Browser environment
        return performance.now();
    } else {
        // Node.js environment
        const hrTime = process.hrtime();
        return hrTime[0] * 1000 + hrTime[1] / 1000000;
    }
};
class PerformanceMonitor {
    /**
   * Start timing a function or operation
   * @param name - Unique identifier for the timer
   * @param metadata - Optional metadata to store with the metric
   */ startTimer(name, metadata) {
        if (!this.enabled) return;
        this.timers.set(name, getPerformanceNow());
        if (metadata) {
            console.log(`⏱️  Started: ${name}`, metadata);
        }
    }
    /**
   * End timing and record the metric
   * @param name - Timer identifier
   * @param metadata - Optional metadata to store with the metric
   * @returns Duration in milliseconds
   */ endTimer(name, metadata) {
        if (!this.enabled) return 0;
        const startTime = this.timers.get(name);
        if (!startTime) {
            console.warn(`⚠️  Timer '${name}' was not started`);
            return 0;
        }
        const duration = getPerformanceNow() - startTime;
        this.timers.delete(name);
        const metric = {
            name,
            duration,
            timestamp: new Date(),
            metadata
        };
        this.metrics.push(metric);
        // Log performance metric
        const color = duration > 1000 ? "\uD83D\uDD34" : duration > 500 ? "\uD83D\uDFE1" : "\uD83D\uDFE2";
        console.log(`${color} Completed: ${name} - ${duration.toFixed(2)}ms`, metadata);
        return duration;
    }
    /**
   * Measure the execution time of an async function
   * @param name - Identifier for the measurement
   * @param fn - Async function to measure
   * @param metadata - Optional metadata
   * @returns Promise with the function result
   */ async measureAsync(name, fn, metadata) {
        if (!this.enabled) return fn();
        this.startTimer(name, metadata);
        try {
            const result = await fn();
            this.endTimer(name, {
                ...metadata,
                success: true
            });
            return result;
        } catch (error) {
            this.endTimer(name, {
                ...metadata,
                success: false,
                error: error instanceof Error ? error.message : "Unknown error"
            });
            throw error;
        }
    }
    /**
   * Measure the execution time of a synchronous function
   * @param name - Identifier for the measurement
   * @param fn - Function to measure
   * @param metadata - Optional metadata
   * @returns Function result
   */ measureSync(name, fn, metadata) {
        if (!this.enabled) return fn();
        this.startTimer(name, metadata);
        try {
            const result = fn();
            this.endTimer(name, {
                ...metadata,
                success: true
            });
            return result;
        } catch (error) {
            this.endTimer(name, {
                ...metadata,
                success: false,
                error: error instanceof Error ? error.message : "Unknown error"
            });
            throw error;
        }
    }
    /**
   * Get all recorded metrics
   * @returns Array of performance metrics
   */ getMetrics() {
        return [
            ...this.metrics
        ];
    }
    /**
   * Get metrics filtered by name pattern
   * @param pattern - String or regex pattern to match
   * @returns Filtered metrics
   */ getMetricsByName(pattern) {
        const regex = typeof pattern === "string" ? new RegExp(pattern) : pattern;
        return this.metrics.filter((metric)=>regex.test(metric.name));
    }
    /**
   * Get performance statistics for a specific metric name
   * @param name - Metric name
   * @returns Statistics object
   */ getStats(name) {
        const metrics = this.metrics.filter((m)=>m.name === name);
        if (metrics.length === 0) {
            return {
                count: 0,
                avg: 0,
                min: 0,
                max: 0,
                total: 0
            };
        }
        const durations = metrics.map((m)=>m.duration);
        const total = durations.reduce((sum, d)=>sum + d, 0);
        return {
            count: metrics.length,
            avg: total / metrics.length,
            min: Math.min(...durations),
            max: Math.max(...durations),
            total
        };
    }
    /**
   * Clear all recorded metrics
   */ clearMetrics() {
        this.metrics = [];
        this.timers.clear();
    }
    /**
   * Generate a performance report
   * @returns Formatted performance report
   */ generateReport() {
        if (this.metrics.length === 0) {
            return "No performance metrics recorded.";
        }
        const uniqueNames = [
            ...new Set(this.metrics.map((m)=>m.name))
        ];
        const report = [
            "\n\uD83D\uDCCA Performance Report",
            "=".repeat(50)
        ];
        uniqueNames.forEach((name)=>{
            const stats = this.getStats(name);
            report.push(`\n🔍 ${name}:`, `   Count: ${stats.count}`, `   Average: ${stats.avg.toFixed(2)}ms`, `   Min: ${stats.min.toFixed(2)}ms`, `   Max: ${stats.max.toFixed(2)}ms`, `   Total: ${stats.total.toFixed(2)}ms`);
        });
        return report.join("\n");
    }
    /**
   * Enable or disable performance monitoring
   * @param enabled - Whether to enable monitoring
   */ setEnabled(enabled) {
        this.enabled = enabled;
    }
    /**
   * Check if performance monitoring is enabled
   * @returns True if enabled
   */ isEnabled() {
        return this.enabled;
    }
    constructor(){
        this.metrics = [];
        this.timers = new Map();
        this.enabled = process.env.NODE_ENV === "development";
    }
}
const performanceMonitor = new PerformanceMonitor();
const startTimer = (name, metadata)=>performanceMonitor.startTimer(name, metadata);
const endTimer = (name, metadata)=>performanceMonitor.endTimer(name, metadata);
const measureAsync = (name, fn, metadata)=>performanceMonitor.measureAsync(name, fn, metadata);
const measureSync = (name, fn, metadata)=>performanceMonitor.measureSync(name, fn, metadata);
const performance = {
    monitor: performanceMonitor,
    startTimer,
    endTimer,
    measureAsync,
    measureSync
};

//# sourceMappingURL=data:application/json;base64,