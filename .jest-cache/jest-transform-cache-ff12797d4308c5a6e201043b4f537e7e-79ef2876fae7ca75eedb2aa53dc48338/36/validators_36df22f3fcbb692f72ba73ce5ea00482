d31b08c48bdd0609596b15ac8334cc29
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    categorySchema: function() {
        return categorySchema;
    },
    customerSchema: function() {
        return customerSchema;
    },
    idSchema: function() {
        return idSchema;
    },
    inventorySchema: function() {
        return inventorySchema;
    },
    invoiceSchema: function() {
        return invoiceSchema;
    },
    loginSchema: function() {
        return loginSchema;
    },
    paginationSchema: function() {
        return paginationSchema;
    },
    paymentSchema: function() {
        return paymentSchema;
    },
    productSchema: function() {
        return productSchema;
    },
    registerSchema: function() {
        return registerSchema;
    },
    searchSchema: function() {
        return searchSchema;
    },
    shopSchema: function() {
        return shopSchema;
    },
    supplierSchema: function() {
        return supplierSchema;
    },
    validateInput: function() {
        return validateInput;
    }
});
const _zod = require("zod");
const loginSchema = _zod.z.object({
    email: _zod.z.string().email("Invalid email address"),
    password: _zod.z.string().min(6, "Password must be at least 6 characters")
});
const registerSchema = _zod.z.object({
    name: _zod.z.string().min(2, "Name must be at least 2 characters"),
    email: _zod.z.string().email("Invalid email address"),
    password: _zod.z.string().min(8, "Password must be at least 8 characters"),
    confirmPassword: _zod.z.string(),
    roleId: _zod.z.number().int().positive(),
    phone: _zod.z.string().optional(),
    shopId: _zod.z.number().int().positive().optional().nullable()
}).refine((data)=>data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: [
        "confirmPassword"
    ]
});
const productSchema = _zod.z.object({
    name: _zod.z.string().min(2, "Product name is required"),
    description: _zod.z.string().optional(),
    price: _zod.z.number().positive("Price must be positive"),
    sku: _zod.z.string().optional().nullable(),
    barcode: _zod.z.string().optional().nullable(),
    categoryId: _zod.z.number().int().positive().optional().nullable(),
    shopId: _zod.z.number().int().positive().optional().nullable()
});
const categorySchema = _zod.z.object({
    name: _zod.z.string().min(2, "Category name is required"),
    description: _zod.z.string().optional(),
    parentId: _zod.z.number().int().positive().optional().nullable()
});
const inventorySchema = _zod.z.object({
    productId: _zod.z.number().int().positive("Product ID is required"),
    shopId: _zod.z.number().int().positive("Shop ID is required"),
    quantity: _zod.z.number().int("Quantity must be an integer"),
    reorderLevel: _zod.z.number().int().optional()
});
const shopSchema = _zod.z.object({
    name: _zod.z.string().min(2, "Shop name is required"),
    location: _zod.z.string().optional(),
    contact_person: _zod.z.string().optional(),
    phone: _zod.z.string().optional(),
    email: _zod.z.string().email("Invalid email address").optional(),
    is_active: _zod.z.boolean().default(true),
    opening_time: _zod.z.string().optional(),
    closing_time: _zod.z.string().optional(),
    manager_id: _zod.z.number().int().positive().optional().nullable(),
    opening_date: _zod.z.string().optional(),
    status: _zod.z.enum([
        "open",
        "closed",
        "renovating",
        "relocating"
    ]).default("open"),
    address_line1: _zod.z.string().optional(),
    address_line2: _zod.z.string().optional(),
    city: _zod.z.string().optional(),
    state: _zod.z.string().optional(),
    postal_code: _zod.z.string().optional(),
    country: _zod.z.string().default("Malaysia"),
    tax_rate: _zod.z.number().min(0).optional()
});
const customerSchema = _zod.z.object({
    name: _zod.z.string().min(2, "Customer name is required"),
    email: _zod.z.string().email("Invalid email address").optional(),
    phone: _zod.z.string().optional(),
    address: _zod.z.string().optional(),
    city: _zod.z.string().optional(),
    postalCode: _zod.z.string().optional(),
    contactPerson: _zod.z.string().optional(),
    contactPersonPhone: _zod.z.string().optional(),
    customerType: _zod.z.string().optional(),
    paymentType: _zod.z.string().optional(),
    creditLimit: _zod.z.number().positive().optional(),
    creditPeriod: _zod.z.number().int().positive().optional(),
    taxId: _zod.z.string().optional(),
    notes: _zod.z.string().optional()
});
const supplierSchema = _zod.z.object({
    name: _zod.z.string().min(2, "Supplier name is required"),
    contactPerson: _zod.z.string().optional(),
    email: _zod.z.string().email("Invalid email address").optional(),
    phone: _zod.z.string().optional(),
    address: _zod.z.string().optional(),
    city: _zod.z.string().optional(),
    notes: _zod.z.string().optional(),
    status: _zod.z.enum([
        "active",
        "inactive"
    ]).default("active")
});
const invoiceSchema = _zod.z.object({
    invoiceNumber: _zod.z.string(),
    customerId: _zod.z.number().int().positive(),
    items: _zod.z.array(_zod.z.object({
        productId: _zod.z.number().int().positive(),
        quantity: _zod.z.number().int().positive(),
        price: _zod.z.number().positive()
    })).min(1, "At least one item is required"),
    status: _zod.z.enum([
        "draft",
        "pending",
        "paid",
        "cancelled"
    ])
});
const paymentSchema = _zod.z.object({
    invoiceId: _zod.z.number().int().positive(),
    customerId: _zod.z.number().int().positive(),
    amount: _zod.z.number().positive("Amount must be positive"),
    paymentMethod: _zod.z.enum([
        "cash",
        "credit_card",
        "bank_transfer",
        "cheque",
        "online"
    ]),
    referenceNumber: _zod.z.string().optional()
});
const validateInput = (schema, data)=>{
    try {
        const validData = schema.parse(data);
        return {
            success: true,
            data: validData
        };
    } catch (error) {
        if (error instanceof _zod.z.ZodError) {
            return {
                success: false,
                errors: error.errors
            };
        }
        throw error;
    }
};
const paginationSchema = _zod.z.object({
    page: _zod.z.coerce.number().int().positive().default(1),
    limit: _zod.z.coerce.number().int().positive().max(100).default(20),
    sortBy: _zod.z.string().optional(),
    sortOrder: _zod.z.enum([
        "asc",
        "desc"
    ]).optional()
});
const searchSchema = _zod.z.object({
    query: _zod.z.string().optional(),
    fields: _zod.z.array(_zod.z.string()).optional()
}).merge(paginationSchema);
const idSchema = _zod.z.object({
    id: _zod.z.coerce.number().int().positive("Invalid ID")
});

//# sourceMappingURL=data:application/json;base64,