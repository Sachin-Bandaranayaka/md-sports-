{"version":3,"names":["ShopComparison","cov_2aw8p4wf81","f","shops","setShops","s","_react","useState","allShops","setAllShops","loading","setLoading","error","setError","startDate","setStartDate","Date","setDate","getDate","toISOString","split","endDate","setEndDate","selectedShopIds","setSelectedShopIds","useEffect","fetchAllShops","response","fetch","ok","b","Error","data","json","success","map","shop","id","name","length","message","err","console","fetchComparisonData","shopIdsParam","join","url","handleShopSelection","shopId","includes","filter","barChartData","inventory","metrics","inventoryCount","sales","revenue","prepareRadarData","metricNames","totalProducts","averageTicketSize","customerCount","metric","forEach","radarData","_jsxruntime","jsx","_MainLayout","default","jsxs","className","onClick","htmlFor","type","value","onChange","e","target","_Button","Button","variant","size","Fragment","_recharts","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","RadarChart","outerRadius","PolarGrid","PolarAngleAxis","PolarRadiusAxis","angle","domain","index","Radar","stroke","fillOpacity","scope","toFixed"],"sources":["/Users/sachin/Documents/md-sports-/src/app/shops/compare/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport MainLayout from '@/components/layout/MainLayout';\nimport { Button } from '@/components/ui/Button';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';\n\n// Define the Shop type for comparison\ntype ShopComparison = {\n    id: number;\n    name: string;\n    location: string;\n    is_active: boolean;\n    metrics: {\n        inventoryCount: number;\n        totalProducts: number;\n        sales: number;\n        revenue: number;\n        averageTicketSize: number;\n        customerCount: number;\n    };\n};\n\nexport default function ShopComparison() {\n    const [shops, setShops] = useState<ShopComparison[]>([]);\n    const [allShops, setAllShops] = useState<{ id: number; name: string }[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n    const [startDate, setStartDate] = useState<string>(\n        new Date(new Date().setDate(new Date().getDate() - 30)).toISOString().split('T')[0]\n    );\n    const [endDate, setEndDate] = useState<string>(new Date().toISOString().split('T')[0]);\n    const [selectedShopIds, setSelectedShopIds] = useState<number[]>([]);\n\n    // Fetch all shops for selection\n    useEffect(() => {\n        const fetchAllShops = async () => {\n            try {\n                const response = await fetch('/api/shops');\n                if (!response.ok) {\n                    throw new Error('Failed to fetch shops');\n                }\n                const data = await response.json();\n                if (data.success) {\n                    setAllShops(data.data.map((shop: any) => ({ id: shop.id, name: shop.name })));\n                    // Select first two shops by default if available\n                    if (data.data.length >= 2) {\n                        setSelectedShopIds([data.data[0].id, data.data[1].id]);\n                    } else if (data.data.length === 1) {\n                        setSelectedShopIds([data.data[0].id]);\n                    }\n                } else {\n                    throw new Error(data.message || 'Failed to fetch shops');\n                }\n            } catch (err) {\n                console.error('Error fetching shops:', err);\n                setError('Failed to load shops. Please try again later.');\n            }\n        };\n\n        fetchAllShops();\n    }, []);\n\n    // Fetch comparison data when selected shops change\n    useEffect(() => {\n        if (selectedShopIds.length > 0) {\n            fetchComparisonData();\n        }\n    }, [selectedShopIds, startDate, endDate]);\n\n    const fetchComparisonData = async () => {\n        try {\n            setLoading(true);\n            const shopIdsParam = selectedShopIds.join(',');\n            const url = `/api/shops/compare?shopIds=${shopIdsParam}&startDate=${startDate}&endDate=${endDate}`;\n\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error('Failed to fetch comparison data');\n            }\n\n            const data = await response.json();\n            if (data.success) {\n                setShops(data.data.shops);\n            } else {\n                throw new Error(data.message || 'Failed to fetch comparison data');\n            }\n            setError(null);\n        } catch (err) {\n            console.error('Error fetching comparison data:', err);\n            setError('Failed to load comparison data. Please try again later.');\n            setShops([]);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Handle shop selection\n    const handleShopSelection = (shopId: number) => {\n        if (selectedShopIds.includes(shopId)) {\n            setSelectedShopIds(selectedShopIds.filter(id => id !== shopId));\n        } else {\n            setSelectedShopIds([...selectedShopIds, shopId]);\n        }\n    };\n\n    // Prepare chart data\n    const barChartData = shops.map(shop => ({\n        name: shop.name,\n        inventory: shop.metrics.inventoryCount,\n        sales: shop.metrics.sales,\n        revenue: shop.metrics.revenue\n    }));\n\n    // Prepare radar chart data\n    const prepareRadarData = () => {\n        const metrics = ['inventoryCount', 'totalProducts', 'sales', 'revenue', 'averageTicketSize', 'customerCount'];\n        const metricNames = {\n            inventoryCount: 'Inventory',\n            totalProducts: 'Products',\n            sales: 'Sales',\n            revenue: 'Revenue',\n            averageTicketSize: 'Avg Ticket',\n            customerCount: 'Customers'\n        };\n\n        return metrics.map(metric => {\n            const data: any = { metric: metricNames[metric as keyof typeof metricNames] };\n            shops.forEach(shop => {\n                data[shop.name] = shop.metrics[metric as keyof typeof shop.metrics];\n            });\n            return data;\n        });\n    };\n\n    const radarData = prepareRadarData();\n\n    return (\n        <MainLayout>\n            <div className=\"space-y-6\">\n                {/* Header */}\n                <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n                    <div>\n                        <h1 className=\"text-2xl font-bold text-gray-900\">Shop Comparison</h1>\n                        <p className=\"text-gray-500\">Compare performance metrics between shops</p>\n                    </div>\n                </div>\n\n                {/* Selection and Filters */}\n                <div className=\"bg-tertiary p-4 rounded-lg shadow-sm border border-gray-200\">\n                    <div className=\"mb-4\">\n                        <h3 className=\"text-md font-medium text-gray-900 mb-2\">Select Shops to Compare</h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                            {allShops.map(shop => (\n                                <button\n                                    key={shop.id}\n                                    onClick={() => handleShopSelection(shop.id)}\n                                    className={`px-3 py-1 rounded-full text-sm ${selectedShopIds.includes(shop.id)\n                                        ? 'bg-primary text-white'\n                                        : 'bg-gray-200 text-gray-700'\n                                        }`}\n                                >\n                                    {shop.name}\n                                </button>\n                            ))}\n                        </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div>\n                            <label htmlFor=\"startDate\" className=\"block text-sm font-medium text-gray-700\">Start Date</label>\n                            <input\n                                type=\"date\"\n                                id=\"startDate\"\n                                value={startDate}\n                                onChange={(e) => setStartDate(e.target.value)}\n                                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm\"\n                            />\n                        </div>\n                        <div>\n                            <label htmlFor=\"endDate\" className=\"block text-sm font-medium text-gray-700\">End Date</label>\n                            <input\n                                type=\"date\"\n                                id=\"endDate\"\n                                value={endDate}\n                                onChange={(e) => setEndDate(e.target.value)}\n                                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm\"\n                            />\n                        </div>\n                        <div className=\"flex items-end\">\n                            <Button variant=\"primary\" size=\"sm\" onClick={fetchComparisonData}>\n                                Compare\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n\n                {loading ? (\n                    <div className=\"bg-tertiary rounded-lg shadow-sm border border-gray-200 p-8 text-center\">\n                        <p>Loading comparison data...</p>\n                    </div>\n                ) : error ? (\n                    <div className=\"bg-tertiary rounded-lg shadow-sm border border-gray-200 p-8 text-center text-red-500\">\n                        <p>{error}</p>\n                    </div>\n                ) : selectedShopIds.length === 0 ? (\n                    <div className=\"bg-tertiary rounded-lg shadow-sm border border-gray-200 p-8 text-center\">\n                        <p>Please select at least one shop to compare.</p>\n                    </div>\n                ) : shops.length === 0 ? (\n                    <div className=\"bg-tertiary rounded-lg shadow-sm border border-gray-200 p-8 text-center\">\n                        <p>No comparison data available for the selected shops and period.</p>\n                    </div>\n                ) : (\n                    <>\n                        {/* Comparison Charts */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            {/* Bar Chart Comparison */}\n                            <div className=\"bg-tertiary rounded-lg shadow-sm border border-gray-200 p-4\">\n                                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Inventory & Sales Comparison</h3>\n                                <div className=\"h-80\">\n                                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                                        <BarChart\n                                            data={barChartData}\n                                            margin={{\n                                                top: 5,\n                                                right: 30,\n                                                left: 20,\n                                                bottom: 5,\n                                            }}\n                                        >\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <XAxis dataKey=\"name\" />\n                                            <YAxis />\n                                            <Tooltip />\n                                            <Legend />\n                                            <Bar dataKey=\"inventory\" fill=\"#8884d8\" name=\"Inventory\" />\n                                            <Bar dataKey=\"sales\" fill=\"#82ca9d\" name=\"Sales\" />\n                                            <Bar dataKey=\"revenue\" fill=\"#ffc658\" name=\"Revenue\" />\n                                        </BarChart>\n                                    </ResponsiveContainer>\n                                </div>\n                            </div>\n\n                            {/* Radar Chart Comparison */}\n                            <div className=\"bg-tertiary rounded-lg shadow-sm border border-gray-200 p-4\">\n                                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance Metrics</h3>\n                                <div className=\"h-80\">\n                                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                                        <RadarChart outerRadius={90} data={radarData}>\n                                            <PolarGrid />\n                                            <PolarAngleAxis dataKey=\"metric\" />\n                                            <PolarRadiusAxis angle={30} domain={[0, 'auto']} />\n                                            {shops.map((shop, index) => (\n                                                <Radar\n                                                    key={shop.id}\n                                                    name={shop.name}\n                                                    dataKey={shop.name}\n                                                    stroke={index === 0 ? '#8884d8' : '#82ca9d'}\n                                                    fill={index === 0 ? '#8884d8' : '#82ca9d'}\n                                                    fillOpacity={0.6}\n                                                />\n                                            ))}\n                                            <Legend />\n                                            <Tooltip />\n                                        </RadarChart>\n                                    </ResponsiveContainer>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/* Comparison Table */}\n                        <div className=\"bg-tertiary rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n                            <div className=\"px-6 py-4 border-b border-gray-200\">\n                                <h3 className=\"text-lg font-semibold text-gray-900\">Detailed Comparison</h3>\n                            </div>\n                            <div className=\"overflow-x-auto\">\n                                <table className=\"min-w-full divide-y divide-gray-200\">\n                                    <thead className=\"bg-gray-50\">\n                                        <tr>\n                                            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                                Metric\n                                            </th>\n                                            {shops.map(shop => (\n                                                <th key={shop.id} scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                                    {shop.name}\n                                                </th>\n                                            ))}\n                                        </tr>\n                                    </thead>\n                                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                                        <tr>\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Inventory Count</td>\n                                            {shops.map(shop => (\n                                                <td key={`${shop.id}-inventory`} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                                    {shop.metrics.inventoryCount}\n                                                </td>\n                                            ))}\n                                        </tr>\n                                        <tr>\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Total Products</td>\n                                            {shops.map(shop => (\n                                                <td key={`${shop.id}-products`} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                                    {shop.metrics.totalProducts}\n                                                </td>\n                                            ))}\n                                        </tr>\n                                        <tr>\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Sales</td>\n                                            {shops.map(shop => (\n                                                <td key={`${shop.id}-sales`} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                                    {shop.metrics.sales}\n                                                </td>\n                                            ))}\n                                        </tr>\n                                        <tr>\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Revenue</td>\n                                            {shops.map(shop => (\n                                                <td key={`${shop.id}-revenue`} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                                    Rs. {shop.metrics.revenue.toFixed(2)}\n                                                </td>\n                                            ))}\n                                        </tr>\n                                        <tr>\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Avg Ticket Size</td>\n                                            {shops.map(shop => (\n                                                <td key={`${shop.id}-ticket`} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                                    Rs. {shop.metrics.averageTicketSize.toFixed(2)}\n                                                </td>\n                                            ))}\n                                        </tr>\n                                        <tr>\n                                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">Customer Count</td>\n                                            {shops.map(shop => (\n                                                <td key={`${shop.id}-customers`} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                                    {shop.metrics.customerCount}\n                                                </td>\n                                            ))}\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </>\n                )}\n            </div>\n        </MainLayout>\n    );\n} "],"mappingsuBA;;;;;;WAAwBA,cAAA;;;;;;;;kCArBY;;;wEACb;;;kCACA;;;kCACyI;;;;;;;;;;;;;;;AAkBjJ,SAASA,eAAA;EAAA;EAAAC,cAAA,GAAAC,CAAA;EACpB,MAAM,CAACC,KAAA,EAAOC,QAAA,CAAS;EAAA;EAAA,CAAAH,cAAA,GAAAI,CAAA,OAAG,IAAAC,MAAA,CAAAC,QAAQ,EAAmB,EAAE;EACvD,MAAM,CAACC,QAAA,EAAUC,WAAA,CAAY;EAAA;EAAA,CAAAR,cAAA,GAAAI,CAAA,QAAG,IAAAC,MAAA,CAAAC,QAAQ,EAAiC,EAAE;EAC3E,MAAM,CAACG,OAAA,EAASC,UAAA,CAAW;EAAA;EAAA,CAAAV,cAAA,GAAAI,CAAA,QAAG,IAAAC,MAAA,CAAAC,QAAQ,EAAU;EAChD,MAAM,CAACK,KAAA,EAAOC,QAAA,CAAS;EAAA;EAAA,CAAAZ,cAAA,GAAAI,CAAA,QAAG,IAAAC,MAAA,CAAAC,QAAQ,EAAgB;EAClD,MAAM,CAACO,SAAA,EAAWC,YAAA,CAAa;EAAA;EAAA,CAAAd,cAAA,GAAAI,CAAA,QAAG,IAAAC,MAAA,CAAAC,QAAQ,EACtC,IAAIS,IAAA,CAAK,IAAIA,IAAA,GAAOC,OAAO,CAAC,IAAID,IAAA,GAAOE,OAAO,KAAK,KAAKC,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE;EAEvF,MAAM,CAACC,OAAA,EAASC,UAAA,CAAW;EAAA;EAAA,CAAArB,cAAA,GAAAI,CAAA,QAAG,IAAAC,MAAA,CAAAC,QAAQ,EAAS,IAAIS,IAAA,GAAOG,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE;EACrF,MAAM,CAACG,eAAA,EAAiBC,kBAAA,CAAmB;EAAA;EAAA,CAAAvB,cAAA,GAAAI,CAAA,QAAG,IAAAC,MAAA,CAAAC,QAAQ,EAAW,EAAE;EAEnE;EAAA;EAAAN,cAAA,GAAAI,CAAA;EACA,IAAAC,MAAA,CAAAmB,SAAS,EAAC;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAI,CAAA;IACN,MAAMqB,aAAA,GAAgB,MAAAA,CAAA;MAAA;MAAAzB,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAI,CAAA;MAClB,IAAI;QACA,MAAMsB,QAAA;QAAA;QAAA,CAAA1B,cAAA,GAAAI,CAAA,QAAW,MAAMuB,KAAA,CAAM;QAAA;QAAA3B,cAAA,GAAAI,CAAA;QAC7B,IAAI,CAACsB,QAAA,CAASE,EAAE,EAAE;UAAA;UAAA5B,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAI,CAAA;UACd,MAAM,IAAI0B,KAAA,CAAM;QACpB;QAAA;QAAA;UAAA9B,cAAA,GAAA6B,CAAA;QAAA;QACA,MAAME,IAAA;QAAA;QAAA,CAAA/B,cAAA,GAAAI,CAAA,QAAO,MAAMsB,QAAA,CAASM,IAAI;QAAA;QAAAhC,cAAA,GAAAI,CAAA;QAChC,IAAI2B,IAAA,CAAKE,OAAO,EAAE;UAAA;UAAAjC,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAI,CAAA;UACdI,WAAA,CAAYuB,IAAA,CAAKA,IAAI,CAACG,GAAG,CAAEC,IAAA,IAAe;YAAA;YAAAnC,cAAA,GAAAC,CAAA;YAAAD,cAAA,GAAAI,CAAA;YAAA;cAAEgC,EAAA,EAAID,IAAA,CAAKC,EAAE;cAAEC,IAAA,EAAMF,IAAA,CAAKE;YAAK;UAAA;UACzE;UAAA;UAAArC,cAAA,GAAAI,CAAA;UACA,IAAI2B,IAAA,CAAKA,IAAI,CAACO,MAAM,IAAI,GAAG;YAAA;YAAAtC,cAAA,GAAA6B,CAAA;YAAA7B,cAAA,GAAAI,CAAA;YACvBmB,kBAAA,CAAmB,CAACQ,IAAA,CAAKA,IAAI,CAAC,EAAE,CAACK,EAAE,EAAEL,IAAA,CAAKA,IAAI,CAAC,EAAE,CAACK,EAAE,CAAC;UACzD,OAAO;YAAA;YAAApC,cAAA,GAAA6B,CAAA;YAAA7B,cAAA,GAAAI,CAAA;YAAA,IAAI2B,IAAA,CAAKA,IAAI,CAACO,MAAM,KAAK,GAAG;cAAA;cAAAtC,cAAA,GAAA6B,CAAA;cAAA7B,cAAA,GAAAI,CAAA;cAC/BmB,kBAAA,CAAmB,CAACQ,IAAA,CAAKA,IAAI,CAAC,EAAE,CAACK,EAAE,CAAC;YACxC;YAAA;YAAA;cAAApC,cAAA,GAAA6B,CAAA;YAAA;UAAA;QACJ,OAAO;UAAA;UAAA7B,cAAA,GAAA6B,CAAA;UAAA7B,cAAA,GAAAI,CAAA;UACH,MAAM,IAAI0B,KAAA;UAAM;UAAA,CAAA9B,cAAA,GAAA6B,CAAA,UAAAE,IAAA,CAAKQ,OAAO;UAAA;UAAA,CAAAvC,cAAA,GAAA6B,CAAA,UAAI;QACpC;MACJ,EAAE,OAAOW,GAAA,EAAK;QAAA;QAAAxC,cAAA,GAAAI,CAAA;QACVqC,OAAA,CAAQ9B,KAAK,CAAC,yBAAyB6B,GAAA;QAAA;QAAAxC,cAAA,GAAAI,CAAA;QACvCQ,QAAA,CAAS;MACb;IACJ;IAAA;IAAAZ,cAAA,GAAAI,CAAA;IAEAqB,aAAA;EACJ,GAAG,EAAE;EAEL;EAAA;EAAAzB,cAAA,GAAAI,CAAA;EACA,IAAAC,MAAA,CAAAmB,SAAS,EAAC;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAI,CAAA;IACN,IAAIkB,eAAA,CAAgBgB,MAAM,GAAG,GAAG;MAAA;MAAAtC,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAI,CAAA;MAC5BsC,mBAAA;IACJ;IAAA;IAAA;MAAA1C,cAAA,GAAA6B,CAAA;IAAA;EACJ,GAAG,CAACP,eAAA,EAAiBT,SAAA,EAAWO,OAAA,CAAQ;EAAA;EAAApB,cAAA,GAAAI,CAAA;EAExC,MAAMsC,mBAAA,GAAsB,MAAAA,CAAA;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAI,CAAA;IACxB,IAAI;MAAA;MAAAJ,cAAA,GAAAI,CAAA;MACAM,UAAA,CAAW;MACX,MAAMiC,YAAA;MAAA;MAAA,CAAA3C,cAAA,GAAAI,CAAA,QAAekB,eAAA,CAAgBsB,IAAI,CAAC;MAC1C,MAAMC,GAAA;MAAA;MAAA,CAAA7C,cAAA,GAAAI,CAAA,QAAM,8BAA8BuC,YAAA,cAA0B9B,SAAA,YAAqBO,OAAA,EAAS;MAElG,MAAMM,QAAA;MAAA;MAAA,CAAA1B,cAAA,GAAAI,CAAA,QAAW,MAAMuB,KAAA,CAAMkB,GAAA;MAAA;MAAA7C,cAAA,GAAAI,CAAA;MAC7B,IAAI,CAACsB,QAAA,CAASE,EAAE,EAAE;QAAA;QAAA5B,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAI,CAAA;QACd,MAAM,IAAI0B,KAAA,CAAM;MACpB;MAAA;MAAA;QAAA9B,cAAA,GAAA6B,CAAA;MAAA;MAEA,MAAME,IAAA;MAAA;MAAA,CAAA/B,cAAA,GAAAI,CAAA,QAAO,MAAMsB,QAAA,CAASM,IAAI;MAAA;MAAAhC,cAAA,GAAAI,CAAA;MAChC,IAAI2B,IAAA,CAAKE,OAAO,EAAE;QAAA;QAAAjC,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAI,CAAA;QACdD,QAAA,CAAS4B,IAAA,CAAKA,IAAI,CAAC7B,KAAK;MAC5B,OAAO;QAAA;QAAAF,cAAA,GAAA6B,CAAA;QAAA7B,cAAA,GAAAI,CAAA;QACH,MAAM,IAAI0B,KAAA;QAAM;QAAA,CAAA9B,cAAA,GAAA6B,CAAA,WAAAE,IAAA,CAAKQ,OAAO;QAAA;QAAA,CAAAvC,cAAA,GAAA6B,CAAA,WAAI;MACpC;MAAA;MAAA7B,cAAA,GAAAI,CAAA;MACAQ,QAAA,CAAS;IACb,EAAE,OAAO4B,GAAA,EAAK;MAAA;MAAAxC,cAAA,GAAAI,CAAA;MACVqC,OAAA,CAAQ9B,KAAK,CAAC,mCAAmC6B,GAAA;MAAA;MAAAxC,cAAA,GAAAI,CAAA;MACjDQ,QAAA,CAAS;MAAA;MAAAZ,cAAA,GAAAI,CAAA;MACTD,QAAA,CAAS,EAAE;IACf,UAAU;MAAA;MAAAH,cAAA,GAAAI,CAAA;MACNM,UAAA,CAAW;IACf;EACJ;EAEA;EAAA;EAAAV,cAAA,GAAAI,CAAA;EACA,MAAM0C,mBAAA,GAAuBC,MAAA;IAAA;IAAA/C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAI,CAAA;IACzB,IAAIkB,eAAA,CAAgB0B,QAAQ,CAACD,MAAA,GAAS;MAAA;MAAA/C,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAI,CAAA;MAClCmB,kBAAA,CAAmBD,eAAA,CAAgB2B,MAAM,CAACb,EAAA,IAAM;QAAA;QAAApC,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAI,CAAA;QAAA,OAAAgC,EAAA,KAAOW,MAAA;MAAA;IAC3D,OAAO;MAAA;MAAA/C,cAAA,GAAA6B,CAAA;MAAA7B,cAAA,GAAAI,CAAA;MACHmB,kBAAA,CAAmB,C,GAAID,eAAA,EAAiByB,MAAA,CAAO;IACnD;EACJ;EAEA;EACA,MAAMG,YAAA;EAAA;EAAA,CAAAlD,cAAA,GAAAI,CAAA,QAAeF,KAAA,CAAMgC,GAAG,CAACC,IAAA,IAAS;IAAA;IAAAnC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAI,CAAA;IAAA;MACpCiC,IAAA,EAAMF,IAAA,CAAKE,IAAI;MACfc,SAAA,EAAWhB,IAAA,CAAKiB,OAAO,CAACC,cAAc;MACtCC,KAAA,EAAOnB,IAAA,CAAKiB,OAAO,CAACE,KAAK;MACzBC,OAAA,EAASpB,IAAA,CAAKiB,OAAO,CAACG;IAC1B;EAAA;EAEA;EAAA;EAAAvD,cAAA,GAAAI,CAAA;EACA,MAAMoD,gBAAA,GAAmBA,CAAA;IAAA;IAAAxD,cAAA,GAAAC,CAAA;IACrB,MAAMmD,OAAA;IAAA;IAAA,CAAApD,cAAA,GAAAI,CAAA,QAAU,CAAC,kBAAkB,iBAAiB,SAAS,WAAW,qBAAqB,gBAAgB;IAC7G,MAAMqD,WAAA;IAAA;IAAA,CAAAzD,cAAA,GAAAI,CAAA,QAAc;MAChBiD,cAAA,EAAgB;MAChBK,aAAA,EAAe;MACfJ,KAAA,EAAO;MACPC,OAAA,EAAS;MACTI,iBAAA,EAAmB;MACnBC,aAAA,EAAe;IACnB;IAAA;IAAA5D,cAAA,GAAAI,CAAA;IAEA,OAAOgD,OAAA,CAAQlB,GAAG,CAAC2B,MAAA;MAAA;MAAA7D,cAAA,GAAAC,CAAA;MACf,MAAM8B,IAAA;MAAA;MAAA,CAAA/B,cAAA,GAAAI,CAAA,QAAY;QAAEyD,MAAA,EAAQJ,WAAW,CAACI,MAAA;MAAoC;MAAA;MAAA7D,cAAA,GAAAI,CAAA;MAC5EF,KAAA,CAAM4D,OAAO,CAAC3B,IAAA;QAAA;QAAAnC,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAI,CAAA;QACV2B,IAAI,CAACI,IAAA,CAAKE,IAAI,CAAC,GAAGF,IAAA,CAAKiB,OAAO,CAACS,MAAA,CAAoC;MACvE;MAAA;MAAA7D,cAAA,GAAAI,CAAA;MACA,OAAO2B,IAAA;IACX;EACJ;EAEA,MAAMgC,SAAA;EAAA;EAAA,CAAA/D,cAAA,GAAAI,CAAA,QAAYoD,gBAAA;EAAA;EAAAxD,cAAA,GAAAI,CAAA;EAElB,oBACI,IAAA4D,WAAA,CAAAC,GAAA,EAACC,WAAA,CAAAC,OAAU;cACP,iBAAAH,WAAA,CAAAI,IAAA,EAAC;MAAIC,SAAA,EAAU;8BAEX,IAAAL,WAAA,CAAAC,GAAA,EAAC;QAAII,SAAA,EAAU;kBACX,iBAAAL,WAAA,CAAAI,IAAA,EAAC;kCACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;YAAGI,SAAA,EAAU;sBAAmC;2BACjD,IAAAL,WAAA,CAAAC,GAAA,EAAC;YAAEI,SAAA,EAAU;sBAAgB;;;uBAKrC,IAAAL,WAAA,CAAAI,IAAA,EAAC;QAAIC,SAAA,EAAU;gCACX,IAAAL,WAAA,CAAAI,IAAA,EAAC;UAAIC,SAAA,EAAU;kCACX,IAAAL,WAAA,CAAAC,GAAA,EAAC;YAAGI,SAAA,EAAU;sBAAyC;2BACvD,IAAAL,WAAA,CAAAC,GAAA,EAAC;YAAII,SAAA,EAAU;sBACV9D,QAAA,CAAS2B,GAAG,CAACC,IAAA,IACV;cAAA;cAAAnC,cAAA,GAAAC,CAAA;cAAAD,cAAA,GAAAI,CAAA;cAAA,OADU,aACV,IAAA4D,WAAA,CAAAC,GAAA,EAAC;gBAEGK,OAAA,EAASA,CAAA,KAAM;kBAAA;kBAAAtE,cAAA,GAAAC,CAAA;kBAAAD,cAAA,GAAAI,CAAA;kBAAA,OAAA0C,mBAAA,CAAoBX,IAAA,CAAKC,EAAE;gBAAA;gBAC1CiC,SAAA,EAAW,kCAAkC/C,eAAA,CAAgB0B,QAAQ,CAACb,IAAA,CAAKC,EAAE;gBAAA;gBAAA,CAAApC,cAAA,GAAA6B,CAAA,WACvE;gBAAA;gBAAA,CAAA7B,cAAA,GAAA6B,CAAA,WACA,8BACA;0BAELM,IAAA,CAAKE;iBAPDF,IAAA,CAAKC,EAAE;YAAA;;yBAa5B,IAAA4B,WAAA,CAAAI,IAAA,EAAC;UAAIC,SAAA,EAAU;kCACX,IAAAL,WAAA,CAAAI,IAAA,EAAC;oCACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;cAAMM,OAAA,EAAQ;cAAYF,SAAA,EAAU;wBAA0C;6BAC/E,IAAAL,WAAA,CAAAC,GAAA,EAAC;cACGO,IAAA,EAAK;cACLpC,EAAA,EAAG;cACHqC,KAAA,EAAO5D,SAAA;cACP6D,QAAA,EAAWC,CAAA,IAAM;gBAAA;gBAAA3E,cAAA,GAAAC,CAAA;gBAAAD,cAAA,GAAAI,CAAA;gBAAA,OAAAU,YAAA,CAAa6D,CAAA,CAAEC,MAAM,CAACH,KAAK;cAAA;cAC5CJ,SAAA,EAAU;;2BAGlB,IAAAL,WAAA,CAAAI,IAAA,EAAC;oCACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;cAAMM,OAAA,EAAQ;cAAUF,SAAA,EAAU;wBAA0C;6BAC7E,IAAAL,WAAA,CAAAC,GAAA,EAAC;cACGO,IAAA,EAAK;cACLpC,EAAA,EAAG;cACHqC,KAAA,EAAOrD,OAAA;cACPsD,QAAA,EAAWC,CAAA,IAAM;gBAAA;gBAAA3E,cAAA,GAAAC,CAAA;gBAAAD,cAAA,GAAAI,CAAA;gBAAA,OAAAiB,UAAA,CAAWsD,CAAA,CAAEC,MAAM,CAACH,KAAK;cAAA;cAC1CJ,SAAA,EAAU;;2BAGlB,IAAAL,WAAA,CAAAC,GAAA,EAAC;YAAII,SAAA,EAAU;sBACX,iBAAAL,WAAA,CAAAC,GAAA,EAACY,OAAA,CAAAC,MAAM;cAACC,OAAA,EAAQ;cAAUC,IAAA,EAAK;cAAKV,OAAA,EAAS5B,mBAAA;wBAAqB;;;;UAO7EjC,OAAA;MAAA;MAAA,cAAAT,cAAA,GAAA6B,CAAA,WACG,IAAAmC,WAAA,CAAAC,GAAA,EAAC;QAAII,SAAA,EAAU;kBACX,iBAAAL,WAAA,CAAAC,GAAA,EAAC;oBAAE;;;;oCAEPtD,KAAA;MAAA;MAAA,cAAAX,cAAA,GAAA6B,CAAA,WACA,IAAAmC,WAAA,CAAAC,GAAA,EAAC;QAAII,SAAA,EAAU;kBACX,iBAAAL,WAAA,CAAAC,GAAA,EAAC;oBAAGtD;;;;oCAERW,eAAA,CAAgBgB,MAAM,KAAK;MAAA;MAAA,cAAAtC,cAAA,GAAA6B,CAAA,WAC3B,IAAAmC,WAAA,CAAAC,GAAA,EAAC;QAAII,SAAA,EAAU;kBACX,iBAAAL,WAAA,CAAAC,GAAA,EAAC;oBAAE;;;;oCAEP/D,KAAA,CAAMoC,MAAM,KAAK;MAAA;MAAA,cAAAtC,cAAA,GAAA6B,CAAA,WACjB,IAAAmC,WAAA,CAAAC,GAAA,EAAC;QAAII,SAAA,EAAU;kBACX,iBAAAL,WAAA,CAAAC,GAAA,EAAC;oBAAE;;;;iDAGP,IAAAD,WAAA,CAAAI,IAAA,EAAAJ,WAAA,CAAAiB,QAAA;gCAEI,IAAAjB,WAAA,CAAAI,IAAA,EAAC;UAAIC,SAAA,EAAU;kCAEX,IAAAL,WAAA,CAAAI,IAAA,EAAC;YAAIC,SAAA,EAAU;oCACX,IAAAL,WAAA,CAAAC,GAAA,EAAC;cAAGI,SAAA,EAAU;wBAA2C;6BACzD,IAAAL,WAAA,CAAAC,GAAA,EAAC;cAAII,SAAA,EAAU;wBACX,iBAAAL,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAC,mBAAmB;gBAACC,KAAA,EAAM;gBAAOC,MAAA,EAAO;0BACrC,iBAAArB,WAAA,CAAAI,IAAA,EAACc,SAAA,CAAAI,QAAQ;kBACLvD,IAAA,EAAMmB,YAAA;kBACNqC,MAAA,EAAQ;oBACJC,GAAA,EAAK;oBACLC,KAAA,EAAO;oBACPC,IAAA,EAAM;oBACNC,MAAA,EAAQ;kBACZ;0CAEA,IAAA3B,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAU,aAAa;oBAACC,eAAA,EAAgB;mCAC/B,IAAA7B,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAY,KAAK;oBAACC,OAAA,EAAQ;mCACf,IAAA/B,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAc,KAAK,O,aACN,IAAAhC,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAe,OAAO,O,aACR,IAAAjC,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAgB,MAAM,O,aACP,IAAAlC,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAiB,GAAG;oBAACJ,OAAA,EAAQ;oBAAYK,IAAA,EAAK;oBAAU/D,IAAA,EAAK;mCAC7C,IAAA2B,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAiB,GAAG;oBAACJ,OAAA,EAAQ;oBAAQK,IAAA,EAAK;oBAAU/D,IAAA,EAAK;mCACzC,IAAA2B,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAiB,GAAG;oBAACJ,OAAA,EAAQ;oBAAUK,IAAA,EAAK;oBAAU/D,IAAA,EAAK;;;;;2BAO3D,IAAA2B,WAAA,CAAAI,IAAA,EAAC;YAAIC,SAAA,EAAU;oCACX,IAAAL,WAAA,CAAAC,GAAA,EAAC;cAAGI,SAAA,EAAU;wBAA2C;6BACzD,IAAAL,WAAA,CAAAC,GAAA,EAAC;cAAII,SAAA,EAAU;wBACX,iBAAAL,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAC,mBAAmB;gBAACC,KAAA,EAAM;gBAAOC,MAAA,EAAO;0BACrC,iBAAArB,WAAA,CAAAI,IAAA,EAACc,SAAA,CAAAmB,UAAU;kBAACC,WAAA,EAAa;kBAAIvE,IAAA,EAAMgC,SAAA;0CAC/B,IAAAC,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAqB,SAAS,O,aACV,IAAAvC,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAsB,cAAc;oBAACT,OAAA,EAAQ;mCACxB,IAAA/B,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAuB,eAAe;oBAACC,KAAA,EAAO;oBAAIC,MAAA,EAAQ,CAAC,GAAG;sBACvCzG,KAAA,CAAMgC,GAAG,CAAC,CAACC,IAAA,EAAMyE,KAAA,KACd;oBAAA;oBAAA5G,cAAA,GAAAC,CAAA;oBAAAD,cAAA,GAAAI,CAAA;oBAAA,OADc,aACd,IAAA4D,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAA2B,KAAK;sBAEFxE,IAAA,EAAMF,IAAA,CAAKE,IAAI;sBACf0D,OAAA,EAAS5D,IAAA,CAAKE,IAAI;sBAClByE,MAAA,EAAQF,KAAA,KAAU;sBAAA;sBAAA,CAAA5G,cAAA,GAAA6B,CAAA,WAAI;sBAAA;sBAAA,CAAA7B,cAAA,GAAA6B,CAAA,WAAY;sBAClCuE,IAAA,EAAMQ,KAAA,KAAU;sBAAA;sBAAA,CAAA5G,cAAA,GAAA6B,CAAA,WAAI;sBAAA;sBAAA,CAAA7B,cAAA,GAAA6B,CAAA,WAAY;sBAChCkF,WAAA,EAAa;uBALR5E,IAAA,CAAKC,EAAE;kBAAA,I,aAQpB,IAAA4B,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAgB,MAAM,O,aACP,IAAAlC,WAAA,CAAAC,GAAA,EAACiB,SAAA,CAAAe,OAAO;;;;;yBAQ5B,IAAAjC,WAAA,CAAAI,IAAA,EAAC;UAAIC,SAAA,EAAU;kCACX,IAAAL,WAAA,CAAAC,GAAA,EAAC;YAAII,SAAA,EAAU;sBACX,iBAAAL,WAAA,CAAAC,GAAA,EAAC;cAAGI,SAAA,EAAU;wBAAsC;;2BAExD,IAAAL,WAAA,CAAAC,GAAA,EAAC;YAAII,SAAA,EAAU;sBACX,iBAAAL,WAAA,CAAAI,IAAA,EAAC;cAAMC,SAAA,EAAU;sCACb,IAAAL,WAAA,CAAAC,GAAA,EAAC;gBAAMI,SAAA,EAAU;0BACb,iBAAAL,WAAA,CAAAI,IAAA,EAAC;0CACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;oBAAG+C,KAAA,EAAM;oBAAM3C,SAAA,EAAU;8BAAiF;sBAG1GnE,KAAA,CAAMgC,GAAG,CAACC,IAAA,IACP;oBAAA;oBAAAnC,cAAA,GAAAC,CAAA;oBAAAD,cAAA,GAAAI,CAAA;oBAAA,OADO,aACP,IAAA4D,WAAA,CAAAC,GAAA,EAAC;sBAAiB+C,KAAA,EAAM;sBAAM3C,SAAA,EAAU;gCACnClC,IAAA,CAAKE;uBADDF,IAAA,CAAKC,EAAE;kBAAA;;+BAM5B,IAAA4B,WAAA,CAAAI,IAAA,EAAC;gBAAMC,SAAA,EAAU;wCACb,IAAAL,WAAA,CAAAI,IAAA,EAAC;0CACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;oBAAGI,SAAA,EAAU;8BAAgE;sBAC7EnE,KAAA,CAAMgC,GAAG,CAACC,IAAA,IACP;oBAAA;oBAAAnC,cAAA,GAAAC,CAAA;oBAAAD,cAAA,GAAAI,CAAA;oBAAA,OADO,aACP,IAAA4D,WAAA,CAAAC,GAAA,EAAC;sBAAgCI,SAAA,EAAU;gCACtClC,IAAA,CAAKiB,OAAO,CAACC;uBADT,GAAGlB,IAAA,CAAKC,EAAE,YAAY;kBAAA;iCAKvC,IAAA4B,WAAA,CAAAI,IAAA,EAAC;0CACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;oBAAGI,SAAA,EAAU;8BAAgE;sBAC7EnE,KAAA,CAAMgC,GAAG,CAACC,IAAA,IACP;oBAAA;oBAAAnC,cAAA,GAAAC,CAAA;oBAAAD,cAAA,GAAAI,CAAA;oBAAA,OADO,aACP,IAAA4D,WAAA,CAAAC,GAAA,EAAC;sBAA+BI,SAAA,EAAU;gCACrClC,IAAA,CAAKiB,OAAO,CAACM;uBADT,GAAGvB,IAAA,CAAKC,EAAE,WAAW;kBAAA;iCAKtC,IAAA4B,WAAA,CAAAI,IAAA,EAAC;0CACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;oBAAGI,SAAA,EAAU;8BAAgE;sBAC7EnE,KAAA,CAAMgC,GAAG,CAACC,IAAA,IACP;oBAAA;oBAAAnC,cAAA,GAAAC,CAAA;oBAAAD,cAAA,GAAAI,CAAA;oBAAA,OADO,aACP,IAAA4D,WAAA,CAAAC,GAAA,EAAC;sBAA4BI,SAAA,EAAU;gCAClClC,IAAA,CAAKiB,OAAO,CAACE;uBADT,GAAGnB,IAAA,CAAKC,EAAE,QAAQ;kBAAA;iCAKnC,IAAA4B,WAAA,CAAAI,IAAA,EAAC;0CACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;oBAAGI,SAAA,EAAU;8BAAgE;sBAC7EnE,KAAA,CAAMgC,GAAG,CAACC,IAAA,IACP;oBAAA;oBAAAnC,cAAA,GAAAC,CAAA;oBAAAD,cAAA,GAAAI,CAAA;oBAAA,OADO,aACP,IAAA4D,WAAA,CAAAI,IAAA,EAAC;sBAA8BC,SAAA,EAAU;iCAAoD,QACpFlC,IAAA,CAAKiB,OAAO,CAACG,OAAO,CAAC0D,OAAO,CAAC;uBAD7B,GAAG9E,IAAA,CAAKC,EAAE,UAAU;kBAAA;iCAKrC,IAAA4B,WAAA,CAAAI,IAAA,EAAC;0CACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;oBAAGI,SAAA,EAAU;8BAAgE;sBAC7EnE,KAAA,CAAMgC,GAAG,CAACC,IAAA,IACP;oBAAA;oBAAAnC,cAAA,GAAAC,CAAA;oBAAAD,cAAA,GAAAI,CAAA;oBAAA,OADO,aACP,IAAA4D,WAAA,CAAAI,IAAA,EAAC;sBAA6BC,SAAA,EAAU;iCAAoD,QACnFlC,IAAA,CAAKiB,OAAO,CAACO,iBAAiB,CAACsD,OAAO,CAAC;uBADvC,GAAG9E,IAAA,CAAKC,EAAE,SAAS;kBAAA;iCAKpC,IAAA4B,WAAA,CAAAI,IAAA,EAAC;0CACG,IAAAJ,WAAA,CAAAC,GAAA,EAAC;oBAAGI,SAAA,EAAU;8BAAgE;sBAC7EnE,KAAA,CAAMgC,GAAG,CAACC,IAAA,IACP;oBAAA;oBAAAnC,cAAA,GAAAC,CAAA;oBAAAD,cAAA,GAAAI,CAAA;oBAAA,OADO,aACP,IAAA4D,WAAA,CAAAC,GAAA,EAAC;sBAAgCI,SAAA,EAAU;gCACtClC,IAAA,CAAKiB,OAAO,CAACQ;uBADT,GAAGzB,IAAA,CAAKC,EAAE,YAAY;kBAAA;;;;;;;;;AAc/E","ignoreList":[]}