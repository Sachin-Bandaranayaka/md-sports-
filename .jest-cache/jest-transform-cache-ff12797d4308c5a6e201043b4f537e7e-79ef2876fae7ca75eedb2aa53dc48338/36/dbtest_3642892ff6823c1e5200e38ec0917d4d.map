{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/db.test.ts"],"sourcesContent":["// Database connection and configuration tests\n\nimport { jest } from '@jest/globals';\n\n// Create mock Prisma operations\nconst createMockPrismaOperations = () => ({\n  findMany: jest.fn(),\n  findUnique: jest.fn(),\n  findFirst: jest.fn(),\n  create: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n  count: jest.fn(),\n  aggregate: jest.fn(),\n  upsert: jest.fn(),\n  deleteMany: jest.fn(),\n  updateMany: jest.fn(),\n});\n\n// Create comprehensive mock Prisma client\nconst mockPrisma = {\n  user: createMockPrismaOperations(),\n  product: createMockPrismaOperations(),\n  customer: createMockPrismaOperations(),\n  invoice: createMockPrismaOperations(),\n  inventoryItem: createMockPrismaOperations(),\n  category: createMockPrismaOperations(),\n  supplier: createMockPrismaOperations(),\n  purchaseInvoice: createMockPrismaOperations(),\n  purchaseInvoiceItem: createMockPrismaOperations(),\n  salesInvoice: createMockPrismaOperations(),\n  salesInvoiceItem: createMockPrismaOperations(),\n  $connect: jest.fn().mockResolvedValue(undefined),\n  $disconnect: jest.fn().mockResolvedValue(undefined),\n  $transaction: jest.fn(),\n  $executeRaw: jest.fn(),\n  $queryRaw: jest.fn(),\n  $on: jest.fn(),\n  $use: jest.fn(),\n};\n\n// Mock the Prisma module\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\n// Mock environment variables\nconst originalEnv = process.env;\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\n// Import after mocking\nimport { db, prisma } from '@/lib/db';\n\ndescribe('Database Library', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('exports', () => {\n    it('should export db as the prisma client', () => {\n      expect(db).toBeDefined();\n      expect(db).toBe(mockPrisma);\n    });\n\n    it('should export prisma client', () => {\n      expect(prisma).toBeDefined();\n      expect(prisma).toBe(mockPrisma);\n    });\n\n    it('should have user methods', () => {\n      expect(db.user).toBeDefined();\n      expect(db.user.findMany).toBeDefined();\n      expect(db.user.findUnique).toBeDefined();\n      expect(db.user.create).toBeDefined();\n      expect(db.user.update).toBeDefined();\n      expect(db.user.delete).toBeDefined();\n    });\n\n    it('should have product methods', () => {\n      expect(db.product).toBeDefined();\n      expect(db.product.findMany).toBeDefined();\n      expect(db.product.findUnique).toBeDefined();\n      expect(db.product.create).toBeDefined();\n      expect(db.product.update).toBeDefined();\n      expect(db.product.delete).toBeDefined();\n    });\n\n    it('should have transaction methods', () => {\n      expect(db.$transaction).toBeDefined();\n      expect(db.$connect).toBeDefined();\n      expect(db.$disconnect).toBeDefined();\n    });\n  });\n\n  describe('prisma export', () => {\n    it('should export prisma as the same client', () => {\n      expect(prisma).toBeDefined();\n      expect(prisma).toBe(mockPrisma);\n      expect(prisma).toBe(db);\n    });\n\n    it('should be importable as default export', async () => {\n      const defaultExport = await import('@/lib/db');\n      expect(defaultExport.default).toBeDefined();\n      expect(defaultExport.default).toBe(db);\n      expect(defaultExport.default).toBe(mockPrisma);\n    });\n  });\n\n  describe('database operations', () => {\n    it('should allow connection', async () => {\n      await expect(db.$connect()).resolves.toBeUndefined();\n      expect(mockPrisma.$connect).toHaveBeenCalled();\n    });\n\n    it('should allow disconnection', async () => {\n      await expect(db.$disconnect()).resolves.toBeUndefined();\n      expect(mockPrisma.$disconnect).toHaveBeenCalled();\n    });\n\n    it('should allow product queries', async () => {\n      const mockProduct = { id: 'product1', name: 'Test Product' };\n      mockPrisma.product.findUnique.mockResolvedValue(mockProduct);\n\n      const result = await db.product.findUnique({ where: { id: 'product1' } });\n      \n      expect(result).toEqual(mockProduct);\n      expect(mockPrisma.product.findUnique).toHaveBeenCalledWith({ where: { id: 'product1' } });\n    });\n\n    it('should allow user operations', async () => {\n      const mockUser = { id: 'user1', email: 'test@example.com' };\n      mockPrisma.user.create.mockResolvedValue(mockUser);\n\n      const result = await db.user.create({ data: { email: 'test@example.com' } });\n      \n      expect(result).toEqual(mockUser);\n      expect(mockPrisma.user.create).toHaveBeenCalledWith({ data: { email: 'test@example.com' } });\n    });\n\n    it('should support transactions', async () => {\n      const mockResult = { success: true };\n      mockPrisma.$transaction.mockResolvedValue(mockResult);\n\n      const transactionFn = jest.fn().mockResolvedValue(mockResult);\n      const result = await db.$transaction(transactionFn);\n      \n      expect(result).toEqual(mockResult);\n      expect(mockPrisma.$transaction).toHaveBeenCalledWith(transactionFn);\n    });\n  });\n\n  describe('error handling', () => {\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it('should handle connection errors', async () => {\n      mockPrisma.$connect.mockRejectedValue(new Error('Database connection failed'));\n      \n      await expect(db.$connect()).rejects.toThrow('Database connection failed');\n    });\n\n    it('should handle query errors', async () => {\n      mockPrisma.user.findUnique.mockRejectedValue(new Error('Query failed'));\n      \n      await expect(db.user.findUnique({ where: { id: 'invalid' } })).rejects.toThrow('Query failed');\n    });\n\n    it('should propagate transaction errors', async () => {\n      mockPrisma.$transaction.mockRejectedValue(new Error('Transaction failed'));\n\n      const transactionFn = jest.fn();\n      await expect(db.$transaction(transactionFn)).rejects.toThrow('Transaction failed');\n    });\n  });\n});"],"names":["createMockPrismaOperations","findMany","jest","fn","findUnique","findFirst","create","update","delete","count","aggregate","upsert","deleteMany","updateMany","mockPrisma","user","product","customer","invoice","inventoryItem","category","supplier","purchaseInvoice","purchaseInvoiceItem","salesInvoice","salesInvoiceItem","$connect","mockResolvedValue","undefined","$disconnect","$transaction","$executeRaw","$queryRaw","$on","$use","mock","__esModule","default","originalEnv","process","env","beforeAll","DATABASE_URL","NODE_ENV","afterAll","describe","beforeEach","clearAllMocks","it","expect","db","toBeDefined","toBe","prisma","defaultExport","resolves","toBeUndefined","toHaveBeenCalled","mockProduct","id","name","result","where","toEqual","toHaveBeenCalledWith","mockUser","email","data","mockResult","success","transactionFn","mockRejectedValue","Error","rejects","toThrow"],"mappings":"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"}