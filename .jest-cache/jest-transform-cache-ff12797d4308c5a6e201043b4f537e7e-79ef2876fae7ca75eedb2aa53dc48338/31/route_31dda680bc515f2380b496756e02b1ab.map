{"version":3,"names":["cov_k799w5447","actualCoverage","s","POST","request","f","data","json","productId","shopId","quantity","b","undefined","_server","NextResponse","success","message","status","productIdNum","parseInt","shopIdNum","quantityNum","isNaN","product","_prisma","prisma","findUnique","where","id","shop","existingInventory","inventoryItem","findFirst","result","previousQuantity","newQuantity","update","updatedAt","Date","create","auditLog","action","entity","entityId","details","JSON","stringify","method","auditError","console","error","Error","String"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/inventory/add/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\n\nexport async function POST(request: NextRequest) {\n    try {\n        const data = await request.json();\n        const { productId, shopId, quantity } = data;\n\n        // Validate required fields\n        if (!productId || !shopId || quantity === undefined) {\n            return NextResponse.json({\n                success: false,\n                message: 'Missing required fields: productId, shopId, and quantity are required'\n            }, { status: 400 });\n        }\n\n        // Validate numeric values\n        const productIdNum = parseInt(productId);\n        const shopIdNum = parseInt(shopId);\n        const quantityNum = parseInt(quantity);\n\n        if (isNaN(productIdNum) || isNaN(shopIdNum) || isNaN(quantityNum)) {\n            return NextResponse.json({\n                success: false,\n                message: 'Invalid data format: productId, shopId, and quantity must be numbers'\n            }, { status: 400 });\n        }\n\n        // Check if product exists\n        const product = await prisma.product.findUnique({\n            where: { id: productIdNum }\n        });\n\n        if (!product) {\n            return NextResponse.json({\n                success: false,\n                message: `Product with ID ${productId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if shop exists\n        const shop = await prisma.shop.findUnique({\n            where: { id: shopIdNum }\n        });\n\n        if (!shop) {\n            return NextResponse.json({\n                success: false,\n                message: `Shop with ID ${shopId} not found`\n            }, { status: 404 });\n        }\n\n        // Check if inventory item exists for this product and shop\n        const existingInventory = await prisma.inventoryItem.findFirst({\n            where: {\n                productId: productIdNum,\n                shopId: shopIdNum\n            }\n        });\n\n        let result;\n        let previousQuantity = 0;\n        let newQuantity = 0;\n\n        if (existingInventory) {\n            // Update existing inventory\n            previousQuantity = existingInventory.quantity;\n            newQuantity = existingInventory.quantity + quantityNum;\n\n            result = await prisma.inventoryItem.update({\n                where: { id: existingInventory.id },\n                data: {\n                    quantity: newQuantity,\n                    updatedAt: new Date()\n                }\n            });\n        } else {\n            // Create new inventory item\n            newQuantity = quantityNum;\n\n            result = await prisma.inventoryItem.create({\n                data: {\n                    productId: productIdNum,\n                    shopId: shopIdNum,\n                    quantity: quantityNum\n                }\n            });\n        }\n\n        // Log this action to audit trail (if implemented)\n        try {\n            await prisma.auditLog.create({\n                data: {\n                    action: 'ADD_INVENTORY',\n                    entity: 'InventoryItem',\n                    entityId: result.id,\n                    details: JSON.stringify({\n                        productId: productIdNum,\n                        shopId: shopIdNum,\n                        quantity: quantityNum,\n                        method: 'Direct Addition'\n                    })\n                }\n            });\n        } catch (auditError) {\n            // Log error but don't fail the request\n            console.error('Error creating audit log:', auditError);\n            // Continue with the request even if audit logging fails\n        }\n\n        // Real-time updates now handled by polling system\n\n        return NextResponse.json({\n            success: true,\n            message: 'Inventory updated successfully',\n            data: result\n        });\n    } catch (error) {\n        console.error('Error adding inventory:', error);\n        return NextResponse.json({\n            success: false,\n            message: 'Failed to add inventory',\n            error: error instanceof Error ? error.message : String(error)\n        }, { status: 500 });\n    }\n}"],"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","ignoreList":[]}