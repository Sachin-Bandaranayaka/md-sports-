{"version":3,"sources":["/Users/sachin/Documents/md-sports-/src/hooks/useAuth.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/navigation';\nimport { hasPermission as checkPermission } from '@/lib/utils/permissions';\nimport { AuthenticatedUser as User } from '@/types/auth';\nimport { setTokenProvider } from '@/utils/api';\n\n// Types\ninterface AuthContextType {\n    user: User | null;\n    accessToken: string | null;\n    isLoading: boolean;\n    isAuthenticated: boolean;\n    login: (email: string, password: string) => Promise<boolean>;\n    logout: () => Promise<void>;\n    hasPermission: (permission: string) => boolean;\n    getUserPermissions: () => string[];\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Create axios instance with interceptors\nconst api = axios.create({\n    baseURL: '/',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Provider component\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [accessToken, setAccessToken] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const router = useRouter();\n\n    // Set up the token provider for the API utility\n    useEffect(() => {\n        setTokenProvider(() => accessToken);\n    }, [accessToken]);\n\n    // Define logout function first to avoid hoisting issues\n    const logout = useCallback(async (): Promise<void> => {\n        setIsLoading(true);\n        setUser(null);\n        setAccessToken(null);\n        try {\n            // Call the backend to invalidate the refresh token and clear cookies\n            await api.post('/api/auth/logout');\n            console.log('Logout successful, server-side session cleared.');\n        } catch (error) {\n            console.error('Logout API call failed:', error);\n            // Still clear client-side, even if server call fails\n        }\n        router.push('/login'); // Redirect to login page\n        setIsLoading(false);\n    }, [router]);\n\n    // Setup axios interceptors for token refresh\n    useEffect(() => {\n        const requestInterceptor = api.interceptors.request.use(\n            (config) => {\n                const currentToken = accessToken;\n                if (currentToken) {\n                    config.headers.Authorization = `Bearer ${currentToken}`;\n                }\n                // CSRF token logic remains unchanged\n                const csrfToken = getCookie('csrfToken');\n                if (csrfToken && config.method !== 'get' && config.method !== 'head') { // Ensure method check is robust\n                    config.headers['X-CSRF-Token'] = csrfToken;\n                }\n                return config;\n            },\n            (error) => Promise.reject(error)\n        );\n\n        const responseInterceptor = api.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n                // Avoid infinite loop: do NOT attempt to refresh if the failed request *is* the refresh endpoint itself\n                const isRefreshEndpoint = originalRequest?.url?.includes('/api/auth/refresh');\n\n                if ((error.response?.status === 401) && !originalRequest._retry && !isRefreshEndpoint) { // Only retry on 401 for token refresh and not already retried, and skip if refresh itself failed\n                    originalRequest._retry = true;\n                    try {\n                        console.log('Access Token expired or invalid, attempting to refresh via /api/auth/refresh...');\n                        // Send an empty object or no body. Relies on httpOnly refreshToken cookie.\n                        // Use api instance to ensure CSRF token is included\n                        const refreshResponse = await api.post('/api/auth/refresh', {}, {\n                            withCredentials: true,\n                            timeout: 10000 // 10 second timeout for refresh\n                        });\n\n                        if (refreshResponse.data.success) {\n                            const newAccessToken = refreshResponse.data.accessToken;\n                            setUser(refreshResponse.data.user);\n                            setAccessToken(newAccessToken);\n\n                            console.log('Token refreshed successfully. New accessToken:', newAccessToken.substring(0, 10) + '...');\n                            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n                            return api(originalRequest);\n                        } else {\n                            console.error('Token refresh explicitly failed by API:', refreshResponse.data.message);\n                            await logout(); // Logout if refresh attempt itself fails\n                            return Promise.reject(error); // Reject with original error\n                        }\n                    } catch (refreshError: any) {\n                        console.error('Full error during token refresh attempt:', refreshError);\n                        \n                        // Be more lenient with network errors during refresh\n                        if (refreshError.code === 'ECONNABORTED' || refreshError.code === 'NETWORK_ERROR' || !refreshError.response) {\n                            console.log('Network error during token refresh, not logging out user');\n                            // Don't logout for network issues - let the user try again\n                            return Promise.reject(error); // Reject with original error, but don't logout\n                        } else if (refreshError.response) {\n                            console.error('Refresh attempt failed with status:', refreshError.response.status, 'data:', refreshError.response.data);\n                            // Only logout for actual authentication failures (401, 403)\n                            if (refreshError.response.status === 401 || refreshError.response.status === 403) {\n                                await logout();\n                            } else {\n                                console.log('Server error during refresh, not logging out user');\n                            }\n                        } else {\n                            await logout(); // Logout for other unexpected errors\n                        }\n                        return Promise.reject(refreshError); // Reject with refresh error\n                    }\n                }\n                return Promise.reject(error);\n            }\n        );\n\n        return () => {\n            api.interceptors.request.eject(requestInterceptor);\n            api.interceptors.response.eject(responseInterceptor);\n        };\n    }, [accessToken, logout]); // Added accessToken and logout to dependency array\n\n    useEffect(() => {\n        const validateAuth = async () => {\n            setIsLoading(true);\n            try {\n                // Don't use localStorage for authentication\n                // Instead, try to validate using the cookie-based refresh token\n                console.log('Validating authentication via refresh token...');\n                \n                try {\n                    // Try to refresh the token using the httpOnly refresh token cookie\n                    const response = await api.post('/api/auth/refresh', {}, {\n                        timeout: 10000, // 10 second timeout\n                    });\n                    \n                    if (response.data.success) {\n                        const userData = response.data.user;\n                        console.log('Auth validation - User data received:', {\n                            id: userData.id,\n                            username: userData.username,\n                            roleName: userData.roleName,\n                            permissions: userData.permissions?.length || 0\n                        });\n                        \n                        setUser(userData);\n                        setAccessToken(response.data.accessToken);\n                        console.log('Authentication validated via refresh token');\n                    } else {\n                        console.log('No valid session found');\n                    }\n                } catch (error: any) {\n                    // Network error during validation\n                    if (error.code === 'ECONNABORTED' || error.code === 'NETWORK_ERROR' || !error.response) {\n                        console.log('Network error during validation, skipping');\n                    } else if (error.response?.status === 401 || error.response?.status === 400) {\n                        console.log('No valid refresh token, user needs to login');\n                        // Clear any cached user data\n                        setUser(null);\n                        setAccessToken(null);\n                    } else {\n                        console.error('Unexpected error during validation:', error);\n                    }\n                }\n            } catch (error) {\n                console.error('Unexpected error in validateAuth:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        validateAuth();\n    }, []); // Empty dependency array as no dependencies are used in this useEffect\n\n    const login = async (email: string, password: string): Promise<boolean> => {\n        setIsLoading(true);\n        try {\n            const response = await axios.post('/api/auth/login', { email, password });\n            if (response.data.success) {\n                const { accessToken: newAccessToken, user: userData } = response.data;\n                setUser(userData);\n                setAccessToken(newAccessToken);\n\n                // The refreshToken should have been set as an httpOnly cookie by the /api/auth/login endpoint\n                console.log('Login successful. AccessToken set. RefreshToken should be in httpOnly cookie.');\n                setIsLoading(false);\n                return true;\n            }\n        } catch (error: any) {\n            console.error('Login failed:', error.response?.data?.message || error.message);\n        }\n        setIsLoading(false);\n        setUser(null);\n        setAccessToken(null);\n        return false;\n    };\n\n    // Check if user has a specific permission\n    const hasPermission = (permission: string): boolean => {\n        if (!user || !user.permissions) return false;\n        return checkPermission(user.permissions, permission);\n    };\n\n    // Get all user permissions\n    const getUserPermissions = (): string[] => {\n        if (!user || !user.permissions) return [];\n        return [...user.permissions];\n    };\n\n    // Helper function to get cookie value\n    const getCookie = (name: string): string | undefined => {\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) return parts.pop()?.split(';').shift();\n        return undefined;\n    };\n\n    const value: AuthContextType = {\n        user,\n        accessToken,\n        isLoading,\n        isAuthenticated: !!user,\n        login,\n        logout,\n        hasPermission,\n        getUserPermissions\n    };\n\n    return (\n        <AuthContext.Provider\n            value={value}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\n// Hook for using the auth context\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\n// Export the axios instance for reuse\nexport { api };"],"names":["AuthProvider","api","useAuth","AuthContext","createContext","undefined","axios","create","baseURL","headers","children","user","setUser","useState","accessToken","setAccessToken","isLoading","setIsLoading","router","useRouter","useEffect","setTokenProvider","logout","useCallback","post","console","log","error","push","requestInterceptor","interceptors","request","use","config","currentToken","Authorization","csrfToken","getCookie","method","Promise","reject","responseInterceptor","response","originalRequest","isRefreshEndpoint","url","includes","status","_retry","refreshResponse","withCredentials","timeout","data","success","newAccessToken","substring","message","refreshError","code","eject","validateAuth","userData","id","username","roleName","permissions","length","login","email","password","hasPermission","permission","checkPermission","getUserPermissions","name","value","document","cookie","parts","split","pop","shift","isAuthenticated","Provider","context","useContext","Error"],"mappings":"AAAA;;;;;;;;;;;;IAiCaA,YAAY;eAAZA;;IAyOJC,GAAG;eAAHA;;IATIC,OAAO;eAAPA;;;;uBA/P0E;8DACrE;4BACQ;6BACuB;qBAEhB;;;;;;AAcjC,iBAAiB;AACjB,MAAMC,4BAAcC,IAAAA,oBAAa,EAA8BC;AAE/D,0CAA0C;AAC1C,MAAMJ,MAAMK,cAAK,CAACC,MAAM,CAAC;IACrBC,SAAS;IACTC,SAAS;QACL,gBAAgB;IACpB;AACJ;AAGO,MAAMT,eAAe,CAAC,EAAEU,QAAQ,EAA2B;IAC9D,MAAM,CAACC,MAAMC,QAAQ,GAAGC,IAAAA,eAAQ,EAAc;IAC9C,MAAM,CAACC,aAAaC,eAAe,GAAGF,IAAAA,eAAQ,EAAgB;IAC9D,MAAM,CAACG,WAAWC,aAAa,GAAGJ,IAAAA,eAAQ,EAAC;IAC3C,MAAMK,SAASC,IAAAA,qBAAS;IAExB,gDAAgD;IAChDC,IAAAA,gBAAS,EAAC;QACNC,IAAAA,qBAAgB,EAAC,IAAMP;IAC3B,GAAG;QAACA;KAAY;IAEhB,wDAAwD;IACxD,MAAMQ,SAASC,IAAAA,kBAAW,EAAC;QACvBN,aAAa;QACbL,QAAQ;QACRG,eAAe;QACf,IAAI;YACA,qEAAqE;YACrE,MAAMd,IAAIuB,IAAI,CAAC;YACfC,QAAQC,GAAG,CAAC;QAChB,EAAE,OAAOC,OAAO;YACZF,QAAQE,KAAK,CAAC,2BAA2BA;QACzC,qDAAqD;QACzD;QACAT,OAAOU,IAAI,CAAC,WAAW,yBAAyB;QAChDX,aAAa;IACjB,GAAG;QAACC;KAAO;IAEX,6CAA6C;IAC7CE,IAAAA,gBAAS,EAAC;QACN,MAAMS,qBAAqB5B,IAAI6B,YAAY,CAACC,OAAO,CAACC,GAAG,CACnD,CAACC;YACG,MAAMC,eAAepB;YACrB,IAAIoB,cAAc;gBACdD,OAAOxB,OAAO,CAAC0B,aAAa,GAAG,CAAC,OAAO,EAAED,aAAa,CAAC;YAC3D;YACA,qCAAqC;YACrC,MAAME,YAAYC,UAAU;YAC5B,IAAID,aAAaH,OAAOK,MAAM,KAAK,SAASL,OAAOK,MAAM,KAAK,QAAQ;gBAClEL,OAAOxB,OAAO,CAAC,eAAe,GAAG2B;YACrC;YACA,OAAOH;QACX,GACA,CAACN,QAAUY,QAAQC,MAAM,CAACb;QAG9B,MAAMc,sBAAsBxC,IAAI6B,YAAY,CAACY,QAAQ,CAACV,GAAG,CACrD,CAACU,WAAaA,UACd,OAAOf;YACH,MAAMgB,kBAAkBhB,MAAMM,MAAM;YACpC,wGAAwG;YACxG,MAAMW,oBAAoBD,iBAAiBE,KAAKC,SAAS;YAEzD,IAAI,AAACnB,MAAMe,QAAQ,EAAEK,WAAW,OAAQ,CAACJ,gBAAgBK,MAAM,IAAI,CAACJ,mBAAmB;gBACnFD,gBAAgBK,MAAM,GAAG;gBACzB,IAAI;oBACAvB,QAAQC,GAAG,CAAC;oBACZ,2EAA2E;oBAC3E,oDAAoD;oBACpD,MAAMuB,kBAAkB,MAAMhD,IAAIuB,IAAI,CAAC,qBAAqB,CAAC,GAAG;wBAC5D0B,iBAAiB;wBACjBC,SAAS,MAAM,gCAAgC;oBACnD;oBAEA,IAAIF,gBAAgBG,IAAI,CAACC,OAAO,EAAE;wBAC9B,MAAMC,iBAAiBL,gBAAgBG,IAAI,CAACtC,WAAW;wBACvDF,QAAQqC,gBAAgBG,IAAI,CAACzC,IAAI;wBACjCI,eAAeuC;wBAEf7B,QAAQC,GAAG,CAAC,kDAAkD4B,eAAeC,SAAS,CAAC,GAAG,MAAM;wBAChGZ,gBAAgBlC,OAAO,CAAC0B,aAAa,GAAG,CAAC,OAAO,EAAEmB,eAAe,CAAC;wBAClE,OAAOrD,IAAI0C;oBACf,OAAO;wBACHlB,QAAQE,KAAK,CAAC,2CAA2CsB,gBAAgBG,IAAI,CAACI,OAAO;wBACrF,MAAMlC,UAAU,yCAAyC;wBACzD,OAAOiB,QAAQC,MAAM,CAACb,QAAQ,6BAA6B;oBAC/D;gBACJ,EAAE,OAAO8B,cAAmB;oBACxBhC,QAAQE,KAAK,CAAC,4CAA4C8B;oBAE1D,qDAAqD;oBACrD,IAAIA,aAAaC,IAAI,KAAK,kBAAkBD,aAAaC,IAAI,KAAK,mBAAmB,CAACD,aAAaf,QAAQ,EAAE;wBACzGjB,QAAQC,GAAG,CAAC;wBACZ,2DAA2D;wBAC3D,OAAOa,QAAQC,MAAM,CAACb,QAAQ,+CAA+C;oBACjF,OAAO,IAAI8B,aAAaf,QAAQ,EAAE;wBAC9BjB,QAAQE,KAAK,CAAC,uCAAuC8B,aAAaf,QAAQ,CAACK,MAAM,EAAE,SAASU,aAAaf,QAAQ,CAACU,IAAI;wBACtH,4DAA4D;wBAC5D,IAAIK,aAAaf,QAAQ,CAACK,MAAM,KAAK,OAAOU,aAAaf,QAAQ,CAACK,MAAM,KAAK,KAAK;4BAC9E,MAAMzB;wBACV,OAAO;4BACHG,QAAQC,GAAG,CAAC;wBAChB;oBACJ,OAAO;wBACH,MAAMJ,UAAU,qCAAqC;oBACzD;oBACA,OAAOiB,QAAQC,MAAM,CAACiB,eAAe,4BAA4B;gBACrE;YACJ;YACA,OAAOlB,QAAQC,MAAM,CAACb;QAC1B;QAGJ,OAAO;YACH1B,IAAI6B,YAAY,CAACC,OAAO,CAAC4B,KAAK,CAAC9B;YAC/B5B,IAAI6B,YAAY,CAACY,QAAQ,CAACiB,KAAK,CAAClB;QACpC;IACJ,GAAG;QAAC3B;QAAaQ;KAAO,GAAG,mDAAmD;IAE9EF,IAAAA,gBAAS,EAAC;QACN,MAAMwC,eAAe;YACjB3C,aAAa;YACb,IAAI;gBACA,4CAA4C;gBAC5C,gEAAgE;gBAChEQ,QAAQC,GAAG,CAAC;gBAEZ,IAAI;oBACA,mEAAmE;oBACnE,MAAMgB,WAAW,MAAMzC,IAAIuB,IAAI,CAAC,qBAAqB,CAAC,GAAG;wBACrD2B,SAAS;oBACb;oBAEA,IAAIT,SAASU,IAAI,CAACC,OAAO,EAAE;wBACvB,MAAMQ,WAAWnB,SAASU,IAAI,CAACzC,IAAI;wBACnCc,QAAQC,GAAG,CAAC,yCAAyC;4BACjDoC,IAAID,SAASC,EAAE;4BACfC,UAAUF,SAASE,QAAQ;4BAC3BC,UAAUH,SAASG,QAAQ;4BAC3BC,aAAaJ,SAASI,WAAW,EAAEC,UAAU;wBACjD;wBAEAtD,QAAQiD;wBACR9C,eAAe2B,SAASU,IAAI,CAACtC,WAAW;wBACxCW,QAAQC,GAAG,CAAC;oBAChB,OAAO;wBACHD,QAAQC,GAAG,CAAC;oBAChB;gBACJ,EAAE,OAAOC,OAAY;oBACjB,kCAAkC;oBAClC,IAAIA,MAAM+B,IAAI,KAAK,kBAAkB/B,MAAM+B,IAAI,KAAK,mBAAmB,CAAC/B,MAAMe,QAAQ,EAAE;wBACpFjB,QAAQC,GAAG,CAAC;oBAChB,OAAO,IAAIC,MAAMe,QAAQ,EAAEK,WAAW,OAAOpB,MAAMe,QAAQ,EAAEK,WAAW,KAAK;wBACzEtB,QAAQC,GAAG,CAAC;wBACZ,6BAA6B;wBAC7Bd,QAAQ;wBACRG,eAAe;oBACnB,OAAO;wBACHU,QAAQE,KAAK,CAAC,uCAAuCA;oBACzD;gBACJ;YACJ,EAAE,OAAOA,OAAO;gBACZF,QAAQE,KAAK,CAAC,qCAAqCA;YACvD,SAAU;gBACNV,aAAa;YACjB;QACJ;QACA2C;IACJ,GAAG,EAAE,GAAG,uEAAuE;IAE/E,MAAMO,QAAQ,OAAOC,OAAeC;QAChCpD,aAAa;QACb,IAAI;YACA,MAAMyB,WAAW,MAAMpC,cAAK,CAACkB,IAAI,CAAC,mBAAmB;gBAAE4C;gBAAOC;YAAS;YACvE,IAAI3B,SAASU,IAAI,CAACC,OAAO,EAAE;gBACvB,MAAM,EAAEvC,aAAawC,cAAc,EAAE3C,MAAMkD,QAAQ,EAAE,GAAGnB,SAASU,IAAI;gBACrExC,QAAQiD;gBACR9C,eAAeuC;gBAEf,8FAA8F;gBAC9F7B,QAAQC,GAAG,CAAC;gBACZT,aAAa;gBACb,OAAO;YACX;QACJ,EAAE,OAAOU,OAAY;YACjBF,QAAQE,KAAK,CAAC,iBAAiBA,MAAMe,QAAQ,EAAEU,MAAMI,WAAW7B,MAAM6B,OAAO;QACjF;QACAvC,aAAa;QACbL,QAAQ;QACRG,eAAe;QACf,OAAO;IACX;IAEA,0CAA0C;IAC1C,MAAMuD,gBAAgB,CAACC;QACnB,IAAI,CAAC5D,QAAQ,CAACA,KAAKsD,WAAW,EAAE,OAAO;QACvC,OAAOO,IAAAA,0BAAe,EAAC7D,KAAKsD,WAAW,EAAEM;IAC7C;IAEA,2BAA2B;IAC3B,MAAME,qBAAqB;QACvB,IAAI,CAAC9D,QAAQ,CAACA,KAAKsD,WAAW,EAAE,OAAO,EAAE;QACzC,OAAO;eAAItD,KAAKsD,WAAW;SAAC;IAChC;IAEA,sCAAsC;IACtC,MAAM5B,YAAY,CAACqC;QACf,MAAMC,QAAQ,CAAC,EAAE,EAAEC,SAASC,MAAM,CAAC,CAAC;QACpC,MAAMC,QAAQH,MAAMI,KAAK,CAAC,CAAC,EAAE,EAAEL,KAAK,CAAC,CAAC;QACtC,IAAII,MAAMZ,MAAM,KAAK,GAAG,OAAOY,MAAME,GAAG,IAAID,MAAM,KAAKE;QACvD,OAAO5E;IACX;IAEA,MAAMsE,QAAyB;QAC3BhE;QACAG;QACAE;QACAkE,iBAAiB,CAAC,CAACvE;QACnBwD;QACA7C;QACAgD;QACAG;IACJ;IAEA,qBACI,qBAACtE,YAAYgF,QAAQ;QACjBR,OAAOA;kBAENjE;;AAGb;AAGO,MAAMR,UAAU;IACnB,MAAMkF,UAAUC,IAAAA,iBAAU,EAAClF;IAC3B,IAAIiF,YAAY/E,WAAW;QACvB,MAAM,IAAIiF,MAAM;IACpB;IACA,OAAOF;AACX"}