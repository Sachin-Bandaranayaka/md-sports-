{"version":3,"sources":["/Users/sachin/Documents/md-sports-/tests/unit/db.test.ts"],"sourcesContent":["// Fixed Database connection and configuration tests\n// This file contains the corrected version of db.test.ts\n\nimport { jest } from '@jest/globals';\nimport { PrismaClient } from '@prisma/client';\n\n// Mock Prisma Client\nconst mockPrisma = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $executeRaw: jest.fn(),\n  $queryRaw: jest.fn(),\n  $transaction: jest.fn(),\n  user: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn()\n  },\n  product: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn()\n  },\n  category: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn()\n  },\n  supplier: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn()\n  },\n  customer: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn()\n  },\n  salesInvoice: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn()\n  },\n  purchaseInvoice: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn()\n  },\n  inventoryItem: {\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn()\n  }\n};\n\n// Mock database configuration\njest.mock('@/lib/config/database', () => ({\n  databaseConfig: {\n    host: 'localhost',\n    port: 5432,\n    database: 'test_db',\n    username: 'test_user',\n    password: 'test_password',\n    dialect: 'postgresql',\n    logging: false,\n    pool: {\n      max: 5,\n      min: 0,\n      acquire: 30000,\n      idle: 10000\n    }\n  }\n}));\n\n// Mock the Prisma import\njest.mock('@/lib/prisma', () => ({\n  __esModule: true,\n  default: mockPrisma,\n}));\n\nimport { db, prisma } from '@/lib/db';\n\ndescribe('Database Library', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('db export', () => {\n    it('should export db as the prisma client', () => {\n      expect(db).toBeDefined();\n      expect(db).toBe(mockPrismaClient);\n    });\n\n    it('should have user methods', () => {\n      expect(db.user).toBeDefined();\n      expect(db.user.findMany).toBeDefined();\n      expect(db.user.findUnique).toBeDefined();\n      expect(db.user.create).toBeDefined();\n      expect(db.user.update).toBeDefined();\n      expect(db.user.delete).toBeDefined();\n    });\n\n    it('should have shop methods', () => {\n      expect(db.shop).toBeDefined();\n      expect(db.shop.findMany).toBeDefined();\n      expect(db.shop.findUnique).toBeDefined();\n      expect(db.shop.create).toBeDefined();\n      expect(db.shop.update).toBeDefined();\n      expect(db.shop.delete).toBeDefined();\n    });\n\n    it('should have connection methods', () => {\n      expect(db.$connect).toBeDefined();\n      expect(db.$disconnect).toBeDefined();\n      expect(db.$transaction).toBeDefined();\n    });\n  });\n\n  describe('prisma export', () => {\n    it('should export prisma as the same client', () => {\n      expect(prisma).toBeDefined();\n      expect(prisma).toBe(mockPrismaClient);\n      expect(prisma).toBe(db);\n    });\n  });\n\n  describe('default export', () => {\n    it('should export db as default', async () => {\n      const defaultExport = await import('@/lib/db');\n      expect(defaultExport.default).toBeDefined();\n      expect(defaultExport.default).toBe(db);\n      expect(defaultExport.default).toBe(mockPrismaClient);\n    });\n  });\n\n  describe('database operations', () => {\n    it('should allow user queries', async () => {\n      const mockUser = { id: 1, name: 'Test User', email: 'test@example.com' };\n      mockPrisma.user.findUnique.mockResolvedValue(mockUser);\n\n      const result = await db.user.findUnique({ where: { id: 1 } });\n      \n      expect(result).toEqual(mockUser);\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({ where: { id: 1 } });\n    });\n\n    it('should allow shop queries', async () => {\n      const mockShop = { id: 'shop1', name: 'Test Shop' };\n      mockPrisma.shop.findUnique.mockResolvedValue(mockShop);\n\n      const result = await db.shop.findUnique({ where: { id: 'shop1' } });\n      \n      expect(result).toEqual(mockShop);\n      expect(mockPrisma.shop.findUnique).toHaveBeenCalledWith({ where: { id: 'shop1' } });\n    });\n\n    it('should allow transactions', async () => {\n      const mockResult = { success: true };\n      mockPrisma.$transaction.mockResolvedValue(mockResult);\n\n      const transactionFn = jest.fn().mockResolvedValue(mockResult);\n      const result = await db.$transaction(transactionFn);\n      \n      expect(result).toEqual(mockResult);\n      expect(mockPrisma.$transaction).toHaveBeenCalledWith(transactionFn);\n    });\n\n    it('should handle connection operations', async () => {\n      mockPrisma.$connect.mockResolvedValue(undefined);\n      mockPrisma.$disconnect.mockResolvedValue(undefined);\n\n      await db.$connect();\n      await db.$disconnect();\n      \n      expect(mockPrisma.$connect).toHaveBeenCalled();\n      expect(mockPrisma.$disconnect).toHaveBeenCalled();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should propagate database errors', async () => {\n      const dbError = new Error('Database connection failed');\n      mockPrisma.user.findUnique.mockRejectedValue(dbError);\n\n      await expect(db.user.findUnique({ where: { id: 1 } })).rejects.toThrow('Database connection failed');\n    });\n\n    it('should propagate transaction errors', async () => {\n      const transactionError = new Error('Transaction failed');\n      mockPrisma.$transaction.mockRejectedValue(transactionError);\n\n      const transactionFn = jest.fn();\n      await expect(db.$transaction(transactionFn)).rejects.toThrow('Transaction failed');\n    });\n  });\n});"],"names":["mockPrisma","$connect","jest","fn","$disconnect","$executeRaw","$queryRaw","$transaction","user","findMany","findUnique","create","update","delete","count","product","category","supplier","customer","salesInvoice","purchaseInvoice","inventoryItem","mock","databaseConfig","host","port","database","username","password","dialect","logging","pool","max","min","acquire","idle","__esModule","default","describe","beforeEach","clearAllMocks","it","expect","db","toBeDefined","toBe","mockPrismaClient","shop","prisma","defaultExport","mockUser","id","name","email","mockResolvedValue","result","where","toEqual","toHaveBeenCalledWith","mockShop","mockResult","success","transactionFn","undefined","toHaveBeenCalled","dbError","Error","mockRejectedValue","rejects","toThrow","transactionError"],"mappings":"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"}