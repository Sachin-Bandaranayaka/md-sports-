40d9ee26f61946cc4545a367effbf554
// Fixed Database connection and configuration tests
// This file contains the corrected version of db.test.ts
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _db = require("../../src/lib/db");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock Prisma Client
const mockPrisma = {
    $connect: _globals.jest.fn(),
    $disconnect: _globals.jest.fn(),
    $executeRaw: _globals.jest.fn(),
    $queryRaw: _globals.jest.fn(),
    $transaction: _globals.jest.fn(),
    user: {
        findMany: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    product: {
        findMany: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    category: {
        findMany: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    supplier: {
        findMany: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    customer: {
        findMany: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    salesInvoice: {
        findMany: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    purchaseInvoice: {
        findMany: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    inventoryItem: {
        findMany: _globals.jest.fn(),
        findUnique: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        count: _globals.jest.fn()
    }
};
// Mock database configuration
_globals.jest.mock("@/lib/config/database", ()=>({
        databaseConfig: {
            host: "localhost",
            port: 5432,
            database: "test_db",
            username: "test_user",
            password: "test_password",
            dialect: "postgresql",
            logging: false,
            pool: {
                max: 5,
                min: 0,
                acquire: 30000,
                idle: 10000
            }
        }
    }));
// Mock the Prisma import
_globals.jest.mock("@/lib/prisma", ()=>({
        __esModule: true,
        default: mockPrisma
    }));
describe("Database Library", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    describe("db export", ()=>{
        it("should export db as the prisma client", ()=>{
            expect(_db.db).toBeDefined();
            expect(_db.db).toBe(mockPrismaClient);
        });
        it("should have user methods", ()=>{
            expect(_db.db.user).toBeDefined();
            expect(_db.db.user.findMany).toBeDefined();
            expect(_db.db.user.findUnique).toBeDefined();
            expect(_db.db.user.create).toBeDefined();
            expect(_db.db.user.update).toBeDefined();
            expect(_db.db.user.delete).toBeDefined();
        });
        it("should have shop methods", ()=>{
            expect(_db.db.shop).toBeDefined();
            expect(_db.db.shop.findMany).toBeDefined();
            expect(_db.db.shop.findUnique).toBeDefined();
            expect(_db.db.shop.create).toBeDefined();
            expect(_db.db.shop.update).toBeDefined();
            expect(_db.db.shop.delete).toBeDefined();
        });
        it("should have connection methods", ()=>{
            expect(_db.db.$connect).toBeDefined();
            expect(_db.db.$disconnect).toBeDefined();
            expect(_db.db.$transaction).toBeDefined();
        });
    });
    describe("prisma export", ()=>{
        it("should export prisma as the same client", ()=>{
            expect(_db.prisma).toBeDefined();
            expect(_db.prisma).toBe(mockPrismaClient);
            expect(_db.prisma).toBe(_db.db);
        });
    });
    describe("default export", ()=>{
        it("should export db as default", async ()=>{
            const defaultExport = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../src/lib/db")));
            expect(defaultExport.default).toBeDefined();
            expect(defaultExport.default).toBe(_db.db);
            expect(defaultExport.default).toBe(mockPrismaClient);
        });
    });
    describe("database operations", ()=>{
        it("should allow user queries", async ()=>{
            const mockUser = {
                id: 1,
                name: "Test User",
                email: "test@example.com"
            };
            mockPrisma.user.findUnique.mockResolvedValue(mockUser);
            const result = await _db.db.user.findUnique({
                where: {
                    id: 1
                }
            });
            expect(result).toEqual(mockUser);
            expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: {
                    id: 1
                }
            });
        });
        it("should allow shop queries", async ()=>{
            const mockShop = {
                id: "shop1",
                name: "Test Shop"
            };
            mockPrisma.shop.findUnique.mockResolvedValue(mockShop);
            const result = await _db.db.shop.findUnique({
                where: {
                    id: "shop1"
                }
            });
            expect(result).toEqual(mockShop);
            expect(mockPrisma.shop.findUnique).toHaveBeenCalledWith({
                where: {
                    id: "shop1"
                }
            });
        });
        it("should allow transactions", async ()=>{
            const mockResult = {
                success: true
            };
            mockPrisma.$transaction.mockResolvedValue(mockResult);
            const transactionFn = _globals.jest.fn().mockResolvedValue(mockResult);
            const result = await _db.db.$transaction(transactionFn);
            expect(result).toEqual(mockResult);
            expect(mockPrisma.$transaction).toHaveBeenCalledWith(transactionFn);
        });
        it("should handle connection operations", async ()=>{
            mockPrisma.$connect.mockResolvedValue(undefined);
            mockPrisma.$disconnect.mockResolvedValue(undefined);
            await _db.db.$connect();
            await _db.db.$disconnect();
            expect(mockPrisma.$connect).toHaveBeenCalled();
            expect(mockPrisma.$disconnect).toHaveBeenCalled();
        });
    });
    describe("error handling", ()=>{
        it("should propagate database errors", async ()=>{
            const dbError = new Error("Database connection failed");
            mockPrisma.user.findUnique.mockRejectedValue(dbError);
            await expect(_db.db.user.findUnique({
                where: {
                    id: 1
                }
            })).rejects.toThrow("Database connection failed");
        });
        it("should propagate transaction errors", async ()=>{
            const transactionError = new Error("Transaction failed");
            mockPrisma.$transaction.mockRejectedValue(transactionError);
            const transactionFn = _globals.jest.fn();
            await expect(_db.db.$transaction(transactionFn)).rejects.toThrow("Transaction failed");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,