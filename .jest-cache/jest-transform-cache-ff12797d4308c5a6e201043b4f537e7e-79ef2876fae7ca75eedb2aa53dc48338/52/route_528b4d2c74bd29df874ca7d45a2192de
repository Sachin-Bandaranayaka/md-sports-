938d632630e5debe7d3c0421792741f1
"use strict";

/* istanbul ignore next */
function cov_trd22sxb5() {
  var path = "/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts";
  var hash = "0d686a7de8fdbd745339dff5ce3cc5a0962d8903";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 86
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "9": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 62
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 26,
          column: 6
        }
      },
      "11": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "12": {
        start: {
          line: 31,
          column: 22
        },
        end: {
          line: 31,
          column: 54
        }
      },
      "13": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "14": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "15": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 59
        }
      },
      "16": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "18": {
        start: {
          line: 48,
          column: 21
        },
        end: {
          line: 56,
          column: 10
        }
      },
      "19": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "20": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "21": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "22": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "23": {
        start: {
          line: 72,
          column: 33
        },
        end: {
          line: 72,
          column: 53
        }
      },
      "24": {
        start: {
          line: 73,
          column: 23
        },
        end: {
          line: 73,
          column: 55
        }
      },
      "25": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 74,
          column: 49
        }
      },
      "26": {
        start: {
          line: 75,
          column: 27
        },
        end: {
          line: 75,
          column: 57
        }
      },
      "27": {
        start: {
          line: 76,
          column: 26
        },
        end: {
          line: 76,
          column: 55
        }
      },
      "28": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 77,
          column: 51
        }
      },
      "29": {
        start: {
          line: 78,
          column: 23
        },
        end: {
          line: 78,
          column: 49
        }
      },
      "30": {
        start: {
          line: 80,
          column: 28
        },
        end: {
          line: 80,
          column: 30
        }
      },
      "31": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 144
        }
      },
      "32": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "33": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "34": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 49
        }
      },
      "35": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 53
        }
      },
      "36": {
        start: {
          line: 91,
          column: 15
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "37": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 50
        }
      },
      "38": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "39": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 99,
          column: 14
        }
      },
      "40": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "41": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 58
        }
      },
      "42": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "43": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 112,
          column: 14
        }
      },
      "44": {
        start: {
          line: 113,
          column: 15
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "45": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 14
        }
      },
      "46": {
        start: {
          line: 117,
          column: 15
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "47": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 120,
          column: 14
        }
      },
      "48": {
        start: {
          line: 122,
          column: 27
        },
        end: {
          line: 148,
          column: 10
        }
      },
      "49": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 53
        }
      },
      "50": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 59
        }
      },
      "51": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      },
      "52": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 323,
          column: 5
        }
      },
      "53": {
        start: {
          line: 162,
          column: 22
        },
        end: {
          line: 162,
          column: 54
        }
      },
      "54": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "55": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "56": {
        start: {
          line: 170,
          column: 24
        },
        end: {
          line: 170,
          column: 59
        }
      },
      "57": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "58": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "59": {
        start: {
          line: 179,
          column: 21
        },
        end: {
          line: 187,
          column: 10
        }
      },
      "60": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "61": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 193,
          column: 15
        }
      },
      "62": {
        start: {
          line: 196,
          column: 29
        },
        end: {
          line: 196,
          column: 94
        }
      },
      "63": {
        start: {
          line: 197,
          column: 30
        },
        end: {
          line: 197,
          column: 100
        }
      },
      "64": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "65": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 203,
          column: 15
        }
      },
      "66": {
        start: {
          line: 205,
          column: 21
        },
        end: {
          line: 205,
          column: 41
        }
      },
      "67": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "68": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "69": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 213,
          column: 19
        }
      },
      "70": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "71": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 220,
          column: 19
        }
      },
      "72": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 38
        }
      },
      "73": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "74": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 105
        }
      },
      "75": {
        start: {
          line: 230,
          column: 44
        },
        end: {
          line: 230,
          column: 48
        }
      },
      "76": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "77": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 78
        }
      },
      "78": {
        start: {
          line: 234,
          column: 15
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "79": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 82
        }
      },
      "80": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "81": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 46
        }
      },
      "82": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "83": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 38
        }
      },
      "84": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "85": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 74
        }
      },
      "86": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 44
        }
      },
      "87": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 44
        }
      },
      "88": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 44
        }
      },
      "89": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "90": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 42
        }
      },
      "91": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "92": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 42
        }
      },
      "93": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "94": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 39
        }
      },
      "95": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "96": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 40
        }
      },
      "97": {
        start: {
          line: 274,
          column: 26
        },
        end: {
          line: 312,
          column: 10
        }
      },
      "98": {
        start: {
          line: 276,
          column: 37
        },
        end: {
          line: 278,
          column: 14
        }
      },
      "99": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 297,
          column: 13
        }
      },
      "100": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 296,
          column: 17
        }
      },
      "101": {
        start: {
          line: 282,
          column: 37
        },
        end: {
          line: 288,
          column: 21
        }
      },
      "102": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 295,
          column: 23
        }
      },
      "103": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 311,
          column: 15
        }
      },
      "104": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 315,
          column: 11
        }
      },
      "105": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 58
        }
      },
      "106": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 322,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 33
          }
        },
        loc: {
          start: {
            line: 23,
            column: 39
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 18
          }
        },
        loc: {
          start: {
            line: 28,
            column: 28
          },
          end: {
            line: 158,
            column: 1
          }
        },
        line: 28
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 159,
            column: 15
          },
          end: {
            line: 159,
            column: 19
          }
        },
        loc: {
          start: {
            line: 159,
            column: 29
          },
          end: {
            line: 324,
            column: 1
          }
        },
        line: 159
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 274,
            column: 61
          },
          end: {
            line: 274,
            column: 62
          }
        },
        loc: {
          start: {
            line: 274,
            column: 73
          },
          end: {
            line: 312,
            column: 9
          }
        },
        line: 274
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 24,
            column: 38
          }
        }, {
          start: {
            line: 24,
            column: 41
          },
          end: {
            line: 26,
            column: 5
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 14
          }
        }, {
          start: {
            line: 24,
            column: 18
          },
          end: {
            line: 24,
            column: 32
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 20
          }
        }, {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 40,
            column: 36
          }
        }],
        line: 40
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 49
          }
        }, {
          start: {
            line: 73,
            column: 53
          },
          end: {
            line: 73,
            column: 55
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 82,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 82,
            column: 86
          }
        }, {
          start: {
            line: 82,
            column: 90
          },
          end: {
            line: 82,
            column: 144
          }
        }],
        line: 82
      },
      "9": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 94,
            column: 9
          }
        }],
        line: 83
      },
      "10": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: 87,
            column: 19
          },
          end: {
            line: 90,
            column: 13
          }
        }],
        line: 85
      },
      "11": {
        loc: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "12": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "13": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "14": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: 113,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        }],
        line: 108
      },
      "15": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 108,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 108,
            column: 21
          }
        }, {
          start: {
            line: 108,
            column: 25
          },
          end: {
            line: 108,
            column: 32
          }
        }],
        line: 108
      },
      "16": {
        loc: {
          start: {
            line: 113,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: 117,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        }],
        line: 113
      },
      "17": {
        loc: {
          start: {
            line: 117,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "18": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "19": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "20": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 20
          }
        }, {
          start: {
            line: 171,
            column: 24
          },
          end: {
            line: 171,
            column: 36
          }
        }],
        line: 171
      },
      "21": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "22": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "23": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 25
          }
        }, {
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 198,
            column: 43
          }
        }],
        line: 198
      },
      "24": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "25": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 207,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 207,
            column: 25
          }
        }, {
          start: {
            line: 207,
            column: 29
          },
          end: {
            line: 207,
            column: 42
          }
        }],
        line: 207
      },
      "26": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "27": {
        loc: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "28": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 27
          }
        }, {
          start: {
            line: 215,
            column: 31
          },
          end: {
            line: 215,
            column: 58
          }
        }],
        line: 215
      },
      "29": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "30": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: 234,
            column: 15
          },
          end: {
            line: 238,
            column: 9
          }
        }],
        line: 232
      },
      "31": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 36
          }
        }, {
          start: {
            line: 232,
            column: 40
          },
          end: {
            line: 232,
            column: 84
          }
        }],
        line: 232
      },
      "32": {
        loc: {
          start: {
            line: 234,
            column: 15
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 15
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "33": {
        loc: {
          start: {
            line: 234,
            column: 19
          },
          end: {
            line: 234,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 19
          },
          end: {
            line: 234,
            column: 43
          }
        }, {
          start: {
            line: 234,
            column: 47
          },
          end: {
            line: 234,
            column: 91
          }
        }],
        line: 234
      },
      "34": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "35": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "36": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: 251,
            column: 15
          },
          end: {
            line: 257,
            column: 9
          }
        }],
        line: 248
      },
      "37": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "38": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "39": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "40": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "41": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 297,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 297,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "42": {
        loc: {
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 280,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 280,
            column: 21
          }
        }, {
          start: {
            line: 280,
            column: 25
          },
          end: {
            line: 280,
            column: 45
          }
        }],
        line: 280
      },
      "43": {
        loc: {
          start: {
            line: 286,
            column: 42
          },
          end: {
            line: 286,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 42
          },
          end: {
            line: 286,
            column: 56
          }
        }, {
          start: {
            line: 286,
            column: 60
          },
          end: {
            line: 286,
            column: 70
          }
        }],
        line: 286
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { hasPermission } from '@/lib/utils/permissions';\n\n// GET /api/quotations - Get all quotations\nexport async function GET(request: NextRequest) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions\n        if (!hasPermission(user.permissions, 'sales:view')) {\n            return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\n        }\n\n        const { searchParams } = new URL(request.url);\n        const search = searchParams.get('search') || '';\n        const status = searchParams.get('status');\n        const customerId = searchParams.get('customerId');\n        const startDate = searchParams.get('startDate');\n        const endDate = searchParams.get('endDate');\n        const shopId = searchParams.get('shopId');\n\n        // Build the where clause for Prisma\n        const whereClause: any = {};\n\n        // Apply shop filtering based on user permissions\n        const isAdmin = hasPermission(user.permissions, 'admin:all') || hasPermission(user.permissions, '*');\n        if (!isAdmin) {\n            // Non-admin users can only see quotations from their assigned shop\n            if (user.shopId) {\n                whereClause.shopId = user.shopId;\n            } else {\n                // User has no shop assigned, return empty result\n                return NextResponse.json([]);\n            }\n        } else if (shopId) {\n            // Admin users can filter by specific shop if requested\n            whereClause.shopId = parseInt(shopId);\n        }\n\n        if (search) {\n            whereClause.quotationNumber = {\n                contains: search,\n                mode: 'insensitive'\n            };\n        }\n\n        // Note: status field is not available in Quotation model\n        // if (status) {\n        //     whereClause.status = status;\n        // }\n\n        if (customerId) {\n            whereClause.customerId = parseInt(customerId);\n        }\n\n        if (startDate && endDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate),\n                lte: new Date(endDate)\n            };\n        } else if (startDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate)\n            };\n        } else if (endDate) {\n            whereClause.createdAt = {\n                lte: new Date(endDate)\n            };\n        }\n\n        const quotations = await prisma.quotation.findMany({\n            where: whereClause,\n            include: {\n                customer: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        phone: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: {\n                            select: {\n                                id: true,\n                                name: true,\n                                sku: true\n                            }\n                        }\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(quotations);\n    } catch (error) {\n        console.error('Error fetching quotations:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch quotations' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST /api/quotations - Create a new quotation\nexport async function POST(request: NextRequest) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions\n        const canCreateAll = hasPermission(user.permissions, 'sales:manage');\n        const canCreateShop = hasPermission(user.permissions, 'sales:create:shop');\n        \n        if (!canCreateAll && !canCreateShop) {\n            return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\n        }\n\n        const body = await request.json();\n        \n        // Validate shopId for users with only shop-specific permissions\n        if (!canCreateAll && canCreateShop) {\n            if (!user.shopId) {\n                return NextResponse.json({ error: 'User not assigned to any shop' }, { status: 403 });\n            }\n            if (body.shopId && body.shopId !== user.shopId) {\n                return NextResponse.json({ error: 'Cannot create quotations for other shops' }, { status: 403 });\n            }\n            // Ensure shopId is set to user's shop\n            body.shopId = user.shopId;\n        }\n\n        // Generate a quotation number if not provided\n        if (!body.quotationNumber) {\n            body.quotationNumber = `QUO${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;\n        }\n\n        // Extract items from the request\n        const { items, ...quotationData } = body;\n\n        // Ensure customerId is an integer\n        if (quotationData.customerId && typeof quotationData.customerId === 'string') {\n            quotationData.customerId = parseInt(quotationData.customerId, 10);\n        } else if (quotationData.customerId && typeof quotationData.customerId !== 'number') {\n            // Potentially return an error if customerId is not a parsable string or number\n            console.error(\"Invalid customerId format:\", quotationData.customerId);\n            // return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n        }\n\n        // Remove customerName as it's not a direct field of Quotation model\n        if ('customerName' in quotationData) {\n            delete quotationData.customerName;\n        }\n\n        // Remove date as createdAt is automatically handled by Prisma\n        if ('date' in quotationData) {\n            delete quotationData.date;\n        }\n\n        // Rename expiryDate to validUntil and convert to Date object\n        if (quotationData.expiryDate) {\n            quotationData.validUntil = new Date(quotationData.expiryDate);\n            delete quotationData.expiryDate;\n        } else {\n            // Set validUntil to null or a default if expiryDate is not provided and it's optional\n            // Based on schema (DateTime?), it's optional. So, if not provided, it can be omitted or explicitly null.\n            // If you want to ensure it's always set, you might add a default here or make it required in the request.\n            quotationData.validUntil = null; // Or simply don't set it if not provided, Prisma handles optional fields\n            delete quotationData.expiryDate; // Ensure it's removed if it was an empty string or similar\n        }\n\n        // Remove subtotal and discount as they are not direct fields of the Quotation model\n        if ('subtotal' in quotationData) {\n            delete quotationData.subtotal;\n        }\n        if ('discount' in quotationData) {\n            delete quotationData.discount;\n        }\n\n        // Remove notes as it is not a direct field of the Quotation model\n        if ('notes' in quotationData) {\n            delete quotationData.notes;\n        }\n\n        // Remove status as it is not a direct field of the Quotation model\n        if ('status' in quotationData) {\n            delete quotationData.status;\n        }\n\n        // Create the quotation with items in a transaction\n        const quotation = await prisma.$transaction(async (tx) => {\n            // Create the quotation\n            const createdQuotation = await tx.quotation.create({\n                data: quotationData\n            });\n\n            // Create the quotation items\n            if (items && Array.isArray(items)) {\n                for (const item of items) {\n                    const itemData: any = {\n                        quotationId: createdQuotation.id,\n                        productId: parseInt(item.productId, 10),\n                        quantity: parseInt(item.quantity, 10),\n                        price: parseFloat(item.unitPrice || item.price), // Handle if it's already price or unitPrice\n                        total: parseFloat(item.total) // Ensure total is also a float\n                    };\n\n                    // Remove productName if it exists, as it's not part of QuotationItem schema\n                    // The actual product details are linked via productId\n                    // We also remove unitPrice explicitly if it was the original field name\n                    // and any other unexpected fields that might have come from `...item` spread previously.\n\n                    await tx.quotationItem.create({\n                        data: itemData\n                    });\n                }\n            }\n\n            // Return the complete quotation with relations\n            return tx.quotation.findUnique({\n                where: {\n                    id: createdQuotation.id\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        return NextResponse.json(quotation, { status: 201 });\n    } catch (error) {\n        console.error('Error creating quotation:', error);\n        return NextResponse.json(\n            { error: 'Failed to create quotation' },\n            { status: 500 }\n        );\n    }\n}"],
      names: ["GET", "POST", "request", "token", "extractToken", "NextResponse", "json", "error", "status", "payload", "verifyToken", "sub", "user", "prisma", "findUnique", "where", "id", "select", "permissions", "shopId", "hasPermission", "searchParams", "URL", "url", "search", "get", "customerId", "startDate", "endDate", "whereClause", "isAdmin", "parseInt", "quotationNumber", "contains", "mode", "createdAt", "gte", "Date", "lte", "quotations", "quotation", "findMany", "include", "customer", "name", "email", "phone", "items", "product", "sku", "orderBy", "console", "canCreateAll", "canCreateShop", "body", "Math", "floor", "random", "toString", "padStart", "quotationData", "customerName", "date", "expiryDate", "validUntil", "subtotal", "discount", "notes", "$transaction", "tx", "createdQuotation", "create", "data", "Array", "isArray", "item", "itemData", "quotationId", "productId", "quantity", "price", "parseFloat", "unitPrice", "total", "quotationItem"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0d686a7de8fdbd745339dff5ce3cc5a0962d8903"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_trd22sxb5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_trd22sxb5();
cov_trd22sxb5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[0]++;
  cov_trd22sxb5().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_trd22sxb5().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_trd22sxb5().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_trd22sxb5().f[1]++;
    cov_trd22sxb5().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_trd22sxb5().f[2]++;
    cov_trd22sxb5().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_trd22sxb5().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(/*#__PURE__*/cov_trd22sxb5().s[7]++, _interop_require_default(require("../../../lib/prisma")));
const _auth =
/* istanbul ignore next */
(cov_trd22sxb5().s[8]++, require("../../../lib/auth"));
const _permissions =
/* istanbul ignore next */
(cov_trd22sxb5().s[9]++, require("../../../lib/utils/permissions"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[3]++;
  cov_trd22sxb5().s[10]++;
  return /* istanbul ignore next */(cov_trd22sxb5().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_trd22sxb5().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_trd22sxb5().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_trd22sxb5().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[4]++;
  cov_trd22sxb5().s[11]++;
  try {
    // Check authentication
    const token =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[12]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_trd22sxb5().s[13]++;
    if (!token) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[2][0]++;
      cov_trd22sxb5().s[14]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[2][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[15]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_trd22sxb5().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[4][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[4][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[3][0]++;
      cov_trd22sxb5().s[17]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[3][1]++;
    }
    // Get user details
    const user =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[18]++, await _prisma.default.user.findUnique({
      where: {
        id: payload.sub
      },
      select: {
        permissions: true,
        shopId: true
      }
    }));
    /* istanbul ignore next */
    cov_trd22sxb5().s[19]++;
    if (!user) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[5][0]++;
      cov_trd22sxb5().s[20]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[5][1]++;
    }
    // Check permissions
    cov_trd22sxb5().s[21]++;
    if (!(0, _permissions.hasPermission)(user.permissions, "sales:view")) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[6][0]++;
      cov_trd22sxb5().s[22]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[6][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[23]++, new URL(request.url));
    const search =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[24]++,
    /* istanbul ignore next */
    (cov_trd22sxb5().b[7][0]++, searchParams.get("search")) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[7][1]++, ""));
    const status =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[25]++, searchParams.get("status"));
    const customerId =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[26]++, searchParams.get("customerId"));
    const startDate =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[27]++, searchParams.get("startDate"));
    const endDate =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[28]++, searchParams.get("endDate"));
    const shopId =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[29]++, searchParams.get("shopId"));
    // Build the where clause for Prisma
    const whereClause =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[30]++, {});
    // Apply shop filtering based on user permissions
    const isAdmin =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[31]++,
    /* istanbul ignore next */
    (cov_trd22sxb5().b[8][0]++, (0, _permissions.hasPermission)(user.permissions, "admin:all")) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[8][1]++, (0, _permissions.hasPermission)(user.permissions, "*")));
    /* istanbul ignore next */
    cov_trd22sxb5().s[32]++;
    if (!isAdmin) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[9][0]++;
      cov_trd22sxb5().s[33]++;
      // Non-admin users can only see quotations from their assigned shop
      if (user.shopId) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[10][0]++;
        cov_trd22sxb5().s[34]++;
        whereClause.shopId = user.shopId;
      } else {
        /* istanbul ignore next */
        cov_trd22sxb5().b[10][1]++;
        cov_trd22sxb5().s[35]++;
        // User has no shop assigned, return empty result
        return _server.NextResponse.json([]);
      }
    } else {
      /* istanbul ignore next */
      cov_trd22sxb5().b[9][1]++;
      cov_trd22sxb5().s[36]++;
      if (shopId) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[11][0]++;
        cov_trd22sxb5().s[37]++;
        // Admin users can filter by specific shop if requested
        whereClause.shopId = parseInt(shopId);
      } else
      /* istanbul ignore next */
      {
        cov_trd22sxb5().b[11][1]++;
      }
    }
    /* istanbul ignore next */
    cov_trd22sxb5().s[38]++;
    if (search) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[12][0]++;
      cov_trd22sxb5().s[39]++;
      whereClause.quotationNumber = {
        contains: search,
        mode: "insensitive"
      };
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[12][1]++;
    }
    // Note: status field is not available in Quotation model
    // if (status) {
    //     whereClause.status = status;
    // }
    cov_trd22sxb5().s[40]++;
    if (customerId) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[13][0]++;
      cov_trd22sxb5().s[41]++;
      whereClause.customerId = parseInt(customerId);
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[13][1]++;
    }
    cov_trd22sxb5().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[15][0]++, startDate) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[15][1]++, endDate)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[14][0]++;
      cov_trd22sxb5().s[43]++;
      whereClause.createdAt = {
        gte: new Date(startDate),
        lte: new Date(endDate)
      };
    } else {
      /* istanbul ignore next */
      cov_trd22sxb5().b[14][1]++;
      cov_trd22sxb5().s[44]++;
      if (startDate) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[16][0]++;
        cov_trd22sxb5().s[45]++;
        whereClause.createdAt = {
          gte: new Date(startDate)
        };
      } else {
        /* istanbul ignore next */
        cov_trd22sxb5().b[16][1]++;
        cov_trd22sxb5().s[46]++;
        if (endDate) {
          /* istanbul ignore next */
          cov_trd22sxb5().b[17][0]++;
          cov_trd22sxb5().s[47]++;
          whereClause.createdAt = {
            lte: new Date(endDate)
          };
        } else
        /* istanbul ignore next */
        {
          cov_trd22sxb5().b[17][1]++;
        }
      }
    }
    const quotations =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[48]++, await _prisma.default.quotation.findMany({
      where: whereClause,
      include: {
        customer: {
          select: {
            id: true,
            name: true,
            email: true,
            phone: true
          }
        },
        items: {
          include: {
            product: {
              select: {
                id: true,
                name: true,
                sku: true
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: "desc"
      }
    }));
    /* istanbul ignore next */
    cov_trd22sxb5().s[49]++;
    return _server.NextResponse.json(quotations);
  } catch (error) {
    /* istanbul ignore next */
    cov_trd22sxb5().s[50]++;
    console.error("Error fetching quotations:", error);
    /* istanbul ignore next */
    cov_trd22sxb5().s[51]++;
    return _server.NextResponse.json({
      error: "Failed to fetch quotations"
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_trd22sxb5().f[5]++;
  cov_trd22sxb5().s[52]++;
  try {
    // Check authentication
    const token =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[53]++, (0, _auth.extractToken)(request));
    /* istanbul ignore next */
    cov_trd22sxb5().s[54]++;
    if (!token) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[18][0]++;
      cov_trd22sxb5().s[55]++;
      return _server.NextResponse.json({
        error: "Unauthorized - No token provided"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[18][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[56]++, await (0, _auth.verifyToken)(token));
    /* istanbul ignore next */
    cov_trd22sxb5().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[20][0]++, !payload) ||
    /* istanbul ignore next */
    (cov_trd22sxb5().b[20][1]++, !payload.sub)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[19][0]++;
      cov_trd22sxb5().s[58]++;
      return _server.NextResponse.json({
        error: "Unauthorized - Invalid token"
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[19][1]++;
    }
    // Get user details
    const user =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[59]++, await _prisma.default.user.findUnique({
      where: {
        id: payload.sub
      },
      select: {
        permissions: true,
        shopId: true
      }
    }));
    /* istanbul ignore next */
    cov_trd22sxb5().s[60]++;
    if (!user) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[21][0]++;
      cov_trd22sxb5().s[61]++;
      return _server.NextResponse.json({
        error: "User not found"
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[21][1]++;
    }
    // Check permissions
    const canCreateAll =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[62]++, (0, _permissions.hasPermission)(user.permissions, "sales:manage"));
    const canCreateShop =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[63]++, (0, _permissions.hasPermission)(user.permissions, "sales:create:shop"));
    /* istanbul ignore next */
    cov_trd22sxb5().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[23][0]++, !canCreateAll) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[23][1]++, !canCreateShop)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[22][0]++;
      cov_trd22sxb5().s[65]++;
      return _server.NextResponse.json({
        error: "Insufficient permissions"
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[22][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[66]++, await request.json());
    // Validate shopId for users with only shop-specific permissions
    /* istanbul ignore next */
    cov_trd22sxb5().s[67]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[25][0]++, !canCreateAll) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[25][1]++, canCreateShop)) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[24][0]++;
      cov_trd22sxb5().s[68]++;
      if (!user.shopId) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[26][0]++;
        cov_trd22sxb5().s[69]++;
        return _server.NextResponse.json({
          error: "User not assigned to any shop"
        }, {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_trd22sxb5().b[26][1]++;
      }
      cov_trd22sxb5().s[70]++;
      if (
      /* istanbul ignore next */
      (cov_trd22sxb5().b[28][0]++, body.shopId) &&
      /* istanbul ignore next */
      (cov_trd22sxb5().b[28][1]++, body.shopId !== user.shopId)) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[27][0]++;
        cov_trd22sxb5().s[71]++;
        return _server.NextResponse.json({
          error: "Cannot create quotations for other shops"
        }, {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_trd22sxb5().b[27][1]++;
      }
      // Ensure shopId is set to user's shop
      cov_trd22sxb5().s[72]++;
      body.shopId = user.shopId;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[24][1]++;
    }
    // Generate a quotation number if not provided
    cov_trd22sxb5().s[73]++;
    if (!body.quotationNumber) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[29][0]++;
      cov_trd22sxb5().s[74]++;
      body.quotationNumber = `QUO${Math.floor(Math.random() * 10000).toString().padStart(4, "0")}`;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[29][1]++;
    }
    // Extract items from the request
    const {
      items,
      ...quotationData
    } =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[75]++, body);
    // Ensure customerId is an integer
    /* istanbul ignore next */
    cov_trd22sxb5().s[76]++;
    if (
    /* istanbul ignore next */
    (cov_trd22sxb5().b[31][0]++, quotationData.customerId) &&
    /* istanbul ignore next */
    (cov_trd22sxb5().b[31][1]++, typeof quotationData.customerId === "string")) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[30][0]++;
      cov_trd22sxb5().s[77]++;
      quotationData.customerId = parseInt(quotationData.customerId, 10);
    } else {
      /* istanbul ignore next */
      cov_trd22sxb5().b[30][1]++;
      cov_trd22sxb5().s[78]++;
      if (
      /* istanbul ignore next */
      (cov_trd22sxb5().b[33][0]++, quotationData.customerId) &&
      /* istanbul ignore next */
      (cov_trd22sxb5().b[33][1]++, typeof quotationData.customerId !== "number")) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[32][0]++;
        cov_trd22sxb5().s[79]++;
        // Potentially return an error if customerId is not a parsable string or number
        console.error("Invalid customerId format:", quotationData.customerId);
        // return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });
      } else
      /* istanbul ignore next */
      {
        cov_trd22sxb5().b[32][1]++;
      }
    }
    // Remove customerName as it's not a direct field of Quotation model
    /* istanbul ignore next */
    cov_trd22sxb5().s[80]++;
    if ("customerName" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[34][0]++;
      cov_trd22sxb5().s[81]++;
      delete quotationData.customerName;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[34][1]++;
    }
    // Remove date as createdAt is automatically handled by Prisma
    cov_trd22sxb5().s[82]++;
    if ("date" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[35][0]++;
      cov_trd22sxb5().s[83]++;
      delete quotationData.date;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[35][1]++;
    }
    // Rename expiryDate to validUntil and convert to Date object
    cov_trd22sxb5().s[84]++;
    if (quotationData.expiryDate) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[36][0]++;
      cov_trd22sxb5().s[85]++;
      quotationData.validUntil = new Date(quotationData.expiryDate);
      /* istanbul ignore next */
      cov_trd22sxb5().s[86]++;
      delete quotationData.expiryDate;
    } else {
      /* istanbul ignore next */
      cov_trd22sxb5().b[36][1]++;
      cov_trd22sxb5().s[87]++;
      // Set validUntil to null or a default if expiryDate is not provided and it's optional
      // Based on schema (DateTime?), it's optional. So, if not provided, it can be omitted or explicitly null.
      // If you want to ensure it's always set, you might add a default here or make it required in the request.
      quotationData.validUntil = null; // Or simply don't set it if not provided, Prisma handles optional fields
      /* istanbul ignore next */
      cov_trd22sxb5().s[88]++;
      delete quotationData.expiryDate; // Ensure it's removed if it was an empty string or similar
    }
    // Remove subtotal and discount as they are not direct fields of the Quotation model
    /* istanbul ignore next */
    cov_trd22sxb5().s[89]++;
    if ("subtotal" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[37][0]++;
      cov_trd22sxb5().s[90]++;
      delete quotationData.subtotal;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[37][1]++;
    }
    cov_trd22sxb5().s[91]++;
    if ("discount" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[38][0]++;
      cov_trd22sxb5().s[92]++;
      delete quotationData.discount;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[38][1]++;
    }
    // Remove notes as it is not a direct field of the Quotation model
    cov_trd22sxb5().s[93]++;
    if ("notes" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[39][0]++;
      cov_trd22sxb5().s[94]++;
      delete quotationData.notes;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[39][1]++;
    }
    // Remove status as it is not a direct field of the Quotation model
    cov_trd22sxb5().s[95]++;
    if ("status" in quotationData) {
      /* istanbul ignore next */
      cov_trd22sxb5().b[40][0]++;
      cov_trd22sxb5().s[96]++;
      delete quotationData.status;
    } else
    /* istanbul ignore next */
    {
      cov_trd22sxb5().b[40][1]++;
    }
    // Create the quotation with items in a transaction
    const quotation =
    /* istanbul ignore next */
    (cov_trd22sxb5().s[97]++, await _prisma.default.$transaction(async tx => {
      /* istanbul ignore next */
      cov_trd22sxb5().f[6]++;
      // Create the quotation
      const createdQuotation =
      /* istanbul ignore next */
      (cov_trd22sxb5().s[98]++, await tx.quotation.create({
        data: quotationData
      }));
      // Create the quotation items
      /* istanbul ignore next */
      cov_trd22sxb5().s[99]++;
      if (
      /* istanbul ignore next */
      (cov_trd22sxb5().b[42][0]++, items) &&
      /* istanbul ignore next */
      (cov_trd22sxb5().b[42][1]++, Array.isArray(items))) {
        /* istanbul ignore next */
        cov_trd22sxb5().b[41][0]++;
        cov_trd22sxb5().s[100]++;
        for (const item of items) {
          const itemData =
          /* istanbul ignore next */
          (cov_trd22sxb5().s[101]++, {
            quotationId: createdQuotation.id,
            productId: parseInt(item.productId, 10),
            quantity: parseInt(item.quantity, 10),
            price: parseFloat(
            /* istanbul ignore next */
            (cov_trd22sxb5().b[43][0]++, item.unitPrice) ||
            /* istanbul ignore next */
            (cov_trd22sxb5().b[43][1]++, item.price)),
            total: parseFloat(item.total) // Ensure total is also a float
          });
          // Remove productName if it exists, as it's not part of QuotationItem schema
          // The actual product details are linked via productId
          // We also remove unitPrice explicitly if it was the original field name
          // and any other unexpected fields that might have come from `...item` spread previously.
          /* istanbul ignore next */
          cov_trd22sxb5().s[102]++;
          await tx.quotationItem.create({
            data: itemData
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_trd22sxb5().b[41][1]++;
      }
      // Return the complete quotation with relations
      cov_trd22sxb5().s[103]++;
      return tx.quotation.findUnique({
        where: {
          id: createdQuotation.id
        },
        include: {
          customer: true,
          items: {
            include: {
              product: true
            }
          }
        }
      });
    }));
    /* istanbul ignore next */
    cov_trd22sxb5().s[104]++;
    return _server.NextResponse.json(quotation, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_trd22sxb5().s[105]++;
    console.error("Error creating quotation:", error);
    /* istanbul ignore next */
    cov_trd22sxb5().s[106]++;
    return _server.NextResponse.json({
      error: "Failed to create quotation"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,