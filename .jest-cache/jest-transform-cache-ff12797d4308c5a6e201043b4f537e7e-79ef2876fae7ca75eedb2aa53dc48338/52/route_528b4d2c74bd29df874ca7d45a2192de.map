{"version":3,"names":["GET","cov_trd22sxb5","f","s","POST","request","token","_auth","extractToken","b","_server","NextResponse","json","error","status","payload","verifyToken","sub","user","_prisma","default","findUnique","where","id","select","permissions","shopId","_permissions","hasPermission","searchParams","URL","url","search","get","customerId","startDate","endDate","whereClause","isAdmin","parseInt","quotationNumber","contains","mode","createdAt","gte","Date","lte","quotations","quotation","findMany","include","customer","name","email","phone","items","product","sku","orderBy","console","canCreateAll","canCreateShop","body","Math","floor","random","toString","padStart","quotationData","customerName","date","expiryDate","validUntil","subtotal","discount","notes","$transaction","tx","createdQuotation","create","data","Array","isArray","item","itemData","quotationId","productId","quantity","price","parseFloat","unitPrice","total","quotationItem"],"sources":["/Users/sachin/Documents/md-sports-/src/app/api/quotations/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { verifyToken, extractToken } from '@/lib/auth';\nimport { hasPermission } from '@/lib/utils/permissions';\n\n// GET /api/quotations - Get all quotations\nexport async function GET(request: NextRequest) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions\n        if (!hasPermission(user.permissions, 'sales:view')) {\n            return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\n        }\n\n        const { searchParams } = new URL(request.url);\n        const search = searchParams.get('search') || '';\n        const status = searchParams.get('status');\n        const customerId = searchParams.get('customerId');\n        const startDate = searchParams.get('startDate');\n        const endDate = searchParams.get('endDate');\n        const shopId = searchParams.get('shopId');\n\n        // Build the where clause for Prisma\n        const whereClause: any = {};\n\n        // Apply shop filtering based on user permissions\n        const isAdmin = hasPermission(user.permissions, 'admin:all') || hasPermission(user.permissions, '*');\n        if (!isAdmin) {\n            // Non-admin users can only see quotations from their assigned shop\n            if (user.shopId) {\n                whereClause.shopId = user.shopId;\n            } else {\n                // User has no shop assigned, return empty result\n                return NextResponse.json([]);\n            }\n        } else if (shopId) {\n            // Admin users can filter by specific shop if requested\n            whereClause.shopId = parseInt(shopId);\n        }\n\n        if (search) {\n            whereClause.quotationNumber = {\n                contains: search,\n                mode: 'insensitive'\n            };\n        }\n\n        // Note: status field is not available in Quotation model\n        // if (status) {\n        //     whereClause.status = status;\n        // }\n\n        if (customerId) {\n            whereClause.customerId = parseInt(customerId);\n        }\n\n        if (startDate && endDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate),\n                lte: new Date(endDate)\n            };\n        } else if (startDate) {\n            whereClause.createdAt = {\n                gte: new Date(startDate)\n            };\n        } else if (endDate) {\n            whereClause.createdAt = {\n                lte: new Date(endDate)\n            };\n        }\n\n        const quotations = await prisma.quotation.findMany({\n            where: whereClause,\n            include: {\n                customer: {\n                    select: {\n                        id: true,\n                        name: true,\n                        email: true,\n                        phone: true\n                    }\n                },\n                items: {\n                    include: {\n                        product: {\n                            select: {\n                                id: true,\n                                name: true,\n                                sku: true\n                            }\n                        }\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n\n        return NextResponse.json(quotations);\n    } catch (error) {\n        console.error('Error fetching quotations:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch quotations' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST /api/quotations - Create a new quotation\nexport async function POST(request: NextRequest) {\n    try {\n        // Check authentication\n        const token = extractToken(request);\n        if (!token) {\n            return NextResponse.json({ error: 'Unauthorized - No token provided' }, { status: 401 });\n        }\n\n        const payload = await verifyToken(token);\n        if (!payload || !payload.sub) {\n            return NextResponse.json({ error: 'Unauthorized - Invalid token' }, { status: 401 });\n        }\n\n        // Get user details\n        const user = await prisma.user.findUnique({\n            where: { id: payload.sub as string },\n            select: { permissions: true, shopId: true }\n        });\n\n        if (!user) {\n            return NextResponse.json({ error: 'User not found' }, { status: 404 });\n        }\n\n        // Check permissions\n        const canCreateAll = hasPermission(user.permissions, 'sales:manage');\n        const canCreateShop = hasPermission(user.permissions, 'sales:create:shop');\n        \n        if (!canCreateAll && !canCreateShop) {\n            return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\n        }\n\n        const body = await request.json();\n        \n        // Validate shopId for users with only shop-specific permissions\n        if (!canCreateAll && canCreateShop) {\n            if (!user.shopId) {\n                return NextResponse.json({ error: 'User not assigned to any shop' }, { status: 403 });\n            }\n            if (body.shopId && body.shopId !== user.shopId) {\n                return NextResponse.json({ error: 'Cannot create quotations for other shops' }, { status: 403 });\n            }\n            // Ensure shopId is set to user's shop\n            body.shopId = user.shopId;\n        }\n\n        // Generate a quotation number if not provided\n        if (!body.quotationNumber) {\n            body.quotationNumber = `QUO${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;\n        }\n\n        // Extract items from the request\n        const { items, ...quotationData } = body;\n\n        // Ensure customerId is an integer\n        if (quotationData.customerId && typeof quotationData.customerId === 'string') {\n            quotationData.customerId = parseInt(quotationData.customerId, 10);\n        } else if (quotationData.customerId && typeof quotationData.customerId !== 'number') {\n            // Potentially return an error if customerId is not a parsable string or number\n            console.error(\"Invalid customerId format:\", quotationData.customerId);\n            // return NextResponse.json({ error: 'Invalid customerId format' }, { status: 400 });\n        }\n\n        // Remove customerName as it's not a direct field of Quotation model\n        if ('customerName' in quotationData) {\n            delete quotationData.customerName;\n        }\n\n        // Remove date as createdAt is automatically handled by Prisma\n        if ('date' in quotationData) {\n            delete quotationData.date;\n        }\n\n        // Rename expiryDate to validUntil and convert to Date object\n        if (quotationData.expiryDate) {\n            quotationData.validUntil = new Date(quotationData.expiryDate);\n            delete quotationData.expiryDate;\n        } else {\n            // Set validUntil to null or a default if expiryDate is not provided and it's optional\n            // Based on schema (DateTime?), it's optional. So, if not provided, it can be omitted or explicitly null.\n            // If you want to ensure it's always set, you might add a default here or make it required in the request.\n            quotationData.validUntil = null; // Or simply don't set it if not provided, Prisma handles optional fields\n            delete quotationData.expiryDate; // Ensure it's removed if it was an empty string or similar\n        }\n\n        // Remove subtotal and discount as they are not direct fields of the Quotation model\n        if ('subtotal' in quotationData) {\n            delete quotationData.subtotal;\n        }\n        if ('discount' in quotationData) {\n            delete quotationData.discount;\n        }\n\n        // Remove notes as it is not a direct field of the Quotation model\n        if ('notes' in quotationData) {\n            delete quotationData.notes;\n        }\n\n        // Remove status as it is not a direct field of the Quotation model\n        if ('status' in quotationData) {\n            delete quotationData.status;\n        }\n\n        // Create the quotation with items in a transaction\n        const quotation = await prisma.$transaction(async (tx) => {\n            // Create the quotation\n            const createdQuotation = await tx.quotation.create({\n                data: quotationData\n            });\n\n            // Create the quotation items\n            if (items && Array.isArray(items)) {\n                for (const item of items) {\n                    const itemData: any = {\n                        quotationId: createdQuotation.id,\n                        productId: parseInt(item.productId, 10),\n                        quantity: parseInt(item.quantity, 10),\n                        price: parseFloat(item.unitPrice || item.price), // Handle if it's already price or unitPrice\n                        total: parseFloat(item.total) // Ensure total is also a float\n                    };\n\n                    // Remove productName if it exists, as it's not part of QuotationItem schema\n                    // The actual product details are linked via productId\n                    // We also remove unitPrice explicitly if it was the original field name\n                    // and any other unexpected fields that might have come from `...item` spread previously.\n\n                    await tx.quotationItem.create({\n                        data: itemData\n                    });\n                }\n            }\n\n            // Return the complete quotation with relations\n            return tx.quotation.findUnique({\n                where: {\n                    id: createdQuotation.id\n                },\n                include: {\n                    customer: true,\n                    items: {\n                        include: {\n                            product: true\n                        }\n                    }\n                }\n            });\n        });\n\n        return NextResponse.json(quotation, { status: 201 });\n    } catch (error) {\n        console.error('Error creating quotation:', error);\n        return NextResponse.json(\n            { error: 'Failed to create quotation' },\n            { status: 500 }\n        );\n    }\n}"],"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","ignoreList":[]}