{"version":3,"names":["ChatbotWrapper","DynamicChatbot","cov_2brtcdi8wm","s","_dynamic","default","f","Promise","resolve","then","_interop_require_wildcard","require","mod","Chatbot","ssr","loading","suspense","isEnabled","setIsEnabled","_react","useState","isLoading","setIsLoading","showChatbot","setShowChatbot","useEffect","checkChatbotEnabled","response","fetch","priority","cache","data","json","b","success","settings","Array","isArray","chatbotSetting","find","setting","key","value","error","console","timer","setTimeout","clearTimeout","_jsxruntime","jsx","onClick","className","_lucidereact","MessageSquare","size","onClose"],"sources":["/Users/sachin/Documents/md-sports-/src/components/chatbot/ChatbotWrapper.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\nimport { MessageSquare } from 'lucide-react';\n\n// Dynamically import the Chatbot component with client-side only rendering and no preloading\nconst DynamicChatbot = dynamic(\n    () => import('./Chatbot').then(mod => ({ default: mod.Chatbot })),\n    {\n        ssr: false,\n        loading: () => null,\n        // Setting suspense to true ensures it doesn't preload\n        suspense: true\n    }\n);\n\nexport function ChatbotWrapper() {\n    const [isEnabled, setIsEnabled] = useState<boolean | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [showChatbot, setShowChatbot] = useState(false);\n\n    // Check if chatbot is enabled\n    useEffect(() => {\n        const checkChatbotEnabled = async () => {\n            try {\n                setIsLoading(true);\n                // Use a lightweight check for settings initially\n                const response = await fetch('/api/settings?key=ai_chatbot_enabled', {\n                    priority: 'low', // Set low priority so it doesn't block other resources\n                    cache: 'force-cache' // Try using cached results if available\n                });\n                const data = await response.json();\n\n                if (data.success && data.settings) {\n                    // Handle both array and single key responses\n                    if (Array.isArray(data.settings)) {\n                        const chatbotSetting = data.settings.find((setting: { key: string }) =>\n                            setting.key === 'ai_chatbot_enabled'\n                        );\n                        setIsEnabled(chatbotSetting?.value === 'true');\n                    } else {\n                        setIsEnabled(data.settings.value === 'true');\n                    }\n                } else {\n                    // Default to enabled if can't fetch settings\n                    setIsEnabled(true);\n                }\n            } catch (error) {\n                console.error('Failed to check chatbot settings:', error);\n                // Default to enabled if there's an error\n                setIsEnabled(true);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        // Delay the check to prioritize page content loading\n        const timer = setTimeout(checkChatbotEnabled, 2000);\n        return () => clearTimeout(timer);\n    }, []);\n\n    // Don't render anything while checking settings or if disabled\n    if (isLoading || !isEnabled) {\n        return null;\n    }\n\n    // Render only the button if chatbot is not open\n    if (!showChatbot) {\n        return (\n            <button\n                onClick={() => setShowChatbot(true)}\n                className=\"fixed bottom-6 right-6 p-4 bg-primary text-white rounded-full shadow-lg hover:bg-primary-700 transition-colors\"\n                aria-label=\"Open chatbot\"\n            >\n                <MessageSquare size={24} />\n            </button>\n        );\n    }\n\n    // Only render the full chatbot when it's needed\n    return (\n        <DynamicChatbot onClose={() => setShowChatbot(false)} />\n    );\n} "],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}